
STM32F103_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b434  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  0800b540  0800b540  0001b540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caf4  0800caf4  000205dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800caf4  0800caf4  000205dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800caf4  0800caf4  000205dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800caf4  0800caf4  0001caf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cafc  0800cafc  0001cafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005dc  20000000  0800cb00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017a4  200005dc  0800d0dc  000205dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d80  0800d0dc  00021d80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b420  00000000  00000000  00020605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dfd  00000000  00000000  0003ba25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0003f828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  00040ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfe6  00000000  00000000  00042410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3cd  00000000  00000000  0005e3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f4a  00000000  00000000  0007a7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d70d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006168  00000000  00000000  0010d760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005dc 	.word	0x200005dc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b528 	.word	0x0800b528

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005e0 	.word	0x200005e0
 8000148:	0800b528 	.word	0x0800b528

0800014c <MS5637_RESET>:

uint8_t ERROR_FLAG = 0;

int32_t GLOBAL_dT = 0;		//NOTE: Kinda sus to have a single global variable, when there's TWO sensors.

int8_t MS5637_RESET(I2C_HandleTypeDef *i2c_handle){
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
	//Takes i2c handle as argument, transmits reset command to the address of sensor.
	//If unsuccessful, return 0, else return 1.

	uint8_t ret = 9;
 8000154:	2309      	movs	r3, #9
 8000156:	73fb      	strb	r3, [r7, #15]
	uint8_t WData_BUFFER[1];
	WData_BUFFER[0] = MS5637_RESET_COMMAND;
 8000158:	231e      	movs	r3, #30
 800015a:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(i2c_handle, MS5637_ADDR, WData_BUFFER, 1, HAL_MAX_DELAY);
 800015c:	f107 020c 	add.w	r2, r7, #12
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	9300      	str	r3, [sp, #0]
 8000166:	2301      	movs	r3, #1
 8000168:	21ec      	movs	r1, #236	; 0xec
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f002 fd62 	bl	8002c34 <HAL_I2C_Master_Transmit>
 8000170:	4603      	mov	r3, r0
 8000172:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d004      	beq.n	8000184 <MS5637_RESET+0x38>
		ERROR_FLAG = 1;
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <MS5637_RESET+0x44>)
 800017c:	2201      	movs	r2, #1
 800017e:	701a      	strb	r2, [r3, #0]
		return 0;
 8000180:	2300      	movs	r3, #0
 8000182:	e000      	b.n	8000186 <MS5637_RESET+0x3a>
	} else{
		return 1;
 8000184:	2301      	movs	r3, #1
	}
}
 8000186:	4618      	mov	r0, r3
 8000188:	3710      	adds	r7, #16
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	20000606 	.word	0x20000606

08000194 <MS5637_PROM_READ>:

uint16_t MS5637_PROM_READ(I2C_HandleTypeDef *i2c_handle, uint16_t PROM_ADDR){
 8000194:	b580      	push	{r7, lr}
 8000196:	b088      	sub	sp, #32
 8000198:	af04      	add	r7, sp, #16
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	460b      	mov	r3, r1
 800019e:	807b      	strh	r3, [r7, #2]

	HAL_StatusTypeDef ret;
	uint16_t PROM_DATA;
	uint8_t RData_BUFFER[2];

	ret = HAL_I2C_Mem_Read(i2c_handle, MS5637_ADDR, PROM_ADDR, 1, RData_BUFFER, 2, HAL_MAX_DELAY);
 80001a0:	887a      	ldrh	r2, [r7, #2]
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	9302      	str	r3, [sp, #8]
 80001a8:	2302      	movs	r3, #2
 80001aa:	9301      	str	r3, [sp, #4]
 80001ac:	f107 0308 	add.w	r3, r7, #8
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2301      	movs	r3, #1
 80001b4:	21ec      	movs	r1, #236	; 0xec
 80001b6:	6878      	ldr	r0, [r7, #4]
 80001b8:	f002 ff34 	bl	8003024 <HAL_I2C_Mem_Read>
 80001bc:	4603      	mov	r3, r0
 80001be:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK){
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <MS5637_PROM_READ+0x36>
		return 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	e008      	b.n	80001dc <MS5637_PROM_READ+0x48>
		ERROR_FLAG = 1;
	} else{
		PROM_DATA = (RData_BUFFER[0]<<8) | RData_BUFFER[1];
 80001ca:	7a3b      	ldrb	r3, [r7, #8]
 80001cc:	021b      	lsls	r3, r3, #8
 80001ce:	b21a      	sxth	r2, r3
 80001d0:	7a7b      	ldrb	r3, [r7, #9]
 80001d2:	b21b      	sxth	r3, r3
 80001d4:	4313      	orrs	r3, r2
 80001d6:	b21b      	sxth	r3, r3
 80001d8:	81bb      	strh	r3, [r7, #12]
		return PROM_DATA;
 80001da:	89bb      	ldrh	r3, [r7, #12]
	}
}
 80001dc:	4618      	mov	r0, r3
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <MS5637_SET_PRESS_CONV>:

void MS5637_SET_PRESS_CONV(I2C_HandleTypeDef *i2c_handle){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af02      	add	r7, sp, #8
 80001ea:	6078      	str	r0, [r7, #4]
	//Takes i2c handle as argument, transmits D1 set command to the address of sensor.
	//If unsuccessful, return 0, else return 1.

	HAL_StatusTypeDef ret;
	uint8_t WData_BUFFER[1];
	WData_BUFFER[0] = (D1_RESOLUTION[D1_RES_INDEX]);
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <MS5637_SET_PRESS_CONV+0x40>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <MS5637_SET_PRESS_CONV+0x44>)
 80001f4:	5c9b      	ldrb	r3, [r3, r2]
 80001f6:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(i2c_handle, MS5637_ADDR, WData_BUFFER, 1, HAL_MAX_DELAY);
 80001f8:	f107 020c 	add.w	r2, r7, #12
 80001fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	21ec      	movs	r1, #236	; 0xec
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f002 fd14 	bl	8002c34 <HAL_I2C_Master_Transmit>
 800020c:	4603      	mov	r3, r0
 800020e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8000210:	7bfb      	ldrb	r3, [r7, #15]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d002      	beq.n	800021c <MS5637_SET_PRESS_CONV+0x38>
		ERROR_FLAG = 1;
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <MS5637_SET_PRESS_CONV+0x48>)
 8000218:	2201      	movs	r2, #1
 800021a:	701a      	strb	r2, [r3, #0]
	}
}
 800021c:	bf00      	nop
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000792 	.word	0x20000792
 8000228:	20000008 	.word	0x20000008
 800022c:	20000606 	.word	0x20000606

08000230 <MS5637_SET_TEMP_CONV>:

void MS5637_SET_TEMP_CONV(I2C_HandleTypeDef *i2c_handle){
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af02      	add	r7, sp, #8
 8000236:	6078      	str	r0, [r7, #4]
	//Takes i2c handle as argument, transmits D1 set command to the address of sensor.
	//If unsuccessful, return 0, else return 1.

	HAL_StatusTypeDef ret;
	uint8_t WData_BUFFER[1];
	WData_BUFFER[0] = (D2_RESOLUTION[D2_RES_INDEX]);
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <MS5637_SET_TEMP_CONV+0x40>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	461a      	mov	r2, r3
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <MS5637_SET_TEMP_CONV+0x44>)
 8000240:	5c9b      	ldrb	r3, [r3, r2]
 8000242:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(i2c_handle, MS5637_ADDR, WData_BUFFER, 1, HAL_MAX_DELAY);
 8000244:	f107 020c 	add.w	r2, r7, #12
 8000248:	f04f 33ff 	mov.w	r3, #4294967295
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2301      	movs	r3, #1
 8000250:	21ec      	movs	r1, #236	; 0xec
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f002 fcee 	bl	8002c34 <HAL_I2C_Master_Transmit>
 8000258:	4603      	mov	r3, r0
 800025a:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d002      	beq.n	8000268 <MS5637_SET_TEMP_CONV+0x38>
		ERROR_FLAG = 1;
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <MS5637_SET_TEMP_CONV+0x48>)
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
	}
}
 8000268:	bf00      	nop
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000793 	.word	0x20000793
 8000274:	20000010 	.word	0x20000010
 8000278:	20000606 	.word	0x20000606

0800027c <MS5637_GET_PRESSURE>:

int32_t MS5637_GET_PRESSURE(I2C_HandleTypeDef *i2c_handle){
 800027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000280:	b0a7      	sub	sp, #156	; 0x9c
 8000282:	af04      	add	r7, sp, #16
 8000284:	6678      	str	r0, [r7, #100]	; 0x64
	uint32_t ADC_DATA;
	int64_t OFF, SENS;
	int32_t P;
	uint8_t RData_BUFFER[3];

	MS5637_SET_PRESS_CONV(i2c_handle);
 8000286:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000288:	f7ff ffac 	bl	80001e4 <MS5637_SET_PRESS_CONV>
	HAL_Delay(CONVERSION_DELAY[D1_RES_INDEX]);	//NOTE: TESTING! MUST BE DELETED!!
 800028c:	4b75      	ldr	r3, [pc, #468]	; (8000464 <MS5637_GET_PRESSURE+0x1e8>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	461a      	mov	r2, r3
 8000292:	4b75      	ldr	r3, [pc, #468]	; (8000468 <MS5637_GET_PRESSURE+0x1ec>)
 8000294:	5c9b      	ldrb	r3, [r3, r2]
 8000296:	4618      	mov	r0, r3
 8000298:	f002 f88a 	bl	80023b0 <HAL_Delay>

	ret = HAL_I2C_Mem_Read(i2c_handle, MS5637_ADDR, MS5637_READ_ADC, 1, RData_BUFFER, 3, HAL_MAX_DELAY);
 800029c:	f04f 33ff 	mov.w	r3, #4294967295
 80002a0:	9302      	str	r3, [sp, #8]
 80002a2:	2303      	movs	r3, #3
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	2301      	movs	r3, #1
 80002ae:	2200      	movs	r2, #0
 80002b0:	21ec      	movs	r1, #236	; 0xec
 80002b2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80002b4:	f002 feb6 	bl	8003024 <HAL_I2C_Mem_Read>
 80002b8:	4603      	mov	r3, r0
 80002ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if(ret != HAL_OK){
 80002be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MS5637_GET_PRESSURE+0x4e>
		return 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	e0c6      	b.n	8000458 <MS5637_GET_PRESSURE+0x1dc>
		ERROR_FLAG = 1;
	} else{
		ADC_DATA = (RData_BUFFER[0]<<16) | (RData_BUFFER[1]<<8) | RData_BUFFER[2];
 80002ca:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80002ce:	041a      	lsls	r2, r3, #16
 80002d0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80002d4:	021b      	lsls	r3, r3, #8
 80002d6:	431a      	orrs	r2, r3
 80002d8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80002dc:	4313      	orrs	r3, r2
 80002de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// OFF = OFF_T1 + TCO * dT
		OFF = ((int64_t)(PROM_COEF[MS5637_PRESSURE_OFFSET_INDEX]) << 17) + (((int64_t)(PROM_COEF[MS5637_TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * GLOBAL_dT) >> 6);
 80002e2:	4b62      	ldr	r3, [pc, #392]	; (800046c <MS5637_GET_PRESSURE+0x1f0>)
 80002e4:	889b      	ldrh	r3, [r3, #4]
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	2200      	movs	r2, #0
 80002ea:	653b      	str	r3, [r7, #80]	; 0x50
 80002ec:	657a      	str	r2, [r7, #84]	; 0x54
 80002ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80002f2:	460b      	mov	r3, r1
 80002f4:	0bdb      	lsrs	r3, r3, #15
 80002f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80002f8:	460b      	mov	r3, r1
 80002fa:	045b      	lsls	r3, r3, #17
 80002fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80002fe:	4b5b      	ldr	r3, [pc, #364]	; (800046c <MS5637_GET_PRESSURE+0x1f0>)
 8000300:	891b      	ldrh	r3, [r3, #8]
 8000302:	b29b      	uxth	r3, r3
 8000304:	2200      	movs	r2, #0
 8000306:	643b      	str	r3, [r7, #64]	; 0x40
 8000308:	647a      	str	r2, [r7, #68]	; 0x44
 800030a:	4b59      	ldr	r3, [pc, #356]	; (8000470 <MS5637_GET_PRESSURE+0x1f4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	17da      	asrs	r2, r3, #31
 8000310:	65bb      	str	r3, [r7, #88]	; 0x58
 8000312:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000314:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000318:	460b      	mov	r3, r1
 800031a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800031c:	fb02 f203 	mul.w	r2, r2, r3
 8000320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000322:	4606      	mov	r6, r0
 8000324:	fb06 f303 	mul.w	r3, r6, r3
 8000328:	4413      	add	r3, r2
 800032a:	4602      	mov	r2, r0
 800032c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800032e:	fba2 4501 	umull	r4, r5, r2, r1
 8000332:	442b      	add	r3, r5
 8000334:	461d      	mov	r5, r3
 8000336:	f04f 0200 	mov.w	r2, #0
 800033a:	f04f 0300 	mov.w	r3, #0
 800033e:	09a2      	lsrs	r2, r4, #6
 8000340:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8000344:	11ab      	asrs	r3, r5, #6
 8000346:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800034a:	4621      	mov	r1, r4
 800034c:	1889      	adds	r1, r1, r2
 800034e:	60b9      	str	r1, [r7, #8]
 8000350:	4629      	mov	r1, r5
 8000352:	eb43 0101 	adc.w	r1, r3, r1
 8000356:	60f9      	str	r1, [r7, #12]
 8000358:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800035c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Sensitivity at actual temperature = SENS_T1 + TCS * dT
		SENS = ((int64_t)PROM_COEF[MS5637_PRESSURE_SENSITIVITY_INDEX] << 16) + (((int64_t)PROM_COEF[MS5637_TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * GLOBAL_dT) >> 7);
 8000360:	4b42      	ldr	r3, [pc, #264]	; (800046c <MS5637_GET_PRESSURE+0x1f0>)
 8000362:	885b      	ldrh	r3, [r3, #2]
 8000364:	b29b      	uxth	r3, r3
 8000366:	2200      	movs	r2, #0
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
 800036a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800036c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000370:	460b      	mov	r3, r1
 8000372:	0c1b      	lsrs	r3, r3, #16
 8000374:	637b      	str	r3, [r7, #52]	; 0x34
 8000376:	460b      	mov	r3, r1
 8000378:	041b      	lsls	r3, r3, #16
 800037a:	633b      	str	r3, [r7, #48]	; 0x30
 800037c:	4b3b      	ldr	r3, [pc, #236]	; (800046c <MS5637_GET_PRESSURE+0x1f0>)
 800037e:	88db      	ldrh	r3, [r3, #6]
 8000380:	b29b      	uxth	r3, r3
 8000382:	2200      	movs	r2, #0
 8000384:	62bb      	str	r3, [r7, #40]	; 0x28
 8000386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000388:	4b39      	ldr	r3, [pc, #228]	; (8000470 <MS5637_GET_PRESSURE+0x1f4>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	17da      	asrs	r2, r3, #31
 800038e:	623b      	str	r3, [r7, #32]
 8000390:	627a      	str	r2, [r7, #36]	; 0x24
 8000392:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000396:	4622      	mov	r2, r4
 8000398:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800039c:	4629      	mov	r1, r5
 800039e:	fb01 f202 	mul.w	r2, r1, r2
 80003a2:	46b4      	mov	ip, r6
 80003a4:	4618      	mov	r0, r3
 80003a6:	4621      	mov	r1, r4
 80003a8:	4603      	mov	r3, r0
 80003aa:	fb03 f30c 	mul.w	r3, r3, ip
 80003ae:	4413      	add	r3, r2
 80003b0:	4602      	mov	r2, r0
 80003b2:	4629      	mov	r1, r5
 80003b4:	fba2 8901 	umull	r8, r9, r2, r1
 80003b8:	444b      	add	r3, r9
 80003ba:	4699      	mov	r9, r3
 80003bc:	f04f 0200 	mov.w	r2, #0
 80003c0:	f04f 0300 	mov.w	r3, #0
 80003c4:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 80003c8:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 80003cc:	ea4f 13e9 	mov.w	r3, r9, asr #7
 80003d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80003d4:	4621      	mov	r1, r4
 80003d6:	1889      	adds	r1, r1, r2
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	4629      	mov	r1, r5
 80003dc:	eb43 0101 	adc.w	r1, r3, r1
 80003e0:	6079      	str	r1, [r7, #4]
 80003e2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80003e6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		// Temperature compensated pressure = D1 * SENS - OFF
		//P = (((ADC_DATA * SENS) >> 21) - OFF) >> 15;
		P = (((int32_t)ADC_DATA)*(SENS >> 21)-OFF)>>15;
 80003ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80003ee:	17da      	asrs	r2, r3, #31
 80003f0:	61bb      	str	r3, [r7, #24]
 80003f2:	61fa      	str	r2, [r7, #28]
 80003f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80003f8:	f04f 0200 	mov.w	r2, #0
 80003fc:	f04f 0300 	mov.w	r3, #0
 8000400:	0d42      	lsrs	r2, r0, #21
 8000402:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8000406:	154b      	asrs	r3, r1, #21
 8000408:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800040c:	4629      	mov	r1, r5
 800040e:	fb02 f001 	mul.w	r0, r2, r1
 8000412:	4621      	mov	r1, r4
 8000414:	fb01 f103 	mul.w	r1, r1, r3
 8000418:	4401      	add	r1, r0
 800041a:	4620      	mov	r0, r4
 800041c:	fba0 ab02 	umull	sl, fp, r0, r2
 8000420:	eb01 030b 	add.w	r3, r1, fp
 8000424:	469b      	mov	fp, r3
 8000426:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800042a:	ebba 0102 	subs.w	r1, sl, r2
 800042e:	6139      	str	r1, [r7, #16]
 8000430:	eb6b 0303 	sbc.w	r3, fp, r3
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	f04f 0200 	mov.w	r2, #0
 800043a:	f04f 0300 	mov.w	r3, #0
 800043e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000442:	4621      	mov	r1, r4
 8000444:	0bca      	lsrs	r2, r1, #15
 8000446:	4620      	mov	r0, r4
 8000448:	4629      	mov	r1, r5
 800044a:	460c      	mov	r4, r1
 800044c:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
 8000450:	13cb      	asrs	r3, r1, #15
 8000452:	4613      	mov	r3, r2
 8000454:	66fb      	str	r3, [r7, #108]	; 0x6c

		return P;
 8000456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
	}
}
 8000458:	4618      	mov	r0, r3
 800045a:	378c      	adds	r7, #140	; 0x8c
 800045c:	46bd      	mov	sp, r7
 800045e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000462:	bf00      	nop
 8000464:	20000792 	.word	0x20000792
 8000468:	20000000 	.word	0x20000000
 800046c:	200005f8 	.word	0x200005f8
 8000470:	20000608 	.word	0x20000608

08000474 <MS5637_GET_TEMPERATURE>:

int32_t MS5637_GET_TEMPERATURE(I2C_HandleTypeDef *i2c_handle){
 8000474:	b580      	push	{r7, lr}
 8000476:	b08c      	sub	sp, #48	; 0x30
 8000478:	af04      	add	r7, sp, #16
 800047a:	6078      	str	r0, [r7, #4]
	uint32_t ADC_DATA;
	int32_t dT;
	int32_t TEMP;
	uint8_t RData_BUFFER[3];

	MS5637_SET_TEMP_CONV(i2c_handle);
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f7ff fed7 	bl	8000230 <MS5637_SET_TEMP_CONV>

	HAL_Delay(CONVERSION_DELAY[D2_RES_INDEX]);	//NOTE: TESTING! MUST BE DELETED!!
 8000482:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <MS5637_GET_TEMPERATURE+0x88>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	461a      	mov	r2, r3
 8000488:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <MS5637_GET_TEMPERATURE+0x8c>)
 800048a:	5c9b      	ldrb	r3, [r3, r2]
 800048c:	4618      	mov	r0, r3
 800048e:	f001 ff8f 	bl	80023b0 <HAL_Delay>

	ret = HAL_I2C_Mem_Read(i2c_handle, MS5637_ADDR, MS5637_READ_ADC, 1, RData_BUFFER, 3, HAL_MAX_DELAY);
 8000492:	f04f 33ff 	mov.w	r3, #4294967295
 8000496:	9302      	str	r3, [sp, #8]
 8000498:	2303      	movs	r3, #3
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2301      	movs	r3, #1
 80004a4:	2200      	movs	r2, #0
 80004a6:	21ec      	movs	r1, #236	; 0xec
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f002 fdbb 	bl	8003024 <HAL_I2C_Mem_Read>
 80004ae:	4603      	mov	r3, r0
 80004b0:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK){
 80004b2:	7ffb      	ldrb	r3, [r7, #31]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MS5637_GET_TEMPERATURE+0x48>
		return 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	e01b      	b.n	80004f4 <MS5637_GET_TEMPERATURE+0x80>
		ERROR_FLAG = 1;
	} else{
		ADC_DATA = (RData_BUFFER[0]<<16) | (RData_BUFFER[1]<<8) | RData_BUFFER[2];
 80004bc:	7b3b      	ldrb	r3, [r7, #12]
 80004be:	041a      	lsls	r2, r3, #16
 80004c0:	7b7b      	ldrb	r3, [r7, #13]
 80004c2:	021b      	lsls	r3, r3, #8
 80004c4:	4313      	orrs	r3, r2
 80004c6:	7bba      	ldrb	r2, [r7, #14]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	61bb      	str	r3, [r7, #24]

		dT = (int32_t)ADC_DATA - ((int32_t)PROM_COEF[MS5637_REFERENCE_TEMPERATURE_INDEX] << 8);
 80004cc:	69ba      	ldr	r2, [r7, #24]
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <MS5637_GET_TEMPERATURE+0x90>)
 80004d0:	895b      	ldrh	r3, [r3, #10]
 80004d2:	021b      	lsls	r3, r3, #8
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	617b      	str	r3, [r7, #20]
		TEMP = 2000 + (dT * (int32_t)PROM_COEF[MS5637_TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23);
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <MS5637_GET_TEMPERATURE+0x90>)
 80004da:	899b      	ldrh	r3, [r3, #12]
 80004dc:	461a      	mov	r2, r3
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	fb02 f303 	mul.w	r3, r2, r3
 80004e4:	15db      	asrs	r3, r3, #23
 80004e6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80004ea:	613b      	str	r3, [r7, #16]

		GLOBAL_dT = dT;	//Update the global variable
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <MS5637_GET_TEMPERATURE+0x94>)
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	6013      	str	r3, [r2, #0]
		return TEMP;
 80004f2:	693b      	ldr	r3, [r7, #16]
	}
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000793 	.word	0x20000793
 8000500:	20000000 	.word	0x20000000
 8000504:	200005f8 	.word	0x200005f8
 8000508:	20000608 	.word	0x20000608

0800050c <MS5637_SETUP>:


void MS5637_SETUP(I2C_HandleTypeDef *i2c_handle, uint8_t D1_INDEX, uint8_t D2_INDEX){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
 8000518:	4613      	mov	r3, r2
 800051a:	70bb      	strb	r3, [r7, #2]

	MS5637_RESET(i2c_handle);			//Reset sensor
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff fe15 	bl	800014c <MS5637_RESET>
	HAL_Delay(50);						//Give sensor time to reset
 8000522:	2032      	movs	r0, #50	; 0x32
 8000524:	f001 ff44 	bl	80023b0 <HAL_Delay>
	MS5637_GET_PROM_VALUES(i2c_handle);	//Fills PROM_COEF array with coefficient values from the sensor PROM.
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 f81f 	bl	800056c <MS5637_GET_PROM_VALUES>
	D1_RES_INDEX = D1_INDEX;			//Define conversion resolution by index (specific D1/D2 values found in global arrays)
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <MS5637_SETUP+0x50>)
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	7013      	strb	r3, [r2, #0]
	D2_RES_INDEX = D2_INDEX;
 8000534:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <MS5637_SETUP+0x54>)
 8000536:	78bb      	ldrb	r3, [r7, #2]
 8000538:	7013      	strb	r3, [r2, #0]

	MS5637_GET_TEMPERATURE(i2c_handle);	//Get temperature to update GLOBAL_dT. This is to ensure somewhat proper measurement of pressure, even when temperature hasn't been measured.
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff ff9a 	bl	8000474 <MS5637_GET_TEMPERATURE>

	if(ERROR_FLAG){
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MS5637_SETUP+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d005      	beq.n	8000554 <MS5637_SETUP+0x48>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_SET);	//NOTE: Maybe change LED to D3?
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	4806      	ldr	r0, [pc, #24]	; (8000568 <MS5637_SETUP+0x5c>)
 8000550:	f002 f9fb 	bl	800294a <HAL_GPIO_WritePin>
	}
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000792 	.word	0x20000792
 8000560:	20000793 	.word	0x20000793
 8000564:	20000606 	.word	0x20000606
 8000568:	40011000 	.word	0x40011000

0800056c <MS5637_GET_PROM_VALUES>:

void MS5637_GET_PROM_VALUES(I2C_HandleTypeDef *i2c_handle){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < MS5637_COEFFICIENT_COUNT; i++){
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	e011      	b.n	800059e <MS5637_GET_PROM_VALUES+0x32>
		PROM_COEF[i] = MS5637_PROM_READ(i2c_handle, MS5637_PROM_ADDRESS_READ_ADDRESS_0 + (i * 2));
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3350      	adds	r3, #80	; 0x50
 800057e:	b29b      	uxth	r3, r3
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	b29b      	uxth	r3, r3
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f7ff fe04 	bl	8000194 <MS5637_PROM_READ>
 800058c:	4603      	mov	r3, r0
 800058e:	4619      	mov	r1, r3
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <MS5637_GET_PROM_VALUES+0x5c>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < MS5637_COEFFICIENT_COUNT; i++){
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3301      	adds	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2b06      	cmp	r3, #6
 80005a2:	ddea      	ble.n	800057a <MS5637_GET_PROM_VALUES+0xe>
	} if (!MS5637_CRC_CHECK((PROM_COEF[MS5637_CRC_INDEX] & 0xF000) >> 12)){
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MS5637_GET_PROM_VALUES+0x5c>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	0b1b      	lsrs	r3, r3, #12
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f80e 	bl	80005d0 <MS5637_CRC_CHECK>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d102      	bne.n	80005c0 <MS5637_GET_PROM_VALUES+0x54>
		ERROR_FLAG = 1;
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <MS5637_GET_PROM_VALUES+0x60>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
	}
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200005f8 	.word	0x200005f8
 80005cc:	20000606 	.word	0x20000606

080005d0 <MS5637_CRC_CHECK>:

uint8_t MS5637_CRC_CHECK(uint8_t crc) {
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	//
	uint8_t cnt, n_bit;
	uint16_t n_rem, crc_read;

	n_rem = 0x00;
 80005da:	2300      	movs	r3, #0
 80005dc:	81bb      	strh	r3, [r7, #12]
	crc_read = PROM_COEF[0];
 80005de:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <MS5637_CRC_CHECK+0xd4>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	817b      	strh	r3, [r7, #10]
	PROM_COEF[MS5637_COEFFICIENT_COUNT] = 0;
 80005e4:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <MS5637_CRC_CHECK+0xd4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	81da      	strh	r2, [r3, #14]
	PROM_COEF[0] = (0x0FFF & (PROM_COEF[0])); // Clear the CRC byte
 80005ea:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <MS5637_CRC_CHECK+0xd4>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MS5637_CRC_CHECK+0xd4>)
 80005f6:	801a      	strh	r2, [r3, #0]

	for (cnt = 0; cnt < (MS5637_COEFFICIENT_COUNT + 1) * 2; cnt++) {
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e03c      	b.n	8000678 <MS5637_CRC_CHECK+0xa8>
		// Get next byte
		if (cnt % 2 == 1){
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00f      	beq.n	800062a <MS5637_CRC_CHECK+0x5a>
			n_rem ^= PROM_COEF[cnt >> 1] & 0x00FF;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	085b      	lsrs	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	461a      	mov	r2, r3
 8000612:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <MS5637_CRC_CHECK+0xd4>)
 8000614:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000618:	b21b      	sxth	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	b21a      	sxth	r2, r3
 800061e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000622:	4053      	eors	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	81bb      	strh	r3, [r7, #12]
 8000628:	e00b      	b.n	8000642 <MS5637_CRC_CHECK+0x72>
		}else{
			n_rem ^= PROM_COEF[cnt >> 1] >> 8;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	085b      	lsrs	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MS5637_CRC_CHECK+0xd4>)
 8000634:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29a      	uxth	r2, r3
 800063c:	89bb      	ldrh	r3, [r7, #12]
 800063e:	4053      	eors	r3, r2
 8000640:	81bb      	strh	r3, [r7, #12]
		}

		for (n_bit = 8; n_bit > 0; n_bit--) {
 8000642:	2308      	movs	r3, #8
 8000644:	73bb      	strb	r3, [r7, #14]
 8000646:	e011      	b.n	800066c <MS5637_CRC_CHECK+0x9c>

			if (n_rem & 0x8000){
 8000648:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800064c:	2b00      	cmp	r3, #0
 800064e:	da07      	bge.n	8000660 <MS5637_CRC_CHECK+0x90>
				n_rem = (n_rem << 1) ^ 0x3000;
 8000650:	89bb      	ldrh	r3, [r7, #12]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	b21b      	sxth	r3, r3
 8000656:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800065a:	b21b      	sxth	r3, r3
 800065c:	81bb      	strh	r3, [r7, #12]
 800065e:	e002      	b.n	8000666 <MS5637_CRC_CHECK+0x96>
			}else{
				n_rem <<= 1;
 8000660:	89bb      	ldrh	r3, [r7, #12]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	81bb      	strh	r3, [r7, #12]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	3b01      	subs	r3, #1
 800066a:	73bb      	strb	r3, [r7, #14]
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ea      	bne.n	8000648 <MS5637_CRC_CHECK+0x78>
	for (cnt = 0; cnt < (MS5637_COEFFICIENT_COUNT + 1) * 2; cnt++) {
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	3301      	adds	r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2b0f      	cmp	r3, #15
 800067c:	d9bf      	bls.n	80005fe <MS5637_CRC_CHECK+0x2e>
			}
		}
	}
	n_rem >>= 12;
 800067e:	89bb      	ldrh	r3, [r7, #12]
 8000680:	0b1b      	lsrs	r3, r3, #12
 8000682:	81bb      	strh	r3, [r7, #12]
	PROM_COEF[0] = crc_read;
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <MS5637_CRC_CHECK+0xd4>)
 8000686:	897b      	ldrh	r3, [r7, #10]
 8000688:	8013      	strh	r3, [r2, #0]

	return (n_rem == crc);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	b29b      	uxth	r3, r3
 800068e:	89ba      	ldrh	r2, [r7, #12]
 8000690:	429a      	cmp	r2, r3
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	b2db      	uxtb	r3, r3
}
 800069a:	4618      	mov	r0, r3
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	200005f8 	.word	0x200005f8

080006a8 <MS5637_STREAM_USB>:




void MS5637_STREAM_USB(I2C_HandleTypeDef *i2c_handle1, I2C_HandleTypeDef *i2c_handle2, uint8_t D_CONV){
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	b096      	sub	sp, #88	; 0x58
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71fb      	strb	r3, [r7, #7]
	char presArr1[7];// = {',', ',', ',', ',', ',', ',', ','};
	char presArr2[7];// = {',', ',', ',', ',', ',', ',', ','};

	char TIM_VAL[11];

	uint8_t presL1 = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t presL2 = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t TIML = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	int32_t dT1;
	int32_t dT2;

	MS5637_LOCAL_SET_TEMP_CONV(i2c_handle1, D_CONV);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4619      	mov	r1, r3
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f000 fa5c 	bl	8000b8c <MS5637_LOCAL_SET_TEMP_CONV>
	MS5637_LOCAL_SET_TEMP_CONV(i2c_handle2, D_CONV);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4619      	mov	r1, r3
 80006d8:	68b8      	ldr	r0, [r7, #8]
 80006da:	f000 fa57 	bl	8000b8c <MS5637_LOCAL_SET_TEMP_CONV>

	HAL_Delay(CONVERSION_DELAY[D_CONV]); //NOTE: I should find a better way of doing this...
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4a90      	ldr	r2, [pc, #576]	; (8000924 <MS5637_STREAM_USB+0x27c>)
 80006e2:	5cd3      	ldrb	r3, [r2, r3]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fe63 	bl	80023b0 <HAL_Delay>

	dT1 = MS5637_LOCAL_GET_TEMPERATURE(i2c_handle1, tempArr1);
 80006ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006ee:	4619      	mov	r1, r3
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f000 f91b 	bl	800092c <MS5637_LOCAL_GET_TEMPERATURE>
 80006f6:	6538      	str	r0, [r7, #80]	; 0x50
	dT2 = MS5637_LOCAL_GET_TEMPERATURE(i2c_handle2, tempArr2);
 80006f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006fc:	4619      	mov	r1, r3
 80006fe:	68b8      	ldr	r0, [r7, #8]
 8000700:	f000 f914 	bl	800092c <MS5637_LOCAL_GET_TEMPERATURE>
 8000704:	64f8      	str	r0, [r7, #76]	; 0x4c

	MS5637_LOCAL_SET_PRESS_CONV(i2c_handle1, D_CONV);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4619      	mov	r1, r3
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f000 fa62 	bl	8000bd4 <MS5637_LOCAL_SET_PRESS_CONV>
	MS5637_LOCAL_SET_PRESS_CONV(i2c_handle2, D_CONV);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4619      	mov	r1, r3
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	f000 fa5d 	bl	8000bd4 <MS5637_LOCAL_SET_PRESS_CONV>

	HAL_Delay(CONVERSION_DELAY[D_CONV]); //NOTE: I should find a better way of doing this...
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4a81      	ldr	r2, [pc, #516]	; (8000924 <MS5637_STREAM_USB+0x27c>)
 800071e:	5cd3      	ldrb	r3, [r2, r3]
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fe45 	bl	80023b0 <HAL_Delay>

	MS5637_LOCAL_GET_PRESSURE(i2c_handle1, dT1, presArr1);
 8000726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800072a:	461a      	mov	r2, r3
 800072c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f000 f93a 	bl	80009a8 <MS5637_LOCAL_GET_PRESSURE>
	MS5637_LOCAL_GET_PRESSURE(i2c_handle2, dT2, presArr2);
 8000734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000738:	461a      	mov	r2, r3
 800073a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	f000 f933 	bl	80009a8 <MS5637_LOCAL_GET_PRESSURE>

	itoa((int)TIM3->CNT, TIM_VAL, 10);
 8000742:	4b79      	ldr	r3, [pc, #484]	; (8000928 <MS5637_STREAM_USB+0x280>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4618      	mov	r0, r3
 8000748:	f107 0318 	add.w	r3, r7, #24
 800074c:	220a      	movs	r2, #10
 800074e:	4619      	mov	r1, r3
 8000750:	f00a fe28 	bl	800b3a4 <itoa>

	for(uint8_t i = 0; i<sizeof(TIM_VAL);i++){
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800075a:	e04c      	b.n	80007f6 <MS5637_STREAM_USB+0x14e>
		if(TIM_VAL[i] == '\0' && TIML == 0){
 800075c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000760:	3358      	adds	r3, #88	; 0x58
 8000762:	443b      	add	r3, r7
 8000764:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10f      	bne.n	800078c <MS5637_STREAM_USB+0xe4>
 800076c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10b      	bne.n	800078c <MS5637_STREAM_USB+0xe4>
			TIML = i+1;
 8000774:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000778:	3301      	adds	r3, #1
 800077a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			TIM_VAL[i] = ',';
 800077e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000782:	3358      	adds	r3, #88	; 0x58
 8000784:	443b      	add	r3, r7
 8000786:	222c      	movs	r2, #44	; 0x2c
 8000788:	f803 2c40 	strb.w	r2, [r3, #-64]
		}
		if(presArr1[i] == '\0' && presL1 == 0){
 800078c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000790:	3358      	adds	r3, #88	; 0x58
 8000792:	443b      	add	r3, r7
 8000794:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10f      	bne.n	80007bc <MS5637_STREAM_USB+0x114>
 800079c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d10b      	bne.n	80007bc <MS5637_STREAM_USB+0x114>
			presL1 = i+1;
 80007a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80007a8:	3301      	adds	r3, #1
 80007aa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			presArr1[i] = ',';
 80007ae:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80007b2:	3358      	adds	r3, #88	; 0x58
 80007b4:	443b      	add	r3, r7
 80007b6:	222c      	movs	r2, #44	; 0x2c
 80007b8:	f803 2c2c 	strb.w	r2, [r3, #-44]
		}
		if(presArr2[i] == '\0' && presL2 == 0){
 80007bc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80007c0:	3358      	adds	r3, #88	; 0x58
 80007c2:	443b      	add	r3, r7
 80007c4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10f      	bne.n	80007ec <MS5637_STREAM_USB+0x144>
 80007cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10b      	bne.n	80007ec <MS5637_STREAM_USB+0x144>
			presL2 = i+1;
 80007d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80007d8:	3301      	adds	r3, #1
 80007da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			presArr2[i] = ',';
 80007de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80007e2:	3358      	adds	r3, #88	; 0x58
 80007e4:	443b      	add	r3, r7
 80007e6:	222c      	movs	r2, #44	; 0x2c
 80007e8:	f803 2c34 	strb.w	r2, [r3, #-52]
	for(uint8_t i = 0; i<sizeof(TIM_VAL);i++){
 80007ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80007f0:	3301      	adds	r3, #1
 80007f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80007f6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80007fa:	2b0a      	cmp	r3, #10
 80007fc:	d9ae      	bls.n	800075c <MS5637_STREAM_USB+0xb4>
		}
	}

	tempArr1[4] = ',';	//Because the value is always four digits and the fifth index has to be a comma
 80007fe:	232c      	movs	r3, #44	; 0x2c
 8000800:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	uint8_t USB_data[TIML + presL1 + sizeof(tempArr1) + presL2 + sizeof(tempArr2) + 1];
 8000804:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000808:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800080c:	4413      	add	r3, r2
 800080e:	461a      	mov	r2, r3
 8000810:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000814:	4413      	add	r3, r2
 8000816:	f103 060b 	add.w	r6, r3, #11
 800081a:	466b      	mov	r3, sp
 800081c:	469a      	mov	sl, r3
 800081e:	4633      	mov	r3, r6
 8000820:	3b01      	subs	r3, #1
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
 8000824:	2300      	movs	r3, #0
 8000826:	46b0      	mov	r8, r6
 8000828:	4699      	mov	r9, r3
 800082a:	f04f 0200 	mov.w	r2, #0
 800082e:	f04f 0300 	mov.w	r3, #0
 8000832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800083a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800083e:	2300      	movs	r3, #0
 8000840:	4634      	mov	r4, r6
 8000842:	461d      	mov	r5, r3
 8000844:	f04f 0200 	mov.w	r2, #0
 8000848:	f04f 0300 	mov.w	r3, #0
 800084c:	00eb      	lsls	r3, r5, #3
 800084e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000852:	00e2      	lsls	r2, r4, #3
 8000854:	1df3      	adds	r3, r6, #7
 8000856:	08db      	lsrs	r3, r3, #3
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	ebad 0d03 	sub.w	sp, sp, r3
 800085e:	466b      	mov	r3, sp
 8000860:	3300      	adds	r3, #0
 8000862:	647b      	str	r3, [r7, #68]	; 0x44

	memcpy(USB_data, TIM_VAL, TIML);
 8000864:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4619      	mov	r1, r3
 800086e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000870:	f00a fd9a 	bl	800b3a8 <memcpy>
	memcpy(USB_data + TIML, presArr1, presL1);
 8000874:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800087a:	4413      	add	r3, r2
 800087c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000880:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000884:	4618      	mov	r0, r3
 8000886:	f00a fd8f 	bl	800b3a8 <memcpy>
	memcpy(USB_data + TIML + presL1, tempArr1, sizeof(tempArr1));
 800088a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800088e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000892:	4413      	add	r3, r2
 8000894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000896:	4413      	add	r3, r2
 8000898:	461a      	mov	r2, r3
 800089a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	6010      	str	r0, [r2, #0]
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	7113      	strb	r3, [r2, #4]
	memcpy(USB_data + TIML + presL1 + sizeof(tempArr1), presArr2, presL2);
 80008a6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80008aa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80008ae:	4413      	add	r3, r2
 80008b0:	3305      	adds	r3, #5
 80008b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008b4:	4413      	add	r3, r2
 80008b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80008ba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80008be:	4618      	mov	r0, r3
 80008c0:	f00a fd72 	bl	800b3a8 <memcpy>
	memcpy(USB_data + TIML + presL1 + sizeof(tempArr1) + presL2, tempArr2, sizeof(tempArr2));
 80008c4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80008c8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80008cc:	441a      	add	r2, r3
 80008ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80008d2:	4413      	add	r3, r2
 80008d4:	3305      	adds	r3, #5
 80008d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008d8:	4413      	add	r3, r2
 80008da:	461a      	mov	r2, r3
 80008dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	6010      	str	r0, [r2, #0]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	7113      	strb	r3, [r2, #4]

	char end[2] = {'\n', '\0'};
 80008e8:	230a      	movs	r3, #10
 80008ea:	82bb      	strh	r3, [r7, #20]
	memcpy(USB_data + TIML + presL1 + sizeof(tempArr1) + presL2 + sizeof(tempArr2) - 1, end, sizeof(end));
 80008ec:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80008f0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80008f4:	441a      	add	r2, r3
 80008f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80008fa:	4413      	add	r3, r2
 80008fc:	3309      	adds	r3, #9
 80008fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000900:	4413      	add	r3, r2
 8000902:	8aba      	ldrh	r2, [r7, #20]
 8000904:	801a      	strh	r2, [r3, #0]

	CDC_Transmit_FS(USB_data, sizeof(USB_data));
 8000906:	b2b3      	uxth	r3, r6
 8000908:	4619      	mov	r1, r3
 800090a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800090c:	f00a f930 	bl	800ab70 <CDC_Transmit_FS>
	TIM3->CNT = 0;	//Reset counter :)
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <MS5637_STREAM_USB+0x280>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
 8000916:	46d5      	mov	sp, sl
}
 8000918:	bf00      	nop
 800091a:	3758      	adds	r7, #88	; 0x58
 800091c:	46bd      	mov	sp, r7
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	bf00      	nop
 8000924:	20000000 	.word	0x20000000
 8000928:	40000400 	.word	0x40000400

0800092c <MS5637_LOCAL_GET_TEMPERATURE>:

int32_t MS5637_LOCAL_GET_TEMPERATURE(I2C_HandleTypeDef *i2c_handle, char tempArr[]){
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af04      	add	r7, sp, #16
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	uint8_t RData_BUFFER[3];

	//MS5637_SET_TEMP_CONV(i2c_handle);
	//HAL_Delay(CONVERSION_DELAY[D2_RES_INDEX]);	//NOTE: TESTING! MUST BE DELETED!!

	ret = HAL_I2C_Mem_Read(i2c_handle, MS5637_ADDR, MS5637_READ_ADC, 1, RData_BUFFER, 3, HAL_MAX_DELAY);
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	2303      	movs	r3, #3
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	2200      	movs	r2, #0
 800094a:	21ec      	movs	r1, #236	; 0xec
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f002 fb69 	bl	8003024 <HAL_I2C_Mem_Read>
 8000952:	4603      	mov	r3, r0
 8000954:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK){
 8000956:	7ffb      	ldrb	r3, [r7, #31]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MS5637_LOCAL_GET_TEMPERATURE+0x34>
		return 0;
 800095c:	2300      	movs	r3, #0
 800095e:	e01d      	b.n	800099c <MS5637_LOCAL_GET_TEMPERATURE+0x70>
		ERROR_FLAG = 1;
	} else{
		ADC_DATA = (RData_BUFFER[0]<<16) | (RData_BUFFER[1]<<8) | RData_BUFFER[2];
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	041a      	lsls	r2, r3, #16
 8000964:	7b7b      	ldrb	r3, [r7, #13]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	4313      	orrs	r3, r2
 800096a:	7bba      	ldrb	r2, [r7, #14]
 800096c:	4313      	orrs	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]

		dT = (int32_t)ADC_DATA - ((int32_t)PROM_COEF[MS5637_REFERENCE_TEMPERATURE_INDEX] << 8);
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MS5637_LOCAL_GET_TEMPERATURE+0x78>)
 8000974:	895b      	ldrh	r3, [r3, #10]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
		TEMP = 2000 + (dT * (int32_t)PROM_COEF[MS5637_TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23);
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MS5637_LOCAL_GET_TEMPERATURE+0x78>)
 800097e:	899b      	ldrh	r3, [r3, #12]
 8000980:	461a      	mov	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	fb02 f303 	mul.w	r3, r2, r3
 8000988:	15db      	asrs	r3, r3, #23
 800098a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800098e:	613b      	str	r3, [r7, #16]

		itoa(TEMP, tempArr, 10);
 8000990:	220a      	movs	r2, #10
 8000992:	6839      	ldr	r1, [r7, #0]
 8000994:	6938      	ldr	r0, [r7, #16]
 8000996:	f00a fd05 	bl	800b3a4 <itoa>

		//GLOBAL_dT = dT;	//Update the global variable
		return dT;
 800099a:	697b      	ldr	r3, [r7, #20]
	}
}
 800099c:	4618      	mov	r0, r3
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200005f8 	.word	0x200005f8

080009a8 <MS5637_LOCAL_GET_PRESSURE>:

void MS5637_LOCAL_GET_PRESSURE(I2C_HandleTypeDef *i2c_handle, int32_t dT, char presArr[]){
 80009a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ac:	b0a9      	sub	sp, #164	; 0xa4
 80009ae:	af04      	add	r7, sp, #16
 80009b0:	66f8      	str	r0, [r7, #108]	; 0x6c
 80009b2:	66b9      	str	r1, [r7, #104]	; 0x68
 80009b4:	667a      	str	r2, [r7, #100]	; 0x64
	uint8_t RData_BUFFER[3];

	//MS5637_SET_PRESS_CONV(i2c_handle);
	//HAL_Delay(CONVERSION_DELAY[D1_RES_INDEX]);	//NOTE: TESTING! MUST BE DELETED!!

	ret = HAL_I2C_Mem_Read(i2c_handle, MS5637_ADDR, MS5637_READ_ADC, 1, RData_BUFFER, 3, HAL_MAX_DELAY);
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2303      	movs	r3, #3
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2301      	movs	r3, #1
 80009c8:	2200      	movs	r2, #0
 80009ca:	21ec      	movs	r1, #236	; 0xec
 80009cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80009ce:	f002 fb29 	bl	8003024 <HAL_I2C_Mem_Read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if(ret != HAL_OK){
 80009d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <MS5637_LOCAL_GET_PRESSURE+0x40>
		//return 0;
		ERROR_FLAG = 1;
 80009e0:	4b68      	ldr	r3, [pc, #416]	; (8000b84 <MS5637_LOCAL_GET_PRESSURE+0x1dc>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]

		itoa(P, presArr, 10);

		//return P;
	}
}
 80009e6:	e0c8      	b.n	8000b7a <MS5637_LOCAL_GET_PRESSURE+0x1d2>
		ADC_DATA = (RData_BUFFER[0]<<16) | (RData_BUFFER[1]<<8) | RData_BUFFER[2];
 80009e8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80009ec:	041a      	lsls	r2, r3, #16
 80009ee:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	431a      	orrs	r2, r3
 80009f6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80009fa:	4313      	orrs	r3, r2
 80009fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		OFF = ((int64_t)(PROM_COEF[MS5637_PRESSURE_OFFSET_INDEX]) << 17) + (((int64_t)(PROM_COEF[MS5637_TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT) >> 6);
 8000a00:	4b61      	ldr	r3, [pc, #388]	; (8000b88 <MS5637_LOCAL_GET_PRESSURE+0x1e0>)
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	2200      	movs	r2, #0
 8000a08:	653b      	str	r3, [r7, #80]	; 0x50
 8000a0a:	657a      	str	r2, [r7, #84]	; 0x54
 8000a0c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8000a10:	460b      	mov	r3, r1
 8000a12:	0bdb      	lsrs	r3, r3, #15
 8000a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a16:	460b      	mov	r3, r1
 8000a18:	045b      	lsls	r3, r3, #17
 8000a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a1c:	4b5a      	ldr	r3, [pc, #360]	; (8000b88 <MS5637_LOCAL_GET_PRESSURE+0x1e0>)
 8000a1e:	891b      	ldrh	r3, [r3, #8]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	2200      	movs	r2, #0
 8000a24:	643b      	str	r3, [r7, #64]	; 0x40
 8000a26:	647a      	str	r2, [r7, #68]	; 0x44
 8000a28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a2a:	17da      	asrs	r2, r3, #31
 8000a2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000a34:	460b      	mov	r3, r1
 8000a36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a38:	fb02 f203 	mul.w	r2, r2, r3
 8000a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a3e:	4606      	mov	r6, r0
 8000a40:	fb06 f303 	mul.w	r3, r6, r3
 8000a44:	4413      	add	r3, r2
 8000a46:	4602      	mov	r2, r0
 8000a48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000a4a:	fba2 4501 	umull	r4, r5, r2, r1
 8000a4e:	442b      	add	r3, r5
 8000a50:	461d      	mov	r5, r3
 8000a52:	f04f 0200 	mov.w	r2, #0
 8000a56:	f04f 0300 	mov.w	r3, #0
 8000a5a:	09a2      	lsrs	r2, r4, #6
 8000a5c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8000a60:	11ab      	asrs	r3, r5, #6
 8000a62:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8000a66:	4621      	mov	r1, r4
 8000a68:	1889      	adds	r1, r1, r2
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	eb43 0101 	adc.w	r1, r3, r1
 8000a72:	60f9      	str	r1, [r7, #12]
 8000a74:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000a78:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
		SENS = ((int64_t)PROM_COEF[MS5637_PRESSURE_SENSITIVITY_INDEX] << 16) + (((int64_t)PROM_COEF[MS5637_TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7);
 8000a7c:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <MS5637_LOCAL_GET_PRESSURE+0x1e0>)
 8000a7e:	885b      	ldrh	r3, [r3, #2]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	2200      	movs	r2, #0
 8000a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a86:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000a88:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	0c1b      	lsrs	r3, r3, #16
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
 8000a92:	460b      	mov	r3, r1
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <MS5637_LOCAL_GET_PRESSURE+0x1e0>)
 8000a9a:	88db      	ldrh	r3, [r3, #6]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000aa6:	17da      	asrs	r2, r3, #31
 8000aa8:	623b      	str	r3, [r7, #32]
 8000aaa:	627a      	str	r2, [r7, #36]	; 0x24
 8000aac:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000ab0:	4622      	mov	r2, r4
 8000ab2:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8000ab6:	4629      	mov	r1, r5
 8000ab8:	fb01 f202 	mul.w	r2, r1, r2
 8000abc:	46b4      	mov	ip, r6
 8000abe:	4618      	mov	r0, r3
 8000ac0:	4621      	mov	r1, r4
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	fb03 f30c 	mul.w	r3, r3, ip
 8000ac8:	4413      	add	r3, r2
 8000aca:	4602      	mov	r2, r0
 8000acc:	4629      	mov	r1, r5
 8000ace:	fba2 8901 	umull	r8, r9, r2, r1
 8000ad2:	444b      	add	r3, r9
 8000ad4:	4699      	mov	r9, r3
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	f04f 0300 	mov.w	r3, #0
 8000ade:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 8000ae2:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 8000ae6:	ea4f 13e9 	mov.w	r3, r9, asr #7
 8000aea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8000aee:	4621      	mov	r1, r4
 8000af0:	1889      	adds	r1, r1, r2
 8000af2:	6039      	str	r1, [r7, #0]
 8000af4:	4629      	mov	r1, r5
 8000af6:	eb43 0101 	adc.w	r1, r3, r1
 8000afa:	6079      	str	r1, [r7, #4]
 8000afc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b00:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		P = (((int32_t)ADC_DATA)*(SENS >> 21)-OFF)>>15;
 8000b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b08:	17da      	asrs	r2, r3, #31
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	61fa      	str	r2, [r7, #28]
 8000b0e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	f04f 0300 	mov.w	r3, #0
 8000b1a:	0d42      	lsrs	r2, r0, #21
 8000b1c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8000b20:	154b      	asrs	r3, r1, #21
 8000b22:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000b26:	4629      	mov	r1, r5
 8000b28:	fb02 f001 	mul.w	r0, r2, r1
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	fb01 f103 	mul.w	r1, r1, r3
 8000b32:	4401      	add	r1, r0
 8000b34:	4620      	mov	r0, r4
 8000b36:	fba0 ab02 	umull	sl, fp, r0, r2
 8000b3a:	eb01 030b 	add.w	r3, r1, fp
 8000b3e:	469b      	mov	fp, r3
 8000b40:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8000b44:	ebba 0102 	subs.w	r1, sl, r2
 8000b48:	6139      	str	r1, [r7, #16]
 8000b4a:	eb6b 0303 	sbc.w	r3, fp, r3
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	0bca      	lsrs	r2, r1, #15
 8000b60:	4620      	mov	r0, r4
 8000b62:	4629      	mov	r1, r5
 8000b64:	460c      	mov	r4, r1
 8000b66:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
 8000b6a:	13cb      	asrs	r3, r1, #15
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	677b      	str	r3, [r7, #116]	; 0x74
		itoa(P, presArr, 10);
 8000b70:	220a      	movs	r2, #10
 8000b72:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000b74:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000b76:	f00a fc15 	bl	800b3a4 <itoa>
}
 8000b7a:	bf00      	nop
 8000b7c:	3794      	adds	r7, #148	; 0x94
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b84:	20000606 	.word	0x20000606
 8000b88:	200005f8 	.word	0x200005f8

08000b8c <MS5637_LOCAL_SET_TEMP_CONV>:

void MS5637_LOCAL_SET_TEMP_CONV(I2C_HandleTypeDef *i2c_handle, uint8_t D_index){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
	//Takes i2c handle as argument, transmits D1 set command to the address of sensor.
	//If unsuccessful, return 0, else return 1.

	HAL_StatusTypeDef ret;
	uint8_t WData_BUFFER[1];
	WData_BUFFER[0] = (D2_RESOLUTION[D_index]);
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <MS5637_LOCAL_SET_TEMP_CONV+0x40>)
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(i2c_handle, MS5637_ADDR, WData_BUFFER, 1, HAL_MAX_DELAY);
 8000ba0:	f107 020c 	add.w	r2, r7, #12
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2301      	movs	r3, #1
 8000bac:	21ec      	movs	r1, #236	; 0xec
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f002 f840 	bl	8002c34 <HAL_I2C_Master_Transmit>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <MS5637_LOCAL_SET_TEMP_CONV+0x38>
		ERROR_FLAG = 1;
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <MS5637_LOCAL_SET_TEMP_CONV+0x44>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000010 	.word	0x20000010
 8000bd0:	20000606 	.word	0x20000606

08000bd4 <MS5637_LOCAL_SET_PRESS_CONV>:

void MS5637_LOCAL_SET_PRESS_CONV(I2C_HandleTypeDef *i2c_handle, uint8_t D_index){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]
	//Takes i2c handle as argument, transmits D1 set command to the address of sensor.
	//If unsuccessful, return 0, else return 1.

	HAL_StatusTypeDef ret;
	uint8_t WData_BUFFER[1];
	WData_BUFFER[0] = (D1_RESOLUTION[D_index]);
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <MS5637_LOCAL_SET_PRESS_CONV+0x40>)
 8000be4:	5cd3      	ldrb	r3, [r2, r3]
 8000be6:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(i2c_handle, MS5637_ADDR, WData_BUFFER, 1, HAL_MAX_DELAY);
 8000be8:	f107 020c 	add.w	r2, r7, #12
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	21ec      	movs	r1, #236	; 0xec
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f002 f81c 	bl	8002c34 <HAL_I2C_Master_Transmit>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <MS5637_LOCAL_SET_PRESS_CONV+0x38>
		ERROR_FLAG = 1;
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <MS5637_LOCAL_SET_PRESS_CONV+0x44>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000606 	.word	0x20000606

08000c1c <count_digits>:

#include "custom_UI.h"

uint8_t UI_ERROR_FLAG = 0;

uint8_t count_digits(uint16_t number){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
	uint8_t count = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
	while(number > 10){
 8000c2a:	e008      	b.n	8000c3e <count_digits+0x22>
		number = number/10;
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <count_digits+0x34>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	80fb      	strh	r3, [r7, #6]
		count += 1;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
	while(number > 10){
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	2b0a      	cmp	r3, #10
 8000c42:	d8f3      	bhi.n	8000c2c <count_digits+0x10>
	}
	return count;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	cccccccd 	.word	0xcccccccd

08000c54 <setup_std_graph>:

void setup_std_graph(char* title){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	6078      	str	r0, [r7, #4]

	char ssd1306_return;
	char x_str[5];
	char y_str[5];

	itoa(GRAPH_X_LABEL, x_str, 10);	//convert integer limits to strings and place within char arrays
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	220a      	movs	r2, #10
 8000c62:	4619      	mov	r1, r3
 8000c64:	2064      	movs	r0, #100	; 0x64
 8000c66:	f00a fb9d 	bl	800b3a4 <itoa>
	itoa(GRAPH_Y_LABEL, y_str, 10);
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	220a      	movs	r2, #10
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000c76:	f00a fb95 	bl	800b3a4 <itoa>

	uint8_t delta_x = count_digits(GRAPH_Y_LABEL);
 8000c7a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000c7e:	f7ff ffcd 	bl	8000c1c <count_digits>
 8000c82:	4603      	mov	r3, r0
 8000c84:	75fb      	strb	r3, [r7, #23]

	ssd1306_Fill(Black);	//clear display
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 ff44 	bl	8001b14 <ssd1306_Fill>

	ssd1306_SetCursor(TITLE_X, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f001 f88a 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(title, Font_11x18, White);	//Write title
 8000c94:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <setup_std_graph+0x88>)
 8000c96:	2301      	movs	r3, #1
 8000c98:	ca06      	ldmia	r2, {r1, r2}
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f001 f85e 	bl	8001d5c <ssd1306_WriteString>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	75bb      	strb	r3, [r7, #22]
	//ssd1306_return = ssd1306_WriteString(x_str, Font_7x10, White);	//write limit

	//ssd1306_SetCursor((Y_AXIS_LINE_X + 1), 5);
	//ssd1306_return = ssd1306_WriteString(y_str, Font_7x10, White);	//write limit

	ssd1306_Line(X_AXIS_LINE_X1, X_AXIS_LINE_Y, X_AXIS_LINE_X2, X_AXIS_LINE_Y, White);	//x1, y1, x2, y2, colour	(x)		place lines
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2337      	movs	r3, #55	; 0x37
 8000caa:	2269      	movs	r2, #105	; 0x69
 8000cac:	2137      	movs	r1, #55	; 0x37
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f892 	bl	8001dd8 <ssd1306_Line>
	ssd1306_Line(Y_AXIS_LINE_X, Y_AXIS_LINE_Y1, Y_AXIS_LINE_X, Y_AXIS_LINE_Y2, White);		//x1, y1, x2, y2, colour	(y)
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2339      	movs	r3, #57	; 0x39
 8000cba:	2202      	movs	r2, #2
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f001 f88a 	bl	8001dd8 <ssd1306_Line>

	if(!ssd1306_return){	//raise global flag if error
 8000cc4:	7dbb      	ldrb	r3, [r7, #22]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <setup_std_graph+0x7c>
		UI_ERROR_FLAG = 1;
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <setup_std_graph+0x8c>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
	}

	ssd1306_UpdateScreen();	//Update OLED display
 8000cd0:	f000 ff42 	bl	8001b58 <ssd1306_UpdateScreen>
}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000028 	.word	0x20000028
 8000ce0:	2000060c 	.word	0x2000060c

08000ce4 <update_graph>:
	}

	ssd1306_UpdateScreen();	//Update OLED display
}

void update_graph(uint8_t length, uint32_t dataArr[2][length], uint32_t single_data){
 8000ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce8:	b093      	sub	sp, #76	; 0x4c
 8000cea:	af02      	add	r7, sp, #8
 8000cec:	4603      	mov	r3, r0
 8000cee:	61b9      	str	r1, [r7, #24]
 8000cf0:	617a      	str	r2, [r7, #20]
 8000cf2:	77fb      	strb	r3, [r7, #31]
 8000cf4:	7ffe      	ldrb	r6, [r7, #31]
 8000cf6:	4633      	mov	r3, r6
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cfc:	b2f3      	uxtb	r3, r6
 8000cfe:	2200      	movs	r2, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	014b      	lsls	r3, r1, #5
 8000d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d14:	4684      	mov	ip, r0
 8000d16:	ea43 63dc 	orr.w	r3, r3, ip, lsr #27
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	014a      	lsls	r2, r1, #5
 8000d1e:	466b      	mov	r3, sp
 8000d20:	603b      	str	r3, [r7, #0]
	 *
	 * Newest addition: It also writes the newest data point.
	 */

	char ssd1306_return;
	char live_data[count_digits(single_data)+1];
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff78 	bl	8000c1c <count_digits>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	1c59      	adds	r1, r3, #1
 8000d30:	1e4b      	subs	r3, r1, #1
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
 8000d34:	460a      	mov	r2, r1
 8000d36:	2300      	movs	r3, #0
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	00c3      	lsls	r3, r0, #3
 8000d48:	68b8      	ldr	r0, [r7, #8]
 8000d4a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d4e:	68b8      	ldr	r0, [r7, #8]
 8000d50:	00c2      	lsls	r2, r0, #3
 8000d52:	460a      	mov	r2, r1
 8000d54:	2300      	movs	r3, #0
 8000d56:	4692      	mov	sl, r2
 8000d58:	469b      	mov	fp, r3
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000d66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000d6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000d6e:	460b      	mov	r3, r1
 8000d70:	3307      	adds	r3, #7
 8000d72:	08db      	lsrs	r3, r3, #3
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	ebad 0d03 	sub.w	sp, sp, r3
 8000d7a:	ab02      	add	r3, sp, #8
 8000d7c:	3300      	adds	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	itoa(single_data, live_data, 10);
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	220a      	movs	r2, #10
 8000d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00a fb0c 	bl	800b3a4 <itoa>

	uint32_t newArr[length];
 8000d8c:	7ff9      	ldrb	r1, [r7, #31]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	3b01      	subs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d94:	b2cb      	uxtb	r3, r1
 8000d96:	2200      	movs	r2, #0
 8000d98:	4698      	mov	r8, r3
 8000d9a:	4691      	mov	r9, r2
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000da8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000dac:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000db0:	b2cb      	uxtb	r3, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	461c      	mov	r4, r3
 8000db6:	4615      	mov	r5, r2
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	016b      	lsls	r3, r5, #5
 8000dc2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000dc6:	0162      	lsls	r2, r4, #5
 8000dc8:	460b      	mov	r3, r1
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	3307      	adds	r3, #7
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	ebad 0d03 	sub.w	sp, sp, r3
 8000dd6:	ab02      	add	r3, sp, #8
 8000dd8:	3303      	adds	r3, #3
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24

	//uint8_t delta_x = count_digits(GRAPH_Y_LABEL);	//Used for old "single_data" placement
	ssd1306_FillRectangle(3, 54, 104, 16, Black);	//clear graph area
 8000de0:	2300      	movs	r3, #0
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2310      	movs	r3, #16
 8000de6:	2268      	movs	r2, #104	; 0x68
 8000de8:	2136      	movs	r1, #54	; 0x36
 8000dea:	2003      	movs	r0, #3
 8000dec:	f001 f860 	bl	8001eb0 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(4, 60, 104, 56, Black);	//clear graph area
 8000df0:	2300      	movs	r3, #0
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2338      	movs	r3, #56	; 0x38
 8000df6:	2268      	movs	r2, #104	; 0x68
 8000df8:	213c      	movs	r1, #60	; 0x3c
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f001 f858 	bl	8001eb0 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(TITLE_X+50, 14, 128, 0, Black);	//clear single_data area
 8000e00:	2300      	movs	r3, #0
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2300      	movs	r3, #0
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	210e      	movs	r1, #14
 8000e0a:	2041      	movs	r0, #65	; 0x41
 8000e0c:	f001 f850 	bl	8001eb0 <ssd1306_FillRectangle>
	uint8_t max_index = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	for(uint8_t i = 0; i<length; i++){				//find index containing max value :)
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000e1c:	e01a      	b.n	8000e54 <update_graph+0x170>
		if(dataArr[1][i]>dataArr[1][max_index]){
 8000e1e:	4633      	mov	r3, r6
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4413      	add	r3, r2
 8000e26:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000e2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e2e:	4633      	mov	r3, r6
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	69b9      	ldr	r1, [r7, #24]
 8000e34:	440b      	add	r3, r1
 8000e36:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000e3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d903      	bls.n	8000e4a <update_graph+0x166>
			max_index = i;
 8000e42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e46:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	for(uint8_t i = 0; i<length; i++){				//find index containing max value :)
 8000e4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000e54:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d3df      	bcc.n	8000e1e <update_graph+0x13a>
		}
	}
	for(uint8_t i = 0; i<length; i++){
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000e64:	e020      	b.n	8000ea8 <update_graph+0x1c4>
		newArr[i] = ((dataArr[1][i]*(X_AXIS_LINE_Y-Y_AXIS_LINE_Y1))/dataArr[1][max_index]);
 8000e66:	4633      	mov	r3, r6
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	1a99      	subs	r1, r3, r2
 8000e80:	4633      	mov	r3, r6
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4413      	add	r3, r2
 8000e88:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000e94:	fbb1 f1f3 	udiv	r1, r1, r3
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i<length; i++){
 8000e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000ea8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000eac:	7ffb      	ldrb	r3, [r7, #31]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d3d9      	bcc.n	8000e66 <update_graph+0x182>
		for(uint8_t i = 0; i<length; i++){
			newArr[1][i] = (dataArr[1][i]*(Y_AXIS_LINE_Y2-Y_AXIS_LINE_Y1))/dataArr[1][max_index];
		}
	}*/

	uint8_t x_offset = (Y_AXIS_LINE_X + 1);
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t y_offset = X_AXIS_LINE_Y;
 8000eb8:	2337      	movs	r3, #55	; 0x37
 8000eba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for(int i=1; i < length; i++){	//place graph lines
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ec2:	e02d      	b.n	8000f20 <update_graph+0x23c>
		//ssd1306_Line(((dataArr[0][i-1])+x_offset), (y_offset-(dataArr[1][i-1])), ((dataArr[0][i])+x_offset), (y_offset-(dataArr[1][i])), White);	//x1, y1, x2, y2, colour
		ssd1306_Line(((dataArr[0][i-1])+x_offset), (y_offset-(newArr[i-1])), ((dataArr[0][i])+x_offset), (y_offset-(newArr[i])), White);
 8000ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b2d8      	uxtb	r0, r3
 8000ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	b2d9      	uxtb	r1, r3
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000efa:	4413      	add	r3, r2
 8000efc:	b2dc      	uxtb	r4, r3
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2201      	movs	r2, #1
 8000f12:	9200      	str	r2, [sp, #0]
 8000f14:	4622      	mov	r2, r4
 8000f16:	f000 ff5f 	bl	8001dd8 <ssd1306_Line>
	for(int i=1; i < length; i++){	//place graph lines
 8000f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbcd      	blt.n	8000ec4 <update_graph+0x1e0>
	}

	//New one:
	ssd1306_SetCursor(TITLE_X + 50, 0);	//Set cursor just after title
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2041      	movs	r0, #65	; 0x41
 8000f2c:	f000 ff3c 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(live_data, Font_11x18, White);	//Write newest data point
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <update_graph+0x280>)
 8000f32:	2301      	movs	r3, #1
 8000f34:	ca06      	ldmia	r2, {r1, r2}
 8000f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f38:	f000 ff10 	bl	8001d5c <ssd1306_WriteString>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	//Old one:
	//ssd1306_SetCursor(TITLE_X + (delta_x*5) + 45, 0);	//Set cursor just after title
	//ssd1306_return = ssd1306_WriteString(live_data, Font_7x10, White);	//Write newest data point

	if(!ssd1306_return){	//raise global flag if error
 8000f42:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <update_graph+0x26c>
			UI_ERROR_FLAG = 1;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <update_graph+0x284>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
	}

	ssd1306_UpdateScreen();		//update OLED display
 8000f50:	f000 fe02 	bl	8001b58 <ssd1306_UpdateScreen>
 8000f54:	f8d7 d000 	ldr.w	sp, [r7]
}
 8000f58:	bf00      	nop
 8000f5a:	3744      	adds	r7, #68	; 0x44
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f62:	bf00      	nop
 8000f64:	20000028 	.word	0x20000028
 8000f68:	2000060c 	.word	0x2000060c

08000f6c <setup_menu>:

void setup_menu(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b090      	sub	sp, #64	; 0x40
 8000f70:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);	//clear display
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 fdce 	bl	8001b14 <ssd1306_Fill>

	char D1_str[2];		//NOTE: We don't differ between D1 and D2 resolution, so we just use D1 for now
	char USB_str[2];

	itoa(D1_RES_INDEX, D1_str, 10);
 8000f78:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <setup_menu+0x144>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f82:	220a      	movs	r2, #10
 8000f84:	4619      	mov	r1, r3
 8000f86:	f00a fa0d 	bl	800b3a4 <itoa>
	itoa(USB_EN, USB_str, 10);
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <setup_menu+0x148>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f94:	220a      	movs	r2, #10
 8000f96:	4619      	mov	r1, r3
 8000f98:	f00a fa04 	bl	800b3a4 <itoa>

	char title[5] = "MENU";
 8000f9c:	4a46      	ldr	r2, [pc, #280]	; (80010b8 <setup_menu+0x14c>)
 8000f9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa6:	6018      	str	r0, [r3, #0]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	7019      	strb	r1, [r3, #0]
	char option1[9] = "DEF RES:";
 8000fac:	4a43      	ldr	r2, [pc, #268]	; (80010bc <setup_menu+0x150>)
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb4:	c303      	stmia	r3!, {r0, r1}
 8000fb6:	701a      	strb	r2, [r3, #0]
	char option2[8] = "USB EN:";
 8000fb8:	4a41      	ldr	r2, [pc, #260]	; (80010c0 <setup_menu+0x154>)
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc2:	e883 0003 	stmia.w	r3, {r0, r1}
	char option3[11] = "USB Stream";
 8000fc6:	4a3f      	ldr	r2, [pc, #252]	; (80010c4 <setup_menu+0x158>)
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fce:	c303      	stmia	r3!, {r0, r1}
 8000fd0:	801a      	strh	r2, [r3, #0]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	0c12      	lsrs	r2, r2, #16
 8000fd6:	701a      	strb	r2, [r3, #0]
	char option4[12] = "Display DEF";
 8000fd8:	4a3b      	ldr	r2, [pc, #236]	; (80010c8 <setup_menu+0x15c>)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char ssd1306_return;

	ssd1306_SetCursor(TITLE_X, 0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	200f      	movs	r0, #15
 8000fe6:	f000 fedf 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(title, Font_11x18, White);	//Write title
 8000fea:	4a38      	ldr	r2, [pc, #224]	; (80010cc <setup_menu+0x160>)
 8000fec:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	ca06      	ldmia	r2, {r1, r2}
 8000ff4:	f000 feb2 	bl	8001d5c <ssd1306_WriteString>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	ssd1306_SetCursor(TITLE_X, 20);
 8000ffe:	2114      	movs	r1, #20
 8001000:	200f      	movs	r0, #15
 8001002:	f000 fed1 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(option1, Font_7x10, White);	//Write first option
 8001006:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <setup_menu+0x164>)
 8001008:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800100c:	2301      	movs	r3, #1
 800100e:	ca06      	ldmia	r2, {r1, r2}
 8001010:	f000 fea4 	bl	8001d5c <ssd1306_WriteString>
 8001014:	4603      	mov	r3, r0
 8001016:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ssd1306_SetCursor(TITLE_X + 60, 20);
 800101a:	2114      	movs	r1, #20
 800101c:	204b      	movs	r0, #75	; 0x4b
 800101e:	f000 fec3 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(D1_str, Font_7x10, White);	//Write value for first option
 8001022:	4a2b      	ldr	r2, [pc, #172]	; (80010d0 <setup_menu+0x164>)
 8001024:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001028:	2301      	movs	r3, #1
 800102a:	ca06      	ldmia	r2, {r1, r2}
 800102c:	f000 fe96 	bl	8001d5c <ssd1306_WriteString>
 8001030:	4603      	mov	r3, r0
 8001032:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	ssd1306_SetCursor(TITLE_X, 30);
 8001036:	211e      	movs	r1, #30
 8001038:	200f      	movs	r0, #15
 800103a:	f000 feb5 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(option2, Font_7x10, White);	//Write second option
 800103e:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <setup_menu+0x164>)
 8001040:	f107 001c 	add.w	r0, r7, #28
 8001044:	2301      	movs	r3, #1
 8001046:	ca06      	ldmia	r2, {r1, r2}
 8001048:	f000 fe88 	bl	8001d5c <ssd1306_WriteString>
 800104c:	4603      	mov	r3, r0
 800104e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ssd1306_SetCursor(TITLE_X + 60, 30);
 8001052:	211e      	movs	r1, #30
 8001054:	204b      	movs	r0, #75	; 0x4b
 8001056:	f000 fea7 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(USB_str, Font_7x10, White);	//Write value for second option
 800105a:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <setup_menu+0x164>)
 800105c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001060:	2301      	movs	r3, #1
 8001062:	ca06      	ldmia	r2, {r1, r2}
 8001064:	f000 fe7a 	bl	8001d5c <ssd1306_WriteString>
 8001068:	4603      	mov	r3, r0
 800106a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	ssd1306_SetCursor(TITLE_X, 40);
 800106e:	2128      	movs	r1, #40	; 0x28
 8001070:	200f      	movs	r0, #15
 8001072:	f000 fe99 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(option3, Font_7x10, White);	//Write third option
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <setup_menu+0x164>)
 8001078:	f107 0010 	add.w	r0, r7, #16
 800107c:	2301      	movs	r3, #1
 800107e:	ca06      	ldmia	r2, {r1, r2}
 8001080:	f000 fe6c 	bl	8001d5c <ssd1306_WriteString>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	ssd1306_SetCursor(TITLE_X, 50);
 800108a:	2132      	movs	r1, #50	; 0x32
 800108c:	200f      	movs	r0, #15
 800108e:	f000 fe8b 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(option4, Font_7x10, White);	//Write fourth option
 8001092:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <setup_menu+0x164>)
 8001094:	1d38      	adds	r0, r7, #4
 8001096:	2301      	movs	r3, #1
 8001098:	ca06      	ldmia	r2, {r1, r2}
 800109a:	f000 fe5f 	bl	8001d5c <ssd1306_WriteString>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	ssd1306_UpdateScreen();	//Update OLED display
 80010a4:	f000 fd58 	bl	8001b58 <ssd1306_UpdateScreen>

}
 80010a8:	bf00      	nop
 80010aa:	3740      	adds	r7, #64	; 0x40
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000792 	.word	0x20000792
 80010b4:	2000001e 	.word	0x2000001e
 80010b8:	0800b540 	.word	0x0800b540
 80010bc:	0800b548 	.word	0x0800b548
 80010c0:	0800b554 	.word	0x0800b554
 80010c4:	0800b55c 	.word	0x0800b55c
 80010c8:	0800b568 	.word	0x0800b568
 80010cc:	20000028 	.word	0x20000028
 80010d0:	20000020 	.word	0x20000020

080010d4 <menu_scroll>:

void menu_scroll(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0

	setup_menu();
 80010da:	f7ff ff47 	bl	8000f6c <setup_menu>

	char arrow[2] = ">";
 80010de:	233e      	movs	r3, #62	; 0x3e
 80010e0:	80bb      	strh	r3, [r7, #4]
	char ssd1306_return;

	if(menu_cursor_placement > NUMBER_OF_OPTIONS){
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <menu_scroll+0x64>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d903      	bls.n	80010f2 <menu_scroll+0x1e>
		menu_cursor_placement = NUMBER_OF_OPTIONS;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <menu_scroll+0x64>)
 80010ec:	2204      	movs	r2, #4
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e006      	b.n	8001100 <menu_scroll+0x2c>
	} else if(menu_cursor_placement < 1){
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <menu_scroll+0x64>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <menu_scroll+0x2c>
		menu_cursor_placement = 1;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <menu_scroll+0x64>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
	}

	ssd1306_SetCursor(TITLE_X-10, menu_cursor_placement*10 + 10);
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <menu_scroll+0x64>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	2005      	movs	r0, #5
 8001116:	f000 fe47 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(arrow, Font_7x10, White);	//Write title
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <menu_scroll+0x68>)
 800111c:	1d38      	adds	r0, r7, #4
 800111e:	2301      	movs	r3, #1
 8001120:	ca06      	ldmia	r2, {r1, r2}
 8001122:	f000 fe1b 	bl	8001d5c <ssd1306_WriteString>
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]

	ssd1306_UpdateScreen();	//Update OLED display
 800112a:	f000 fd15 	bl	8001b58 <ssd1306_UpdateScreen>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000001d 	.word	0x2000001d
 800113c:	20000020 	.word	0x20000020

08001140 <display_USB_stream>:

void display_USB_stream(){
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);	//clear display
 8001146:	2000      	movs	r0, #0
 8001148:	f000 fce4 	bl	8001b14 <ssd1306_Fill>
	char title1[10] = "Streaming";
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <display_USB_stream+0x60>)
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	ca07      	ldmia	r2, {r0, r1, r2}
 8001154:	c303      	stmia	r3!, {r0, r1}
 8001156:	801a      	strh	r2, [r3, #0]
	char title2[10] = "to USB...";
 8001158:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <display_USB_stream+0x64>)
 800115a:	463b      	mov	r3, r7
 800115c:	ca07      	ldmia	r2, {r0, r1, r2}
 800115e:	c303      	stmia	r3!, {r0, r1}
 8001160:	801a      	strh	r2, [r3, #0]
	char ssd1306_return;

	ssd1306_SetCursor(TITLE_X, 20);
 8001162:	2114      	movs	r1, #20
 8001164:	200f      	movs	r0, #15
 8001166:	f000 fe1f 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(title1, Font_11x18, White);	//Write title
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <display_USB_stream+0x68>)
 800116c:	f107 000c 	add.w	r0, r7, #12
 8001170:	2301      	movs	r3, #1
 8001172:	ca06      	ldmia	r2, {r1, r2}
 8001174:	f000 fdf2 	bl	8001d5c <ssd1306_WriteString>
 8001178:	4603      	mov	r3, r0
 800117a:	75fb      	strb	r3, [r7, #23]
	ssd1306_SetCursor(TITLE_X, 40);
 800117c:	2128      	movs	r1, #40	; 0x28
 800117e:	200f      	movs	r0, #15
 8001180:	f000 fe12 	bl	8001da8 <ssd1306_SetCursor>
	ssd1306_return = ssd1306_WriteString(title2, Font_11x18, White);	//Write title
 8001184:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <display_USB_stream+0x68>)
 8001186:	4638      	mov	r0, r7
 8001188:	2301      	movs	r3, #1
 800118a:	ca06      	ldmia	r2, {r1, r2}
 800118c:	f000 fde6 	bl	8001d5c <ssd1306_WriteString>
 8001190:	4603      	mov	r3, r0
 8001192:	75fb      	strb	r3, [r7, #23]
	ssd1306_UpdateScreen();	//Update OLED display
 8001194:	f000 fce0 	bl	8001b58 <ssd1306_UpdateScreen>
}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	0800b574 	.word	0x0800b574
 80011a4:	0800b580 	.word	0x0800b580
 80011a8:	20000028 	.word	0x20000028

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0ae      	sub	sp, #184	; 0xb8
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f001 f89b 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f8fd 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f000 fa79 	bl	80016b0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80011be:	f009 fc19 	bl	800a9f4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80011c2:	f000 f953 	bl	800146c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80011c6:	f000 fa49 	bl	800165c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80011ca:	f000 f97d 	bl	80014c8 <MX_I2C2_Init>
  MX_TIM2_Init();
 80011ce:	f000 f9a9 	bl	8001524 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011d2:	f000 f9f5 	bl	80015c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CR1 = 1;
 80011d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

  ssd1306_Init();
 80011de:	f000 fc2f 	bl	8001a40 <ssd1306_Init>
  MS5637_SETUP(&hi2c1, 5, 5);
 80011e2:	2205      	movs	r2, #5
 80011e4:	2105      	movs	r1, #5
 80011e6:	486a      	ldr	r0, [pc, #424]	; (8001390 <main+0x1e4>)
 80011e8:	f7ff f990 	bl	800050c <MS5637_SETUP>
  int32_t temperature;

  int32_t amb_pressure;
  int32_t amb_temperature;

  pressure = MS5637_GET_PRESSURE(&hi2c1);
 80011ec:	4868      	ldr	r0, [pc, #416]	; (8001390 <main+0x1e4>)
 80011ee:	f7ff f845 	bl	800027c <MS5637_GET_PRESSURE>
 80011f2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
  temperature = MS5637_GET_TEMPERATURE(&hi2c1);
 80011f6:	4866      	ldr	r0, [pc, #408]	; (8001390 <main+0x1e4>)
 80011f8:	f7ff f93c 	bl	8000474 <MS5637_GET_TEMPERATURE>
 80011fc:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

  uint32_t OLED_data[2][GRAPH_SIZE];
  setup_std_graph(graph_title);
 8001200:	4864      	ldr	r0, [pc, #400]	; (8001394 <main+0x1e8>)
 8001202:	f7ff fd27 	bl	8000c54 <setup_std_graph>

  for(int8_t i = 0; i < GRAPH_SIZE; i++){
 8001206:	2300      	movs	r3, #0
 8001208:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800120c:	e025      	b.n	800125a <main+0xae>
  	  OLED_data[0][i] = i*5;
 800120e:	f997 20b7 	ldrsb.w	r2, [r7, #183]	; 0xb7
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	441a      	add	r2, r3
 8001218:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	33b8      	adds	r3, #184	; 0xb8
 8001220:	443b      	add	r3, r7
 8001222:	f843 2cac 	str.w	r2, [r3, #-172]
  	  OLED_data[1][i] = 0;
 8001226:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 800122a:	3314      	adds	r3, #20
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	33b8      	adds	r3, #184	; 0xb8
 8001230:	443b      	add	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	f843 2cac 	str.w	r2, [r3, #-172]
  	  mean_pressure += MS5637_GET_PRESSURE(&hi2c1);
 8001238:	4855      	ldr	r0, [pc, #340]	; (8001390 <main+0x1e4>)
 800123a:	f7ff f81f 	bl	800027c <MS5637_GET_PRESSURE>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	4b55      	ldr	r3, [pc, #340]	; (8001398 <main+0x1ec>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a53      	ldr	r2, [pc, #332]	; (8001398 <main+0x1ec>)
 800124a:	6013      	str	r3, [r2, #0]
  for(int8_t i = 0; i < GRAPH_SIZE; i++){
 800124c:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8001250:	b2db      	uxtb	r3, r3
 8001252:	3301      	adds	r3, #1
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800125a:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 800125e:	2b13      	cmp	r3, #19
 8001260:	ddd5      	ble.n	800120e <main+0x62>
    }

  mean_pressure = mean_pressure/GRAPH_SIZE;
 8001262:	4b4d      	ldr	r3, [pc, #308]	; (8001398 <main+0x1ec>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a4d      	ldr	r2, [pc, #308]	; (800139c <main+0x1f0>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <main+0x1ec>)
 8001270:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch(current_state){
 8001272:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <main+0x1f4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d8fb      	bhi.n	8001272 <main+0xc6>
 800127a:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <main+0xd4>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	08001291 	.word	0x08001291
 8001284:	0800132f 	.word	0x0800132f
 8001288:	08001273 	.word	0x08001273
 800128c:	0800133f 	.word	0x0800133f
	  	  case Display:
	  		  for(int8_t i = (GRAPH_SIZE-1) ; i > 0 ; i--){
 8001290:	2313      	movs	r3, #19
 8001292:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8001296:	e018      	b.n	80012ca <main+0x11e>
	  			  OLED_data[1][i] = OLED_data[1][i-1];
 8001298:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 800129c:	3b01      	subs	r3, #1
 800129e:	f997 10b6 	ldrsb.w	r1, [r7, #182]	; 0xb6
 80012a2:	3314      	adds	r3, #20
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	33b8      	adds	r3, #184	; 0xb8
 80012a8:	443b      	add	r3, r7
 80012aa:	f853 2cac 	ldr.w	r2, [r3, #-172]
 80012ae:	f101 0314 	add.w	r3, r1, #20
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	33b8      	adds	r3, #184	; 0xb8
 80012b6:	443b      	add	r3, r7
 80012b8:	f843 2cac 	str.w	r2, [r3, #-172]
	  		  for(int8_t i = (GRAPH_SIZE-1) ; i > 0 ; i--){
 80012bc:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80012ca:	f997 30b6 	ldrsb.w	r3, [r7, #182]	; 0xb6
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	dce2      	bgt.n	8001298 <main+0xec>
	  		  	  }
	  		  	  temperature = MS5637_GET_TEMPERATURE(&hi2c1);
 80012d2:	482f      	ldr	r0, [pc, #188]	; (8001390 <main+0x1e4>)
 80012d4:	f7ff f8ce 	bl	8000474 <MS5637_GET_TEMPERATURE>
 80012d8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	  		  	  pressure = MS5637_GET_PRESSURE(&hi2c1);
 80012dc:	482c      	ldr	r0, [pc, #176]	; (8001390 <main+0x1e4>)
 80012de:	f7fe ffcd 	bl	800027c <MS5637_GET_PRESSURE>
 80012e2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	  		  	  //OLED_data[1][0] = ((pressure-GRAPH_VALUE_OFFSET)*(Y_AXIS_LINE_Y2-Y_AXIS_LINE_Y1))/(MAX_PRESSURE-MIN_PRESSURE);
	  		  	  //OLED_data[1][0] = (pressure*(Y_AXIS_LINE_Y2-Y_AXIS_LINE_Y1))/(MAX_PRESSURE-MIN_PRESSURE);
	  		  	  OLED_data[1][0] = pressure-mean_pressure;
 80012e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <main+0x1ec>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  	  update_graph(20, OLED_data, OLED_data[1][0]);///10);
 80012f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	2014      	movs	r0, #20
 80012fc:	f7ff fcf2 	bl	8000ce4 <update_graph>

	  		  	  if(USB_EN){
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <main+0x1f8>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d041      	beq.n	800138c <main+0x1e0>

	  		  		  char USB_data[9];
	  		  		  itoa(pressure, USB_data, 10);
 8001308:	463b      	mov	r3, r7
 800130a:	220a      	movs	r2, #10
 800130c:	4619      	mov	r1, r3
 800130e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001312:	f00a f847 	bl	800b3a4 <itoa>

	  		  		  USB_data[6] = (char)'\r';
 8001316:	230d      	movs	r3, #13
 8001318:	71bb      	strb	r3, [r7, #6]
	  		  		  USB_data[7] = (char)'\n';
 800131a:	230a      	movs	r3, #10
 800131c:	71fb      	strb	r3, [r7, #7]
	  		  		  USB_data[8] = (char)'\0';
 800131e:	2300      	movs	r3, #0
 8001320:	723b      	strb	r3, [r7, #8]

	  		  		  CDC_Transmit_FS((uint8_t*)USB_data, sizeof(USB_data));
 8001322:	463b      	mov	r3, r7
 8001324:	2109      	movs	r1, #9
 8001326:	4618      	mov	r0, r3
 8001328:	f009 fc22 	bl	800ab70 <CDC_Transmit_FS>

	  		  	  }

	  		  	break;
 800132c:	e02e      	b.n	800138c <main+0x1e0>

	  	  case Send_USB:	//NOTE: Make this shit into a function

	  		  	  MS5637_STREAM_USB(&hi2c1, &hi2c2, D1_RES_INDEX);
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <main+0x1fc>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	491d      	ldr	r1, [pc, #116]	; (80013ac <main+0x200>)
 8001336:	4816      	ldr	r0, [pc, #88]	; (8001390 <main+0x1e4>)
 8001338:	f7ff f9b6 	bl	80006a8 <MS5637_STREAM_USB>

	  		  	break;
 800133c:	e027      	b.n	800138e <main+0x1e2>

	  	  case Menu:

	  		  	break;
	  	  case Return_from_menu:	//Updates the mean_pressure of the sensor every time the you exit menu
	  		mean_pressure = 0;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <main+0x1ec>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
	  	    for(uint8_t i = 0; i < GRAPH_SIZE; i++){
 8001344:	2300      	movs	r3, #0
 8001346:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800134a:	e00e      	b.n	800136a <main+0x1be>
	  	    	mean_pressure += MS5637_GET_PRESSURE(&hi2c1);
 800134c:	4810      	ldr	r0, [pc, #64]	; (8001390 <main+0x1e4>)
 800134e:	f7fe ff95 	bl	800027c <MS5637_GET_PRESSURE>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <main+0x1ec>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <main+0x1ec>)
 800135e:	6013      	str	r3, [r2, #0]
	  	    for(uint8_t i = 0; i < GRAPH_SIZE; i++){
 8001360:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001364:	3301      	adds	r3, #1
 8001366:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800136a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800136e:	2b13      	cmp	r3, #19
 8001370:	d9ec      	bls.n	800134c <main+0x1a0>
	  	    }
	  	    mean_pressure = mean_pressure/GRAPH_SIZE;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <main+0x1ec>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a09      	ldr	r2, [pc, #36]	; (800139c <main+0x1f0>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	4a06      	ldr	r2, [pc, #24]	; (8001398 <main+0x1ec>)
 8001380:	6013      	str	r3, [r2, #0]
	  	    current_state = previous_state;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <main+0x204>)
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <main+0x1f4>)
 8001388:	701a      	strb	r2, [r3, #0]
	  	    	break;
 800138a:	e000      	b.n	800138e <main+0x1e2>
	  		  	break;
 800138c:	bf00      	nop
	  switch(current_state){
 800138e:	e770      	b.n	8001272 <main+0xc6>
 8001390:	20000610 	.word	0x20000610
 8001394:	20000018 	.word	0x20000018
 8001398:	20000794 	.word	0x20000794
 800139c:	cccccccd 	.word	0xcccccccd
 80013a0:	20000790 	.word	0x20000790
 80013a4:	2000001e 	.word	0x2000001e
 80013a8:	20000792 	.word	0x20000792
 80013ac:	20000664 	.word	0x20000664
 80013b0:	20000791 	.word	0x20000791

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	; 0x50
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013be:	2228      	movs	r2, #40	; 0x28
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f009 fffe 	bl	800b3c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f2:	2301      	movs	r3, #1
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f6:	2302      	movs	r3, #2
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001404:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fa16 	bl	800583c <HAL_RCC_OscConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001416:	f000 fad5 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141a:	230f      	movs	r3, #15
 800141c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2101      	movs	r1, #1
 8001436:	4618      	mov	r0, r3
 8001438:	f004 fc82 	bl	8005d40 <HAL_RCC_ClockConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001442:	f000 fabf 	bl	80019c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001446:	2310      	movs	r3, #16
 8001448:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800144a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f004 fe02 	bl	800605c <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800145e:	f000 fab1 	bl	80019c4 <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	3750      	adds	r7, #80	; 0x50
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_I2C1_Init+0x50>)
 8001472:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <MX_I2C1_Init+0x54>)
 8001474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_I2C1_Init+0x50>)
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_I2C1_Init+0x58>)
 800147a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_I2C1_Init+0x50>)
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_I2C1_Init+0x50>)
 80014aa:	f001 fa7f 	bl	80029ac <HAL_I2C_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b4:	f000 fa86 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000610 	.word	0x20000610
 80014c0:	40005400 	.word	0x40005400
 80014c4:	000186a0 	.word	0x000186a0

080014c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C2_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <MX_I2C2_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C2_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_I2C2_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C2_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_I2C2_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_I2C2_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_I2C2_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_I2C2_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MX_I2C2_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_I2C2_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_I2C2_Init+0x50>)
 8001506:	f001 fa51 	bl	80029ac <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 fa58 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000664 	.word	0x20000664
 800151c:	40005800 	.word	0x40005800
 8001520:	000186a0 	.word	0x000186a0

08001524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_TIM2_Init+0x98>)
 8001542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_TIM2_Init+0x98>)
 800154a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800154e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM2_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_TIM2_Init+0x98>)
 8001558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_TIM2_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_TIM2_Init+0x98>)
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <MX_TIM2_Init+0x98>)
 800156c:	f004 fe2c 	bl	80061c8 <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001576:	f000 fa25 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4619      	mov	r1, r3
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_TIM2_Init+0x98>)
 8001588:	f004 fff6 	bl	8006578 <HAL_TIM_ConfigClockSource>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001592:	f000 fa17 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_TIM2_Init+0x98>)
 80015a4:	f005 f9cc 	bl	8006940 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015ae:	f000 fa09 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200006b8 	.word	0x200006b8

080015c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_TIM3_Init+0x94>)
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <MX_TIM3_Init+0x98>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47994;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_TIM3_Init+0x94>)
 80015e4:	f64b 327a 	movw	r2, #47994	; 0xbb7a
 80015e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_TIM3_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_TIM3_Init+0x94>)
 80015f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80015f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_TIM3_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_TIM3_Init+0x94>)
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001604:	4813      	ldr	r0, [pc, #76]	; (8001654 <MX_TIM3_Init+0x94>)
 8001606:	f004 fddf 	bl	80061c8 <HAL_TIM_Base_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001610:	f000 f9d8 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_TIM3_Init+0x94>)
 8001622:	f004 ffa9 	bl	8006578 <HAL_TIM_ConfigClockSource>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800162c:	f000 f9ca 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_TIM3_Init+0x94>)
 800163e:	f005 f97f 	bl	8006940 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001648:	f000 f9bc 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000700 	.word	0x20000700
 8001658:	40000400 	.word	0x40000400

0800165c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <MX_USART2_UART_Init+0x50>)
 8001664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_USART2_UART_Init+0x4c>)
 8001694:	f005 f9c4 	bl	8006a20 <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800169e:	f000 f991 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000748 	.word	0x20000748
 80016ac:	40004400 	.word	0x40004400

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c4:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016dc:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a41      	ldr	r2, [pc, #260]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016e2:	f043 0320 	orr.w	r3, r3, #32
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a3b      	ldr	r2, [pc, #236]	; (80017e8 <MX_GPIO_Init+0x138>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <MX_GPIO_Init+0x138>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <MX_GPIO_Init+0x138>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a35      	ldr	r2, [pc, #212]	; (80017e8 <MX_GPIO_Init+0x138>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <MX_GPIO_Init+0x138>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172a:	4830      	ldr	r0, [pc, #192]	; (80017ec <MX_GPIO_Init+0x13c>)
 800172c:	f001 f90d 	bl	800294a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2101      	movs	r1, #1
 8001734:	482e      	ldr	r0, [pc, #184]	; (80017f0 <MX_GPIO_Init+0x140>)
 8001736:	f001 f908 	bl	800294a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800173a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2302      	movs	r3, #2
 800174a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4619      	mov	r1, r3
 8001752:	4826      	ldr	r0, [pc, #152]	; (80017ec <MX_GPIO_Init+0x13c>)
 8001754:	f000 ff5e 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001758:	2301      	movs	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2302      	movs	r3, #2
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	4820      	ldr	r0, [pc, #128]	; (80017f0 <MX_GPIO_Init+0x140>)
 8001770:	f000 ff50 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001774:	2320      	movs	r3, #32
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_GPIO_Init+0x144>)
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	481a      	ldr	r0, [pc, #104]	; (80017f0 <MX_GPIO_Init+0x140>)
 8001788:	f000 ff44 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800178c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_GPIO_Init+0x148>)
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	4619      	mov	r1, r3
 80017a0:	4816      	ldr	r0, [pc, #88]	; (80017fc <MX_GPIO_Init+0x14c>)
 80017a2:	f000 ff37 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4619      	mov	r1, r3
 80017ba:	4810      	ldr	r0, [pc, #64]	; (80017fc <MX_GPIO_Init+0x14c>)
 80017bc:	f000 ff2a 	bl	8002614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2017      	movs	r0, #23
 80017c6:	f000 feee 	bl	80025a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017ca:	2017      	movs	r0, #23
 80017cc:	f000 ff07 	bl	80025de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2028      	movs	r0, #40	; 0x28
 80017d6:	f000 fee6 	bl	80025a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017da:	2028      	movs	r0, #40	; 0x28
 80017dc:	f000 feff 	bl	80025de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40011000 	.word	0x40011000
 80017f0:	40010800 	.word	0x40010800
 80017f4:	10210000 	.word	0x10210000
 80017f8:	10110000 	.word	0x10110000
 80017fc:	40010c00 	.word	0x40010c00

08001800 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_5 && current_state != Menu){ // If The INT Source Is EXTI Line5 (A5 Pin)
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	2b20      	cmp	r3, #32
 800180e:	d10d      	bne.n	800182c <HAL_GPIO_EXTI_Callback+0x2c>
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d009      	beq.n	800182c <HAL_GPIO_EXTI_Callback+0x2c>
    	previous_state = current_state;
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_GPIO_EXTI_Callback+0xbc>)
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800181e:	701a      	strb	r2, [r3, #0]
    	setup_menu();
 8001820:	f7ff fba4 	bl	8000f6c <setup_menu>
    	current_state = Menu;
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001826:	2202      	movs	r2, #2
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e019      	b.n	8001860 <HAL_GPIO_EXTI_Callback+0x60>
    } else if(GPIO_Pin == GPIO_PIN_5 && previous_state == Display){
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	2b20      	cmp	r3, #32
 8001830:	d10a      	bne.n	8001848 <HAL_GPIO_EXTI_Callback+0x48>
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <HAL_GPIO_EXTI_Callback+0x48>

    	setup_std_graph(graph_title);
 800183a:	4822      	ldr	r0, [pc, #136]	; (80018c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800183c:	f7ff fa0a 	bl	8000c54 <setup_std_graph>
    	current_state = Return_from_menu;
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001842:	2203      	movs	r2, #3
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e00b      	b.n	8001860 <HAL_GPIO_EXTI_Callback+0x60>
    } else if(GPIO_Pin == GPIO_PIN_5 && previous_state == Send_USB){
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	2b20      	cmp	r3, #32
 800184c:	d108      	bne.n	8001860 <HAL_GPIO_EXTI_Callback+0x60>
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d104      	bne.n	8001860 <HAL_GPIO_EXTI_Callback+0x60>

    	display_USB_stream();				//Display USB streaming
 8001856:	f7ff fc73 	bl	8001140 <display_USB_stream>
    	current_state = Return_from_menu;	//Reset mean_pressure before switching to Send_USB state
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_GPIO_EXTI_Callback+0xbc>)
 800185c:	2203      	movs	r2, #3
 800185e:	701a      	strb	r2, [r3, #0]
    }

    if(GPIO_Pin == GPIO_PIN_13 && current_state == Menu){
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001866:	d106      	bne.n	8001876 <HAL_GPIO_EXTI_Callback+0x76>
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_GPIO_EXTI_Callback+0xbc>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d102      	bne.n	8001876 <HAL_GPIO_EXTI_Callback+0x76>
    	HAL_TIM_Base_Start_IT(&htim2);
 8001870:	4815      	ldr	r0, [pc, #84]	; (80018c8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001872:	f004 fcf9 	bl	8006268 <HAL_TIM_Base_Start_IT>
    }

    if(GPIO_Pin == GPIO_PIN_15  && current_state == Menu){
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800187c:	d11a      	bne.n	80018b4 <HAL_GPIO_EXTI_Callback+0xb4>
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d116      	bne.n	80018b4 <HAL_GPIO_EXTI_Callback+0xb4>
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 8001886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800188a:	4810      	ldr	r0, [pc, #64]	; (80018cc <HAL_GPIO_EXTI_Callback+0xcc>)
 800188c:	f001 f846 	bl	800291c <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <HAL_GPIO_EXTI_Callback+0xa4>
    		menu_cursor_placement--;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	e005      	b.n	80018b0 <HAL_GPIO_EXTI_Callback+0xb0>
    	}else{
    		menu_cursor_placement++;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 80018ae:	701a      	strb	r2, [r3, #0]
    	}
    	menu_scroll();
 80018b0:	f7ff fc10 	bl	80010d4 <menu_scroll>
    }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000790 	.word	0x20000790
 80018c0:	20000791 	.word	0x20000791
 80018c4:	20000018 	.word	0x20000018
 80018c8:	200006b8 	.word	0x200006b8
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	2000001d 	.word	0x2000001d

080018d4 <HAL_TIM_PeriodElapsedCallback>:

//TIM2 Period elapsed
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d150      	bne.n	8001986 <HAL_TIM_PeriodElapsedCallback+0xb2>
		if(menu_cursor_placement == 1 && D1_RES_INDEX < 5){
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d112      	bne.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x3e>
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d80e      	bhi.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x3e>
				D1_RES_INDEX++;		//Increment D indexes for MS5637
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018fe:	701a      	strb	r2, [r3, #0]
			    D2_RES_INDEX++;
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800190a:	701a      	strb	r2, [r3, #0]
			    menu_scroll();
 800190c:	f7ff fbe2 	bl	80010d4 <menu_scroll>
 8001910:	e035      	b.n	800197e <HAL_TIM_PeriodElapsedCallback+0xaa>

		}else if(menu_cursor_placement == 1 && D1_RES_INDEX >= 5){
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d10c      	bne.n	8001934 <HAL_TIM_PeriodElapsedCallback+0x60>
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d908      	bls.n	8001934 <HAL_TIM_PeriodElapsedCallback+0x60>
			D1_RES_INDEX = 0;	//Reset D indexes for MS5637 if overflow
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
		    D2_RES_INDEX = 0;
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
		    menu_scroll();
 800192e:	f7ff fbd1 	bl	80010d4 <menu_scroll>
 8001932:	e024      	b.n	800197e <HAL_TIM_PeriodElapsedCallback+0xaa>

		}else if(menu_cursor_placement == 2){
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d109      	bne.n	8001950 <HAL_TIM_PeriodElapsedCallback+0x7c>
			USB_EN ^= 1;	//Toggle USB_EN;
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f083 0301 	eor.w	r3, r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001948:	701a      	strb	r2, [r3, #0]
			menu_scroll();
 800194a:	f7ff fbc3 	bl	80010d4 <menu_scroll>
 800194e:	e016      	b.n	800197e <HAL_TIM_PeriodElapsedCallback+0xaa>

		}else if(menu_cursor_placement == 3){
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d108      	bne.n	800196a <HAL_TIM_PeriodElapsedCallback+0x96>
			display_USB_stream();
 8001958:	f7ff fbf2 	bl	8001140 <display_USB_stream>
			HAL_TIM_Base_Start_IT(&htim3);		//Start timer
 800195c:	4816      	ldr	r0, [pc, #88]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800195e:	f004 fc83 	bl	8006268 <HAL_TIM_Base_Start_IT>
			current_state = Send_USB;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	e009      	b.n	800197e <HAL_TIM_PeriodElapsedCallback+0xaa>

		}else if(menu_cursor_placement == 4){
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b04      	cmp	r3, #4
 8001970:	d105      	bne.n	800197e <HAL_TIM_PeriodElapsedCallback+0xaa>
			setup_std_graph(graph_title);
 8001972:	4813      	ldr	r0, [pc, #76]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001974:	f7ff f96e 	bl	8000c54 <setup_std_graph>
			current_state = Display;
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
		}

		HAL_TIM_Base_Stop_IT(&htim2);
 800197e:	4809      	ldr	r0, [pc, #36]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001980:	f004 fcc4 	bl	800630c <HAL_TIM_Base_Stop_IT>
		//TIM3 is setup in .ioc, such that the interrupt is triggered after 5 seconds.
		//Meaning if nothing resets the counter for five sec, it will turn off.
		HAL_TIM_Base_Stop_IT(&htim3);
	}

}
 8001984:	e00a      	b.n	800199c <HAL_TIM_PeriodElapsedCallback+0xc8>
	} else if(htim == &htim3 && current_state != Send_USB){	//If timer3 interrupt happens, turn off timer.
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d106      	bne.n	800199c <HAL_TIM_PeriodElapsedCallback+0xc8>
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d002      	beq.n	800199c <HAL_TIM_PeriodElapsedCallback+0xc8>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001998:	f004 fcb8 	bl	800630c <HAL_TIM_Base_Stop_IT>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200006b8 	.word	0x200006b8
 80019a8:	2000001d 	.word	0x2000001d
 80019ac:	20000792 	.word	0x20000792
 80019b0:	20000793 	.word	0x20000793
 80019b4:	2000001e 	.word	0x2000001e
 80019b8:	20000700 	.word	0x20000700
 80019bc:	20000790 	.word	0x20000790
 80019c0:	20000018 	.word	0x20000018

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019cc:	e7fe      	b.n	80019cc <Error_Handler+0x8>

080019ce <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	2301      	movs	r3, #1
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	2200      	movs	r2, #0
 80019f8:	2178      	movs	r1, #120	; 0x78
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <ssd1306_WriteCommand+0x2c>)
 80019fc:	f001 fa18 	bl	8002e30 <HAL_I2C_Mem_Write>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000664 	.word	0x20000664

08001a0c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	9202      	str	r2, [sp, #8]
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2240      	movs	r2, #64	; 0x40
 8001a2a:	2178      	movs	r1, #120	; 0x78
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <ssd1306_WriteData+0x30>)
 8001a2e:	f001 f9ff 	bl	8002e30 <HAL_I2C_Mem_Write>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000664 	.word	0x20000664

08001a40 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a44:	f7ff ffc3 	bl	80019ce <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a48:	2064      	movs	r0, #100	; 0x64
 8001a4a:	f000 fcb1 	bl	80023b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 fa90 	bl	8001f74 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a54:	2020      	movs	r0, #32
 8001a56:	f7ff ffc1 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff ffbe 	bl	80019dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a60:	20b0      	movs	r0, #176	; 0xb0
 8001a62:	f7ff ffbb 	bl	80019dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a66:	20c8      	movs	r0, #200	; 0xc8
 8001a68:	f7ff ffb8 	bl	80019dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff ffb5 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a72:	2010      	movs	r0, #16
 8001a74:	f7ff ffb2 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a78:	2040      	movs	r0, #64	; 0x40
 8001a7a:	f7ff ffaf 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a7e:	20ff      	movs	r0, #255	; 0xff
 8001a80:	f000 fa64 	bl	8001f4c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a84:	20a1      	movs	r0, #161	; 0xa1
 8001a86:	f7ff ffa9 	bl	80019dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a8a:	20a6      	movs	r0, #166	; 0xa6
 8001a8c:	f7ff ffa6 	bl	80019dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a90:	20a8      	movs	r0, #168	; 0xa8
 8001a92:	f7ff ffa3 	bl	80019dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001a96:	203f      	movs	r0, #63	; 0x3f
 8001a98:	f7ff ffa0 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a9c:	20a4      	movs	r0, #164	; 0xa4
 8001a9e:	f7ff ff9d 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001aa2:	20d3      	movs	r0, #211	; 0xd3
 8001aa4:	f7ff ff9a 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff ff97 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001aae:	20d5      	movs	r0, #213	; 0xd5
 8001ab0:	f7ff ff94 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ab4:	20f0      	movs	r0, #240	; 0xf0
 8001ab6:	f7ff ff91 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001aba:	20d9      	movs	r0, #217	; 0xd9
 8001abc:	f7ff ff8e 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ac0:	2022      	movs	r0, #34	; 0x22
 8001ac2:	f7ff ff8b 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ac6:	20da      	movs	r0, #218	; 0xda
 8001ac8:	f7ff ff88 	bl	80019dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001acc:	2012      	movs	r0, #18
 8001ace:	f7ff ff85 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ad2:	20db      	movs	r0, #219	; 0xdb
 8001ad4:	f7ff ff82 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ad8:	2020      	movs	r0, #32
 8001ada:	f7ff ff7f 	bl	80019dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ade:	208d      	movs	r0, #141	; 0x8d
 8001ae0:	f7ff ff7c 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ae4:	2014      	movs	r0, #20
 8001ae6:	f7ff ff79 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001aea:	2001      	movs	r0, #1
 8001aec:	f000 fa42 	bl	8001f74 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 f80f 	bl	8001b14 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001af6:	f000 f82f 	bl	8001b58 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <ssd1306_Init+0xd0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <ssd1306_Init+0xd0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001b06:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <ssd1306_Init+0xd0>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	711a      	strb	r2, [r3, #4]
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000b98 	.word	0x20000b98

08001b14 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e00d      	b.n	8001b40 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <ssd1306_Fill+0x1a>
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	e000      	b.n	8001b30 <ssd1306_Fill+0x1c>
 8001b2e:	21ff      	movs	r1, #255	; 0xff
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <ssd1306_Fill+0x40>)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	460a      	mov	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d3ed      	bcc.n	8001b24 <ssd1306_Fill+0x10>
    }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000798 	.word	0x20000798

08001b58 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	e016      	b.n	8001b92 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	3b50      	subs	r3, #80	; 0x50
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff36 	bl	80019dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff ff33 	bl	80019dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b76:	2010      	movs	r0, #16
 8001b78:	f7ff ff30 	bl	80019dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	01db      	lsls	r3, r3, #7
 8001b80:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <ssd1306_UpdateScreen+0x4c>)
 8001b82:	4413      	add	r3, r2
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff40 	bl	8001a0c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b07      	cmp	r3, #7
 8001b96:	d9e5      	bls.n	8001b64 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000798 	.word	0x20000798

08001ba8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	71bb      	strb	r3, [r7, #6]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db3d      	blt.n	8001c3e <ssd1306_DrawPixel+0x96>
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	2b3f      	cmp	r3, #63	; 0x3f
 8001bc6:	d83a      	bhi.n	8001c3e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001bc8:	797b      	ldrb	r3, [r7, #5]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d11a      	bne.n	8001c04 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	79bb      	ldrb	r3, [r7, #6]
 8001bd2:	08db      	lsrs	r3, r3, #3
 8001bd4:	b2d8      	uxtb	r0, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	01db      	lsls	r3, r3, #7
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	; (8001c48 <ssd1306_DrawPixel+0xa0>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	b25a      	sxtb	r2, r3
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b259      	sxtb	r1, r3
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	01db      	lsls	r3, r3, #7
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2c9      	uxtb	r1, r1
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <ssd1306_DrawPixel+0xa0>)
 8001c00:	54d1      	strb	r1, [r2, r3]
 8001c02:	e01d      	b.n	8001c40 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c04:	79fa      	ldrb	r2, [r7, #7]
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	b2d8      	uxtb	r0, r3
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	4413      	add	r3, r2
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <ssd1306_DrawPixel+0xa0>)
 8001c14:	5cd3      	ldrb	r3, [r2, r3]
 8001c16:	b25a      	sxtb	r2, r3
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	b259      	sxtb	r1, r3
 8001c2e:	79fa      	ldrb	r2, [r7, #7]
 8001c30:	4603      	mov	r3, r0
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	4413      	add	r3, r2
 8001c36:	b2c9      	uxtb	r1, r1
 8001c38:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <ssd1306_DrawPixel+0xa0>)
 8001c3a:	54d1      	strb	r1, [r2, r3]
 8001c3c:	e000      	b.n	8001c40 <ssd1306_DrawPixel+0x98>
        return;
 8001c3e:	bf00      	nop
    }
}
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	20000798 	.word	0x20000798

08001c4c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4604      	mov	r4, r0
 8001c54:	1d38      	adds	r0, r7, #4
 8001c56:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	4613      	mov	r3, r2
 8001c62:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	2b1f      	cmp	r3, #31
 8001c68:	d902      	bls.n	8001c70 <ssd1306_WriteChar+0x24>
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b7e      	cmp	r3, #126	; 0x7e
 8001c6e:	d901      	bls.n	8001c74 <ssd1306_WriteChar+0x28>
        return 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e06d      	b.n	8001d50 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	793b      	ldrb	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2b80      	cmp	r3, #128	; 0x80
 8001c80:	dc06      	bgt.n	8001c90 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001c84:	885b      	ldrh	r3, [r3, #2]
 8001c86:	461a      	mov	r2, r3
 8001c88:	797b      	ldrb	r3, [r7, #5]
 8001c8a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	dd01      	ble.n	8001c94 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e05d      	b.n	8001d50 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	e04c      	b.n	8001d34 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	3b20      	subs	r3, #32
 8001ca0:	7979      	ldrb	r1, [r7, #5]
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	440b      	add	r3, r1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	e034      	b.n	8001d24 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b2d8      	uxtb	r0, r3
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001cda:	885b      	ldrh	r3, [r3, #2]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	7bba      	ldrb	r2, [r7, #14]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7ff ff5d 	bl	8001ba8 <ssd1306_DrawPixel>
 8001cee:	e016      	b.n	8001d1e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b2d8      	uxtb	r0, r3
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001d00:	885b      	ldrh	r3, [r3, #2]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	b2d9      	uxtb	r1, r3
 8001d0c:	7bbb      	ldrb	r3, [r7, #14]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff ff45 	bl	8001ba8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	793b      	ldrb	r3, [r7, #4]
 8001d26:	461a      	mov	r2, r3
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d3c5      	bcc.n	8001cba <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	797b      	ldrb	r3, [r7, #5]
 8001d36:	461a      	mov	r2, r3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d3ad      	bcc.n	8001c9a <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001d40:	881a      	ldrh	r2, [r3, #0]
 8001d42:	793b      	ldrb	r3, [r7, #4]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <ssd1306_WriteChar+0x10c>)
 8001d4c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3724      	adds	r7, #36	; 0x24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	20000b98 	.word	0x20000b98

08001d5c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	1d38      	adds	r0, r7, #4
 8001d66:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d6a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001d6c:	e012      	b.n	8001d94 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	7818      	ldrb	r0, [r3, #0]
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	1d3a      	adds	r2, r7, #4
 8001d76:	ca06      	ldmia	r2, {r1, r2}
 8001d78:	f7ff ff68 	bl	8001c4c <ssd1306_WriteChar>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d002      	beq.n	8001d8e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	e008      	b.n	8001da0 <ssd1306_WriteString+0x44>
        }
        str++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e8      	bne.n	8001d6e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <ssd1306_SetCursor+0x2c>)
 8001dbe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <ssd1306_SetCursor+0x2c>)
 8001dc6:	805a      	strh	r2, [r3, #2]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000b98 	.word	0x20000b98

08001dd8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4604      	mov	r4, r0
 8001de0:	4608      	mov	r0, r1
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4623      	mov	r3, r4
 8001de8:	71fb      	strb	r3, [r7, #7]
 8001dea:	4603      	mov	r3, r0
 8001dec:	71bb      	strb	r3, [r7, #6]
 8001dee:	460b      	mov	r3, r1
 8001df0:	717b      	strb	r3, [r7, #5]
 8001df2:	4613      	mov	r3, r2
 8001df4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001df6:	797a      	ldrb	r2, [r7, #5]
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bfb8      	it	lt
 8001e00:	425b      	neglt	r3, r3
 8001e02:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001e04:	793a      	ldrb	r2, [r7, #4]
 8001e06:	79bb      	ldrb	r3, [r7, #6]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bfb8      	it	lt
 8001e0e:	425b      	neglt	r3, r3
 8001e10:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	797b      	ldrb	r3, [r7, #5]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d201      	bcs.n	8001e1e <ssd1306_Line+0x46>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e001      	b.n	8001e22 <ssd1306_Line+0x4a>
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001e24:	79ba      	ldrb	r2, [r7, #6]
 8001e26:	793b      	ldrb	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d201      	bcs.n	8001e30 <ssd1306_Line+0x58>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e001      	b.n	8001e34 <ssd1306_Line+0x5c>
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8001e3e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e42:	7939      	ldrb	r1, [r7, #4]
 8001e44:	797b      	ldrb	r3, [r7, #5]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff feae 	bl	8001ba8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001e4c:	e024      	b.n	8001e98 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001e4e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e52:	79b9      	ldrb	r1, [r7, #6]
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fea6 	bl	8001ba8 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	425b      	negs	r3, r3
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dd08      	ble.n	8001e7e <ssd1306_Line+0xa6>
            error -= deltaY;
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	da08      	bge.n	8001e98 <ssd1306_Line+0xc0>
            error += deltaX;
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	79bb      	ldrb	r3, [r7, #6]
 8001e94:	4413      	add	r3, r2
 8001e96:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001e98:	79fa      	ldrb	r2, [r7, #7]
 8001e9a:	797b      	ldrb	r3, [r7, #5]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1d6      	bne.n	8001e4e <ssd1306_Line+0x76>
 8001ea0:	79ba      	ldrb	r2, [r7, #6]
 8001ea2:	793b      	ldrb	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1d2      	bne.n	8001e4e <ssd1306_Line+0x76>
        }
    }
    return;
 8001ea8:	bf00      	nop
}
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}

08001eb0 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	4608      	mov	r0, r1
 8001eba:	4611      	mov	r1, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	71fb      	strb	r3, [r7, #7]
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71bb      	strb	r3, [r7, #6]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	717b      	strb	r3, [r7, #5]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	797b      	ldrb	r3, [r7, #5]
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	bf28      	it	cs
 8001ed6:	4613      	movcs	r3, r2
 8001ed8:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001eda:	797a      	ldrb	r2, [r7, #5]
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	bf38      	it	cc
 8001ee2:	4613      	movcc	r3, r2
 8001ee4:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001ee6:	79ba      	ldrb	r2, [r7, #6]
 8001ee8:	793b      	ldrb	r3, [r7, #4]
 8001eea:	4293      	cmp	r3, r2
 8001eec:	bf28      	it	cs
 8001eee:	4613      	movcs	r3, r2
 8001ef0:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001ef2:	793a      	ldrb	r2, [r7, #4]
 8001ef4:	79bb      	ldrb	r3, [r7, #6]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	bf38      	it	cc
 8001efa:	4613      	movcc	r3, r2
 8001efc:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e017      	b.n	8001f34 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001f04:	7b7b      	ldrb	r3, [r7, #13]
 8001f06:	73bb      	strb	r3, [r7, #14]
 8001f08:	e009      	b.n	8001f1e <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001f0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f0e:	7bf9      	ldrb	r1, [r7, #15]
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fe48 	bl	8001ba8 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	73bb      	strb	r3, [r7, #14]
 8001f1e:	7bba      	ldrb	r2, [r7, #14]
 8001f20:	7b3b      	ldrb	r3, [r7, #12]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d803      	bhi.n	8001f2e <ssd1306_FillRectangle+0x7e>
 8001f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	daed      	bge.n	8001f0a <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3301      	adds	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	7abb      	ldrb	r3, [r7, #10]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d803      	bhi.n	8001f44 <ssd1306_FillRectangle+0x94>
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	2b3f      	cmp	r3, #63	; 0x3f
 8001f40:	d9e0      	bls.n	8001f04 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
}
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd90      	pop	{r4, r7, pc}

08001f4c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001f56:	2381      	movs	r3, #129	; 0x81
 8001f58:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fd3d 	bl	80019dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fd39 	bl	80019dc <ssd1306_WriteCommand>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f84:	23af      	movs	r3, #175	; 0xaf
 8001f86:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <ssd1306_SetDisplayOn+0x38>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	715a      	strb	r2, [r3, #5]
 8001f8e:	e004      	b.n	8001f9a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f90:	23ae      	movs	r3, #174	; 0xae
 8001f92:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <ssd1306_SetDisplayOn+0x38>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fd1d 	bl	80019dc <ssd1306_WriteCommand>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000b98 	.word	0x20000b98

08001fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_MspInit+0x40>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <HAL_MspInit+0x40>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_MspInit+0x40>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_MspInit+0x40>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_MspInit+0x40>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_MspInit+0x40>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2b      	ldr	r2, [pc, #172]	; (80020bc <HAL_I2C_MspInit+0xc8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d124      	bne.n	800205e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a29      	ldr	r2, [pc, #164]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 800201a:	f043 0308 	orr.w	r3, r3, #8
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800202c:	23c0      	movs	r3, #192	; 0xc0
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	2312      	movs	r3, #18
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	4619      	mov	r1, r3
 800203e:	4821      	ldr	r0, [pc, #132]	; (80020c4 <HAL_I2C_MspInit+0xd0>)
 8002040:	f000 fae8 	bl	8002614 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 800204a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204e:	61d3      	str	r3, [r2, #28]
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800205c:	e029      	b.n	80020b2 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_I2C_MspInit+0xd4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d124      	bne.n	80020b2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002080:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002086:	2312      	movs	r3, #18
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f107 0318 	add.w	r3, r7, #24
 8002092:	4619      	mov	r1, r3
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <HAL_I2C_MspInit+0xd0>)
 8002096:	f000 fabd 	bl	8002614 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 80020a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_I2C_MspInit+0xcc>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40005400 	.word	0x40005400
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010c00 	.word	0x40010c00
 80020c8:	40005800 	.word	0x40005800

080020cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d114      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_TIM_Base_MspInit+0x78>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_TIM_Base_MspInit+0x78>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_TIM_Base_MspInit+0x78>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	201c      	movs	r0, #28
 80020fc:	f000 fa53 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002100:	201c      	movs	r0, #28
 8002102:	f000 fa6c 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002106:	e018      	b.n	800213a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_TIM_Base_MspInit+0x7c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d113      	bne.n	800213a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_TIM_Base_MspInit+0x78>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <HAL_TIM_Base_MspInit+0x78>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_TIM_Base_MspInit+0x78>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	201d      	movs	r0, #29
 8002130:	f000 fa39 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002134:	201d      	movs	r0, #29
 8002136:	f000 fa52 	bl	80025de <HAL_NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	40000400 	.word	0x40000400

0800214c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d12f      	bne.n	80021cc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_UART_MspInit+0x8c>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_UART_MspInit+0x8c>)
 8002172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002176:	61d3      	str	r3, [r2, #28]
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_UART_MspInit+0x8c>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_UART_MspInit+0x8c>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <HAL_UART_MspInit+0x8c>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_UART_MspInit+0x8c>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800219c:	2304      	movs	r3, #4
 800219e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4619      	mov	r1, r3
 80021ae:	480b      	ldr	r0, [pc, #44]	; (80021dc <HAL_UART_MspInit+0x90>)
 80021b0:	f000 fa30 	bl	8002614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021b4:	2308      	movs	r3, #8
 80021b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	4619      	mov	r1, r3
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <HAL_UART_MspInit+0x90>)
 80021c8:	f000 fa24 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40004400 	.word	0x40004400
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010800 	.word	0x40010800

080021e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <NMI_Handler+0x4>

080021e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <HardFault_Handler+0x4>

080021ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <MemManage_Handler+0x4>

080021f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <BusFault_Handler+0x4>

080021f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <UsageFault_Handler+0x4>

080021fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002226:	f000 f8a7 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002236:	f001 feb7 	bl	8003fa8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000186c 	.word	0x2000186c

08002244 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8002248:	2020      	movs	r0, #32
 800224a:	f000 fb97 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <TIM2_IRQHandler+0x10>)
 800225a:	f004 f885 	bl	8006368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200006b8 	.word	0x200006b8

08002268 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <TIM3_IRQHandler+0x10>)
 800226e:	f004 f87b 	bl	8006368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000700 	.word	0x20000700

0800227c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002280:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002284:	f000 fb7a 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002288:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800228c:	f000 fb76 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022a0:	f7ff fff8 	bl	8002294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a4:	480b      	ldr	r0, [pc, #44]	; (80022d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022a6:	490c      	ldr	r1, [pc, #48]	; (80022d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022a8:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ac:	e002      	b.n	80022b4 <LoopCopyDataInit>

080022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b2:	3304      	adds	r3, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b8:	d3f9      	bcc.n	80022ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022bc:	4c09      	ldr	r4, [pc, #36]	; (80022e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c0:	e001      	b.n	80022c6 <LoopFillZerobss>

080022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c4:	3204      	adds	r2, #4

080022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c8:	d3fb      	bcc.n	80022c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ca:	f009 f82f 	bl	800b32c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ce:	f7fe ff6d 	bl	80011ac <main>
  bx lr
 80022d2:	4770      	bx	lr
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 80022dc:	0800cb00 	.word	0x0800cb00
  ldr r2, =_sbss
 80022e0:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 80022e4:	20001d80 	.word	0x20001d80

080022e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC1_2_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_Init+0x28>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_Init+0x28>)
 80022f6:	f043 0310 	orr.w	r3, r3, #16
 80022fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f947 	bl	8002590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002302:	200f      	movs	r0, #15
 8002304:	f000 f808 	bl	8002318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002308:	f7ff fe52 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40022000 	.word	0x40022000

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x54>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x58>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f95f 	bl	80025fa <HAL_SYSTICK_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00e      	b.n	8002364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0f      	cmp	r3, #15
 800234a:	d80a      	bhi.n	8002362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234c:	2200      	movs	r2, #0
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f000 f927 	bl	80025a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <HAL_InitTick+0x5c>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000030 	.word	0x20000030
 8002370:	20000038 	.word	0x20000038
 8002374:	20000034 	.word	0x20000034

08002378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_IncTick+0x1c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_IncTick+0x20>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_IncTick+0x20>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000038 	.word	0x20000038
 8002398:	20000ba0 	.word	0x20000ba0

0800239c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <HAL_GetTick+0x10>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	20000ba0 	.word	0x20000ba0

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff fff0 	bl	800239c <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffe0 	bl	800239c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000038 	.word	0x20000038

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4906      	ldr	r1, [pc, #24]	; (8002490 <__NVIC_EnableIRQ+0x34>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255c:	d301      	bcc.n	8002562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255e:	2301      	movs	r3, #1
 8002560:	e00f      	b.n	8002582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <SysTick_Config+0x40>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256a:	210f      	movs	r1, #15
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f7ff ff90 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <SysTick_Config+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <SysTick_Config+0x40>)
 800257c:	2207      	movs	r2, #7
 800257e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	e000e010 	.word	0xe000e010

08002590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff2d 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b8:	f7ff ff42 	bl	8002440 <__NVIC_GetPriorityGrouping>
 80025bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff ff90 	bl	80024e8 <NVIC_EncodePriority>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5f 	bl	8002494 <__NVIC_SetPriority>
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff35 	bl	800245c <__NVIC_EnableIRQ>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffa2 	bl	800254c <SysTick_Config>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b08b      	sub	sp, #44	; 0x2c
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002626:	e169      	b.n	80028fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002628:	2201      	movs	r2, #1
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	429a      	cmp	r2, r3
 8002642:	f040 8158 	bne.w	80028f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a9a      	ldr	r2, [pc, #616]	; (80028b4 <HAL_GPIO_Init+0x2a0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d05e      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 8002650:	4a98      	ldr	r2, [pc, #608]	; (80028b4 <HAL_GPIO_Init+0x2a0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d875      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 8002656:	4a98      	ldr	r2, [pc, #608]	; (80028b8 <HAL_GPIO_Init+0x2a4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d058      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 800265c:	4a96      	ldr	r2, [pc, #600]	; (80028b8 <HAL_GPIO_Init+0x2a4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d86f      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 8002662:	4a96      	ldr	r2, [pc, #600]	; (80028bc <HAL_GPIO_Init+0x2a8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d052      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 8002668:	4a94      	ldr	r2, [pc, #592]	; (80028bc <HAL_GPIO_Init+0x2a8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d869      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 800266e:	4a94      	ldr	r2, [pc, #592]	; (80028c0 <HAL_GPIO_Init+0x2ac>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d04c      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 8002674:	4a92      	ldr	r2, [pc, #584]	; (80028c0 <HAL_GPIO_Init+0x2ac>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d863      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 800267a:	4a92      	ldr	r2, [pc, #584]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d046      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 8002680:	4a90      	ldr	r2, [pc, #576]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d85d      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 8002686:	2b12      	cmp	r3, #18
 8002688:	d82a      	bhi.n	80026e0 <HAL_GPIO_Init+0xcc>
 800268a:	2b12      	cmp	r3, #18
 800268c:	d859      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 800268e:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <HAL_GPIO_Init+0x80>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	0800270f 	.word	0x0800270f
 8002698:	080026e9 	.word	0x080026e9
 800269c:	080026fb 	.word	0x080026fb
 80026a0:	0800273d 	.word	0x0800273d
 80026a4:	08002743 	.word	0x08002743
 80026a8:	08002743 	.word	0x08002743
 80026ac:	08002743 	.word	0x08002743
 80026b0:	08002743 	.word	0x08002743
 80026b4:	08002743 	.word	0x08002743
 80026b8:	08002743 	.word	0x08002743
 80026bc:	08002743 	.word	0x08002743
 80026c0:	08002743 	.word	0x08002743
 80026c4:	08002743 	.word	0x08002743
 80026c8:	08002743 	.word	0x08002743
 80026cc:	08002743 	.word	0x08002743
 80026d0:	08002743 	.word	0x08002743
 80026d4:	08002743 	.word	0x08002743
 80026d8:	080026f1 	.word	0x080026f1
 80026dc:	08002705 	.word	0x08002705
 80026e0:	4a79      	ldr	r2, [pc, #484]	; (80028c8 <HAL_GPIO_Init+0x2b4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026e6:	e02c      	b.n	8002742 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	623b      	str	r3, [r7, #32]
          break;
 80026ee:	e029      	b.n	8002744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	3304      	adds	r3, #4
 80026f6:	623b      	str	r3, [r7, #32]
          break;
 80026f8:	e024      	b.n	8002744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	3308      	adds	r3, #8
 8002700:	623b      	str	r3, [r7, #32]
          break;
 8002702:	e01f      	b.n	8002744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	330c      	adds	r3, #12
 800270a:	623b      	str	r3, [r7, #32]
          break;
 800270c:	e01a      	b.n	8002744 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002716:	2304      	movs	r3, #4
 8002718:	623b      	str	r3, [r7, #32]
          break;
 800271a:	e013      	b.n	8002744 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002724:	2308      	movs	r3, #8
 8002726:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	611a      	str	r2, [r3, #16]
          break;
 800272e:	e009      	b.n	8002744 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002730:	2308      	movs	r3, #8
 8002732:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	615a      	str	r2, [r3, #20]
          break;
 800273a:	e003      	b.n	8002744 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
          break;
 8002740:	e000      	b.n	8002744 <HAL_GPIO_Init+0x130>
          break;
 8002742:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2bff      	cmp	r3, #255	; 0xff
 8002748:	d801      	bhi.n	800274e <HAL_GPIO_Init+0x13a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	e001      	b.n	8002752 <HAL_GPIO_Init+0x13e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2bff      	cmp	r3, #255	; 0xff
 8002758:	d802      	bhi.n	8002760 <HAL_GPIO_Init+0x14c>
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	e002      	b.n	8002766 <HAL_GPIO_Init+0x152>
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	3b08      	subs	r3, #8
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	210f      	movs	r1, #15
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	6a39      	ldr	r1, [r7, #32]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	431a      	orrs	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80b1 	beq.w	80028f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002794:	4b4d      	ldr	r3, [pc, #308]	; (80028cc <HAL_GPIO_Init+0x2b8>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4a4c      	ldr	r2, [pc, #304]	; (80028cc <HAL_GPIO_Init+0x2b8>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6193      	str	r3, [r2, #24]
 80027a0:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <HAL_GPIO_Init+0x2b8>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027ac:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <HAL_GPIO_Init+0x2bc>)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a40      	ldr	r2, [pc, #256]	; (80028d4 <HAL_GPIO_Init+0x2c0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_GPIO_Init+0x1ec>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a3f      	ldr	r2, [pc, #252]	; (80028d8 <HAL_GPIO_Init+0x2c4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00d      	beq.n	80027fc <HAL_GPIO_Init+0x1e8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a3e      	ldr	r2, [pc, #248]	; (80028dc <HAL_GPIO_Init+0x2c8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <HAL_GPIO_Init+0x1e4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a3d      	ldr	r2, [pc, #244]	; (80028e0 <HAL_GPIO_Init+0x2cc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_GPIO_Init+0x1e0>
 80027f0:	2303      	movs	r3, #3
 80027f2:	e006      	b.n	8002802 <HAL_GPIO_Init+0x1ee>
 80027f4:	2304      	movs	r3, #4
 80027f6:	e004      	b.n	8002802 <HAL_GPIO_Init+0x1ee>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e002      	b.n	8002802 <HAL_GPIO_Init+0x1ee>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_GPIO_Init+0x1ee>
 8002800:	2300      	movs	r3, #0
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	f002 0203 	and.w	r2, r2, #3
 8002808:	0092      	lsls	r2, r2, #2
 800280a:	4093      	lsls	r3, r2
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002812:	492f      	ldr	r1, [pc, #188]	; (80028d0 <HAL_GPIO_Init+0x2bc>)
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	3302      	adds	r3, #2
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800282c:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	492c      	ldr	r1, [pc, #176]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	43db      	mvns	r3, r3
 8002842:	4928      	ldr	r1, [pc, #160]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002844:	4013      	ands	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	4922      	ldr	r1, [pc, #136]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	43db      	mvns	r3, r3
 800286a:	491e      	ldr	r1, [pc, #120]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800286c:	4013      	ands	r3, r2
 800286e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	4918      	ldr	r1, [pc, #96]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	43db      	mvns	r3, r3
 8002892:	4914      	ldr	r1, [pc, #80]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002894:	4013      	ands	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d021      	beq.n	80028e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e021      	b.n	80028f6 <HAL_GPIO_Init+0x2e2>
 80028b2:	bf00      	nop
 80028b4:	10320000 	.word	0x10320000
 80028b8:	10310000 	.word	0x10310000
 80028bc:	10220000 	.word	0x10220000
 80028c0:	10210000 	.word	0x10210000
 80028c4:	10120000 	.word	0x10120000
 80028c8:	10110000 	.word	0x10110000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010000 	.word	0x40010000
 80028d4:	40010800 	.word	0x40010800
 80028d8:	40010c00 	.word	0x40010c00
 80028dc:	40011000 	.word	0x40011000
 80028e0:	40011400 	.word	0x40011400
 80028e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_GPIO_Init+0x304>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4909      	ldr	r1, [pc, #36]	; (8002918 <HAL_GPIO_Init+0x304>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	3301      	adds	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	fa22 f303 	lsr.w	r3, r2, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	f47f ae8e 	bne.w	8002628 <HAL_GPIO_Init+0x14>
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	372c      	adds	r7, #44	; 0x2c
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e001      	b.n	800293e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	807b      	strh	r3, [r7, #2]
 8002956:	4613      	mov	r3, r2
 8002958:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800295a:	787b      	ldrb	r3, [r7, #1]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002960:	887a      	ldrh	r2, [r7, #2]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002966:	e003      	b.n	8002970 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	041a      	lsls	r2, r3, #16
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	611a      	str	r2, [r3, #16]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
	...

0800297c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe ff30 	bl	8001800 <HAL_GPIO_EXTI_Callback>
  }
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e12b      	b.n	8002c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff fb0e 	bl	8001ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a10:	f003 fade 	bl	8005fd0 <HAL_RCC_GetPCLK1Freq>
 8002a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4a81      	ldr	r2, [pc, #516]	; (8002c20 <HAL_I2C_Init+0x274>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d807      	bhi.n	8002a30 <HAL_I2C_Init+0x84>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a80      	ldr	r2, [pc, #512]	; (8002c24 <HAL_I2C_Init+0x278>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e006      	b.n	8002a3e <HAL_I2C_Init+0x92>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a7d      	ldr	r2, [pc, #500]	; (8002c28 <HAL_I2C_Init+0x27c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	bf94      	ite	ls
 8002a38:	2301      	movls	r3, #1
 8002a3a:	2300      	movhi	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0e7      	b.n	8002c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a78      	ldr	r2, [pc, #480]	; (8002c2c <HAL_I2C_Init+0x280>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0c9b      	lsrs	r3, r3, #18
 8002a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a6a      	ldr	r2, [pc, #424]	; (8002c20 <HAL_I2C_Init+0x274>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d802      	bhi.n	8002a80 <HAL_I2C_Init+0xd4>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	e009      	b.n	8002a94 <HAL_I2C_Init+0xe8>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	4a69      	ldr	r2, [pc, #420]	; (8002c30 <HAL_I2C_Init+0x284>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	3301      	adds	r3, #1
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	495c      	ldr	r1, [pc, #368]	; (8002c20 <HAL_I2C_Init+0x274>)
 8002ab0:	428b      	cmp	r3, r1
 8002ab2:	d819      	bhi.n	8002ae8 <HAL_I2C_Init+0x13c>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1e59      	subs	r1, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac2:	1c59      	adds	r1, r3, #1
 8002ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ac8:	400b      	ands	r3, r1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_I2C_Init+0x138>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e59      	subs	r1, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae2:	e051      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	e04f      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d111      	bne.n	8002b14 <HAL_I2C_Init+0x168>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e012      	b.n	8002b3a <HAL_I2C_Init+0x18e>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	0099      	lsls	r1, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Init+0x196>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e022      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10e      	bne.n	8002b68 <HAL_I2C_Init+0x1bc>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1e58      	subs	r0, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	440b      	add	r3, r1
 8002b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b66:	e00f      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	0099      	lsls	r1, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	6809      	ldr	r1, [r1, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6911      	ldr	r1, [r2, #16]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68d2      	ldr	r2, [r2, #12]
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	000186a0 	.word	0x000186a0
 8002c24:	001e847f 	.word	0x001e847f
 8002c28:	003d08ff 	.word	0x003d08ff
 8002c2c:	431bde83 	.word	0x431bde83
 8002c30:	10624dd3 	.word	0x10624dd3

08002c34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	460b      	mov	r3, r1
 8002c42:	817b      	strh	r3, [r7, #10]
 8002c44:	4613      	mov	r3, r2
 8002c46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff fba8 	bl	800239c <HAL_GetTick>
 8002c4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f040 80e0 	bne.w	8002e1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2319      	movs	r3, #25
 8002c62:	2201      	movs	r2, #1
 8002c64:	4970      	ldr	r1, [pc, #448]	; (8002e28 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fe44 	bl	80038f4 <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	e0d3      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_I2C_Master_Transmit+0x50>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e0cc      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d007      	beq.n	8002caa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2221      	movs	r2, #33	; 0x21
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	893a      	ldrh	r2, [r7, #8]
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a50      	ldr	r2, [pc, #320]	; (8002e2c <HAL_I2C_Master_Transmit+0x1f8>)
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cec:	8979      	ldrh	r1, [r7, #10]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fbfe 	bl	80034f4 <I2C_MasterRequestWrite>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e08d      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d18:	e066      	b.n	8002de8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	6a39      	ldr	r1, [r7, #32]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 ff02 	bl	8003b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d107      	bne.n	8002d42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e06b      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d11b      	bne.n	8002dbc <HAL_I2C_Master_Transmit+0x188>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d017      	beq.n	8002dbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	6a39      	ldr	r1, [r7, #32]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fef9 	bl	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d107      	bne.n	8002de4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e01a      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d194      	bne.n	8002d1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	00100002 	.word	0x00100002
 8002e2c:	ffff0000 	.word	0xffff0000

08002e30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	460b      	mov	r3, r1
 8002e44:	813b      	strh	r3, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e4a:	f7ff faa7 	bl	800239c <HAL_GetTick>
 8002e4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	f040 80d9 	bne.w	8003010 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	2319      	movs	r3, #25
 8002e64:	2201      	movs	r2, #1
 8002e66:	496d      	ldr	r1, [pc, #436]	; (800301c <HAL_I2C_Mem_Write+0x1ec>)
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fd43 	bl	80038f4 <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
 8002e76:	e0cc      	b.n	8003012 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Mem_Write+0x56>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0c5      	b.n	8003012 <HAL_I2C_Mem_Write+0x1e2>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d007      	beq.n	8002eac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2221      	movs	r2, #33	; 0x21
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a3a      	ldr	r2, [r7, #32]
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a4d      	ldr	r2, [pc, #308]	; (8003020 <HAL_I2C_Mem_Write+0x1f0>)
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eee:	88f8      	ldrh	r0, [r7, #6]
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	8979      	ldrh	r1, [r7, #10]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4603      	mov	r3, r0
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fb7a 	bl	80035f8 <I2C_RequestMemoryWrite>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d052      	beq.n	8002fb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e081      	b.n	8003012 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fe08 	bl	8003b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d107      	bne.n	8002f36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06b      	b.n	8003012 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d11b      	bne.n	8002fb0 <HAL_I2C_Mem_Write+0x180>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d017      	beq.n	8002fb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1aa      	bne.n	8002f0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fdfb 	bl	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d107      	bne.n	8002fe0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e016      	b.n	8003012 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	00100002 	.word	0x00100002
 8003020:	ffff0000 	.word	0xffff0000

08003024 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	; 0x30
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	817b      	strh	r3, [r7, #10]
 8003036:	460b      	mov	r3, r1
 8003038:	813b      	strh	r3, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003042:	f7ff f9ab 	bl	800239c <HAL_GetTick>
 8003046:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	f040 8244 	bne.w	80034de <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2319      	movs	r3, #25
 800305c:	2201      	movs	r2, #1
 800305e:	4982      	ldr	r1, [pc, #520]	; (8003268 <HAL_I2C_Mem_Read+0x244>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fc47 	bl	80038f4 <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
 800306e:	e237      	b.n	80034e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_I2C_Mem_Read+0x5a>
 800307a:	2302      	movs	r3, #2
 800307c:	e230      	b.n	80034e0 <HAL_I2C_Mem_Read+0x4bc>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d007      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2222      	movs	r2, #34	; 0x22
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a62      	ldr	r2, [pc, #392]	; (800326c <HAL_I2C_Mem_Read+0x248>)
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e6:	88f8      	ldrh	r0, [r7, #6]
 80030e8:	893a      	ldrh	r2, [r7, #8]
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4603      	mov	r3, r0
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fb14 	bl	8003724 <I2C_RequestMemoryRead>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e1ec      	b.n	80034e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d113      	bne.n	8003136 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e1c0      	b.n	80034b8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	2b01      	cmp	r3, #1
 800313c:	d11e      	bne.n	800317c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800314e:	b672      	cpsid	i
}
 8003150:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003178:	b662      	cpsie	i
}
 800317a:	e035      	b.n	80031e8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	2b02      	cmp	r3, #2
 8003182:	d11e      	bne.n	80031c2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003192:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003194:	b672      	cpsid	i
}
 8003196:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031be:	b662      	cpsie	i
}
 80031c0:	e012      	b.n	80031e8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031d0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031e8:	e166      	b.n	80034b8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	f200 811f 	bhi.w	8003432 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d123      	bne.n	8003244 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fd21 	bl	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e167      	b.n	80034e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003242:	e139      	b.n	80034b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	2b02      	cmp	r3, #2
 800324a:	d152      	bne.n	80032f2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	2200      	movs	r2, #0
 8003254:	4906      	ldr	r1, [pc, #24]	; (8003270 <HAL_I2C_Mem_Read+0x24c>)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fb4c 	bl	80038f4 <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e13c      	b.n	80034e0 <HAL_I2C_Mem_Read+0x4bc>
 8003266:	bf00      	nop
 8003268:	00100002 	.word	0x00100002
 800326c:	ffff0000 	.word	0xffff0000
 8003270:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003274:	b672      	cpsid	i
}
 8003276:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032ba:	b662      	cpsie	i
}
 80032bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032f0:	e0e2      	b.n	80034b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	2200      	movs	r2, #0
 80032fa:	497b      	ldr	r1, [pc, #492]	; (80034e8 <HAL_I2C_Mem_Read+0x4c4>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 faf9 	bl	80038f4 <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0e9      	b.n	80034e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800331c:	b672      	cpsid	i
}
 800331e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003352:	4b66      	ldr	r3, [pc, #408]	; (80034ec <HAL_I2C_Mem_Read+0x4c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	08db      	lsrs	r3, r3, #3
 8003358:	4a65      	ldr	r2, [pc, #404]	; (80034f0 <HAL_I2C_Mem_Read+0x4cc>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0a1a      	lsrs	r2, r3, #8
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00da      	lsls	r2, r3, #3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	3b01      	subs	r3, #1
 8003370:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d118      	bne.n	80033aa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800339a:	b662      	cpsie	i
}
 800339c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e09a      	b.n	80034e0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d1d9      	bne.n	800336c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033fa:	b662      	cpsie	i
}
 80033fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003430:	e042      	b.n	80034b8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fc06 	bl	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e04c      	b.n	80034e0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d118      	bne.n	80034b8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f47f ae94 	bne.w	80031ea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3728      	adds	r7, #40	; 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	00010004 	.word	0x00010004
 80034ec:	20000030 	.word	0x20000030
 80034f0:	14f8b589 	.word	0x14f8b589

080034f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	460b      	mov	r3, r1
 8003502:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d006      	beq.n	800351e <I2C_MasterRequestWrite+0x2a>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d003      	beq.n	800351e <I2C_MasterRequestWrite+0x2a>
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800351c:	d108      	bne.n	8003530 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e00b      	b.n	8003548 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	2b12      	cmp	r3, #18
 8003536:	d107      	bne.n	8003548 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003546:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f9cd 	bl	80038f4 <I2C_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356e:	d103      	bne.n	8003578 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e035      	b.n	80035e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003584:	d108      	bne.n	8003598 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003586:	897b      	ldrh	r3, [r7, #10]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003594:	611a      	str	r2, [r3, #16]
 8003596:	e01b      	b.n	80035d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003598:	897b      	ldrh	r3, [r7, #10]
 800359a:	11db      	asrs	r3, r3, #7
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f003 0306 	and.w	r3, r3, #6
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f063 030f 	orn	r3, r3, #15
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	490e      	ldr	r1, [pc, #56]	; (80035f0 <I2C_MasterRequestWrite+0xfc>)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fa16 	bl	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e010      	b.n	80035e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4907      	ldr	r1, [pc, #28]	; (80035f4 <I2C_MasterRequestWrite+0x100>)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fa06 	bl	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	00010008 	.word	0x00010008
 80035f4:	00010002 	.word	0x00010002

080035f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	460b      	mov	r3, r1
 800360c:	813b      	strh	r3, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	2200      	movs	r2, #0
 800362a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f960 	bl	80038f4 <I2C_WaitOnFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003648:	d103      	bne.n	8003652 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e05f      	b.n	8003716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	492d      	ldr	r1, [pc, #180]	; (8003720 <I2C_RequestMemoryWrite+0x128>)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f9bb 	bl	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e04c      	b.n	8003716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003694:	6a39      	ldr	r1, [r7, #32]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 fa46 	bl	8003b28 <I2C_WaitOnTXEFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d107      	bne.n	80036ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e02b      	b.n	8003716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036c4:	893b      	ldrh	r3, [r7, #8]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	611a      	str	r2, [r3, #16]
 80036ce:	e021      	b.n	8003714 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036d0:	893b      	ldrh	r3, [r7, #8]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	6a39      	ldr	r1, [r7, #32]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa20 	bl	8003b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d107      	bne.n	8003706 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e005      	b.n	8003716 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800370a:	893b      	ldrh	r3, [r7, #8]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	00010002 	.word	0x00010002

08003724 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	4608      	mov	r0, r1
 800372e:	4611      	mov	r1, r2
 8003730:	461a      	mov	r2, r3
 8003732:	4603      	mov	r3, r0
 8003734:	817b      	strh	r3, [r7, #10]
 8003736:	460b      	mov	r3, r1
 8003738:	813b      	strh	r3, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800374c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	2200      	movs	r2, #0
 8003766:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f8c2 	bl	80038f4 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00d      	beq.n	8003792 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003784:	d103      	bne.n	800378e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0aa      	b.n	80038e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003792:	897b      	ldrh	r3, [r7, #10]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	6a3a      	ldr	r2, [r7, #32]
 80037a6:	4952      	ldr	r1, [pc, #328]	; (80038f0 <I2C_RequestMemoryRead+0x1cc>)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f91d 	bl	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e097      	b.n	80038e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d0:	6a39      	ldr	r1, [r7, #32]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f9a8 	bl	8003b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d107      	bne.n	80037f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e076      	b.n	80038e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003800:	893b      	ldrh	r3, [r7, #8]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]
 800380a:	e021      	b.n	8003850 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800380c:	893b      	ldrh	r3, [r7, #8]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b29b      	uxth	r3, r3
 8003812:	b2da      	uxtb	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381c:	6a39      	ldr	r1, [r7, #32]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f982 	bl	8003b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	2b04      	cmp	r3, #4
 8003830:	d107      	bne.n	8003842 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003840:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e050      	b.n	80038e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003846:	893b      	ldrh	r3, [r7, #8]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	6a39      	ldr	r1, [r7, #32]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f967 	bl	8003b28 <I2C_WaitOnTXEFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00d      	beq.n	800387c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	2b04      	cmp	r3, #4
 8003866:	d107      	bne.n	8003878 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003876:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e035      	b.n	80038e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	2200      	movs	r2, #0
 8003894:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f82b 	bl	80038f4 <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b2:	d103      	bne.n	80038bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e013      	b.n	80038e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038c0:	897b      	ldrh	r3, [r7, #10]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	4906      	ldr	r1, [pc, #24]	; (80038f0 <I2C_RequestMemoryRead+0x1cc>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f886 	bl	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	00010002 	.word	0x00010002

080038f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003904:	e048      	b.n	8003998 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d044      	beq.n	8003998 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7fe fd45 	bl	800239c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d139      	bne.n	8003998 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	0c1b      	lsrs	r3, r3, #16
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10d      	bne.n	800394a <I2C_WaitOnFlagUntilTimeout+0x56>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	43da      	mvns	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4013      	ands	r3, r2
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	e00c      	b.n	8003964 <I2C_WaitOnFlagUntilTimeout+0x70>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	43da      	mvns	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4013      	ands	r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	429a      	cmp	r2, r3
 8003968:	d116      	bne.n	8003998 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e023      	b.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d10d      	bne.n	80039be <I2C_WaitOnFlagUntilTimeout+0xca>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	43da      	mvns	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4013      	ands	r3, r2
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	e00c      	b.n	80039d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	43da      	mvns	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4013      	ands	r3, r2
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d093      	beq.n	8003906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f6:	e071      	b.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a06:	d123      	bne.n	8003a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f043 0204 	orr.w	r2, r3, #4
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e067      	b.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d041      	beq.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a58:	f7fe fca0 	bl	800239c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d302      	bcc.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d136      	bne.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d10c      	bne.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4013      	ands	r3, r2
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	e00b      	b.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e021      	b.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10c      	bne.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	43da      	mvns	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e00b      	b.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	43da      	mvns	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f47f af6d 	bne.w	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b34:	e034      	b.n	8003ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f8e3 	bl	8003d02 <I2C_IsAcknowledgeFailed>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e034      	b.n	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d028      	beq.n	8003ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4e:	f7fe fc25 	bl	800239c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11d      	bne.n	8003ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b80      	cmp	r3, #128	; 0x80
 8003b70:	d016      	beq.n	8003ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d1c3      	bne.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc4:	e034      	b.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f89b 	bl	8003d02 <I2C_IsAcknowledgeFailed>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e034      	b.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d028      	beq.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fe fbdd 	bl	800239c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11d      	bne.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d016      	beq.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e007      	b.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d1c3      	bne.n	8003bc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c54:	e049      	b.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d119      	bne.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0210 	mvn.w	r2, #16
 8003c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e030      	b.n	8003cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c98:	f7fe fb80 	bl	800239c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d302      	bcc.n	8003cae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11d      	bne.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d016      	beq.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e007      	b.n	8003cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d1ae      	bne.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	d11b      	bne.n	8003d52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f043 0204 	orr.w	r2, r3, #4
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d60:	b08b      	sub	sp, #44	; 0x2c
 8003d62:	af06      	add	r7, sp, #24
 8003d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0f1      	b.n	8003f54 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f007 f827 	bl	800add8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f002 ff46 	bl	8006c28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	687e      	ldr	r6, [r7, #4]
 8003da4:	466d      	mov	r5, sp
 8003da6:	f106 0410 	add.w	r4, r6, #16
 8003daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	602b      	str	r3, [r5, #0]
 8003db2:	1d33      	adds	r3, r6, #4
 8003db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003db6:	6838      	ldr	r0, [r7, #0]
 8003db8:	f002 ff10 	bl	8006bdc <USB_CoreInit>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0c2      	b.n	8003f54 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f002 ff41 	bl	8006c5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
 8003dde:	e040      	b.n	8003e62 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	440b      	add	r3, r1
 8003df0:	3301      	adds	r3, #1
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	440b      	add	r3, r1
 8003e06:	7bfa      	ldrb	r2, [r7, #15]
 8003e08:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	3303      	adds	r3, #3
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3338      	adds	r3, #56	; 0x38
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	440b      	add	r3, r1
 8003e42:	333c      	adds	r3, #60	; 0x3c
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e48:	7bfa      	ldrb	r2, [r7, #15]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	440b      	add	r3, r1
 8003e56:	3340      	adds	r3, #64	; 0x40
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3b9      	bcc.n	8003de0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e044      	b.n	8003efc <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	440b      	add	r3, r1
 8003e80:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e88:	7bfa      	ldrb	r2, [r7, #15]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	440b      	add	r3, r1
 8003e96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003eb4:	7bfa      	ldrb	r2, [r7, #15]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	440b      	add	r3, r1
 8003ec2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d3b5      	bcc.n	8003e72 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	687e      	ldr	r6, [r7, #4]
 8003f0e:	466d      	mov	r5, sp
 8003f10:	f106 0410 	add.w	r4, r6, #16
 8003f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	1d33      	adds	r3, r6, #4
 8003f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f20:	6838      	ldr	r0, [r7, #0]
 8003f22:	f002 fea7 	bl	8006c74 <USB_DevInit>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e00d      	b.n	8003f54 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f005 f928 	bl	80091a2 <USB_DevDisconnect>

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_PCD_Start+0x16>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e016      	b.n	8003fa0 <HAL_PCD_Start+0x44>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f002 fe3c 	bl	8006bfc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003f84:	2101      	movs	r1, #1
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f007 f999 	bl	800b2be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f005 f8fc 	bl	800918e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f005 f8fe 	bl	80091b6 <USB_ReadInterrupts>
 8003fba:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fb1b 	bl	8004602 <PCD_EP_ISR_Handler>

    return;
 8003fcc:	e119      	b.n	8004202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fea:	b292      	uxth	r2, r2
 8003fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f006 ff6c 	bl	800aece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f905 	bl	8004208 <HAL_PCD_SetAddress>

    return;
 8003ffe:	e100      	b.n	8004202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00c      	beq.n	8004024 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800401c:	b292      	uxth	r2, r2
 800401e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004022:	e0ee      	b.n	8004202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004040:	b292      	uxth	r2, r2
 8004042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004046:	e0dc      	b.n	8004202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d027      	beq.n	80040a2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0204 	bic.w	r2, r2, #4
 8004064:	b292      	uxth	r2, r2
 8004066:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004072:	b29a      	uxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0208 	bic.w	r2, r2, #8
 800407c:	b292      	uxth	r2, r2
 800407e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f006 ff5c 	bl	800af40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004090:	b29a      	uxth	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800409a:	b292      	uxth	r2, r2
 800409c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80040a0:	e0af      	b.n	8004202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8083 	beq.w	80041b4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e010      	b.n	80040d6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	7ffb      	ldrb	r3, [r7, #31]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	441a      	add	r2, r3
 80040c0:	7ffb      	ldrb	r3, [r7, #31]
 80040c2:	8812      	ldrh	r2, [r2, #0]
 80040c4:	b292      	uxth	r2, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	3320      	adds	r3, #32
 80040ca:	443b      	add	r3, r7
 80040cc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80040d0:	7ffb      	ldrb	r3, [r7, #31]
 80040d2:	3301      	adds	r3, #1
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	7ffb      	ldrb	r3, [r7, #31]
 80040d8:	2b07      	cmp	r3, #7
 80040da:	d9eb      	bls.n	80040b4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	b292      	uxth	r2, r2
 80040f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	b292      	uxth	r2, r2
 8004108:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800410c:	bf00      	nop
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004116:	b29b      	uxth	r3, r3
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f6      	beq.n	800410e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004132:	b292      	uxth	r2, r2
 8004134:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004138:	2300      	movs	r3, #0
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e00f      	b.n	800415e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800413e:	7ffb      	ldrb	r3, [r7, #31]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	4611      	mov	r1, r2
 8004146:	7ffa      	ldrb	r2, [r7, #31]
 8004148:	0092      	lsls	r2, r2, #2
 800414a:	440a      	add	r2, r1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	3320      	adds	r3, #32
 8004150:	443b      	add	r3, r7
 8004152:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004156:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004158:	7ffb      	ldrb	r3, [r7, #31]
 800415a:	3301      	adds	r3, #1
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	7ffb      	ldrb	r3, [r7, #31]
 8004160:	2b07      	cmp	r3, #7
 8004162:	d9ec      	bls.n	800413e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800416c:	b29a      	uxth	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0208 	orr.w	r2, r2, #8
 8004176:	b292      	uxth	r2, r2
 8004178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004184:	b29a      	uxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800418e:	b292      	uxth	r2, r2
 8004190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800419c:	b29a      	uxth	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0204 	orr.w	r2, r2, #4
 80041a6:	b292      	uxth	r2, r2
 80041a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f006 fead 	bl	800af0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80041b2:	e026      	b.n	8004202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00f      	beq.n	80041de <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041d0:	b292      	uxth	r2, r2
 80041d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f006 fe6b 	bl	800aeb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80041dc:	e011      	b.n	8004202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00c      	beq.n	8004202 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041fa:	b292      	uxth	r2, r2
 80041fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004200:	bf00      	nop
  }
}
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_PCD_SetAddress+0x1a>
 800421e:	2302      	movs	r3, #2
 8004220:	e013      	b.n	800424a <HAL_PCD_SetAddress+0x42>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f004 ff94 	bl	8009168 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	4608      	mov	r0, r1
 800425c:	4611      	mov	r1, r2
 800425e:	461a      	mov	r2, r3
 8004260:	4603      	mov	r3, r0
 8004262:	70fb      	strb	r3, [r7, #3]
 8004264:	460b      	mov	r3, r1
 8004266:	803b      	strh	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	da0e      	bge.n	8004296 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	705a      	strb	r2, [r3, #1]
 8004294:	e00e      	b.n	80042b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 0207 	and.w	r2, r3, #7
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	4413      	add	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042c0:	883a      	ldrh	r2, [r7, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	78ba      	ldrb	r2, [r7, #2]
 80042ca:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042cc:	78bb      	ldrb	r3, [r7, #2]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d102      	bne.n	80042d8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_PCD_EP_Open+0x94>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e00e      	b.n	8004304 <HAL_PCD_EP_Open+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68f9      	ldr	r1, [r7, #12]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f002 fcdd 	bl	8006cb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004302:	7afb      	ldrb	r3, [r7, #11]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800431c:	2b00      	cmp	r3, #0
 800431e:	da0e      	bge.n	800433e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	705a      	strb	r2, [r3, #1]
 800433c:	e00e      	b.n	800435c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	f003 0207 	and.w	r2, r3, #7
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_PCD_EP_Close+0x6a>
 8004372:	2302      	movs	r3, #2
 8004374:	e00e      	b.n	8004394 <HAL_PCD_EP_Close+0x88>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f003 f855 	bl	8007434 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	460b      	mov	r3, r1
 80043aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ac:	7afb      	ldrb	r3, [r7, #11]
 80043ae:	f003 0207 	and.w	r2, r3, #7
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2200      	movs	r2, #0
 80043d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043dc:	7afb      	ldrb	r3, [r7, #11]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6979      	ldr	r1, [r7, #20]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f003 fa0c 	bl	800780c <USB_EPStartXfer>

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 0207 	and.w	r2, r3, #7
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	440b      	add	r3, r1
 800441c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004420:	681b      	ldr	r3, [r3, #0]
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	460b      	mov	r3, r1
 800443a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800443c:	7afb      	ldrb	r3, [r7, #11]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2200      	movs	r2, #0
 8004470:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2201      	movs	r2, #1
 8004476:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004478:	7afb      	ldrb	r3, [r7, #11]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	b2da      	uxtb	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6979      	ldr	r1, [r7, #20]
 800448a:	4618      	mov	r0, r3
 800448c:	f003 f9be 	bl	800780c <USB_EPStartXfer>

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 0207 	and.w	r2, r3, #7
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d901      	bls.n	80044b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e04c      	b.n	8004552 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	da0e      	bge.n	80044de <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	705a      	strb	r2, [r3, #1]
 80044dc:	e00c      	b.n	80044f8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4413      	add	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_PCD_EP_SetStall+0x7e>
 8004514:	2302      	movs	r3, #2
 8004516:	e01c      	b.n	8004552 <HAL_PCD_EP_SetStall+0xb8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68f9      	ldr	r1, [r7, #12]
 8004526:	4618      	mov	r0, r3
 8004528:	f004 fd21 	bl	8008f6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	2b00      	cmp	r3, #0
 8004534:	d108      	bne.n	8004548 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f004 fe46 	bl	80091d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d901      	bls.n	8004578 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e040      	b.n	80045fa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800457c:	2b00      	cmp	r3, #0
 800457e:	da0e      	bge.n	800459e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	705a      	strb	r2, [r3, #1]
 800459c:	e00e      	b.n	80045bc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 0207 	and.w	r2, r3, #7
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_PCD_EP_ClrStall+0x82>
 80045d8:	2302      	movs	r3, #2
 80045da:	e00e      	b.n	80045fa <HAL_PCD_EP_ClrStall+0xa0>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68f9      	ldr	r1, [r7, #12]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f004 fd0f 	bl	800900e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b096      	sub	sp, #88	; 0x58
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800460a:	e3bf      	b.n	8004d8c <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004614:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004618:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004626:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8179 	bne.w	8004922 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004630:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	d152      	bne.n	80046e2 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464c:	81fb      	strh	r3, [r7, #14]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465c:	b29b      	uxth	r3, r3
 800465e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3328      	adds	r3, #40	; 0x28
 8004664:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466e:	b29b      	uxth	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	3302      	adds	r3, #2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800468e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004690:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	441a      	add	r2, r3
 800469c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80046a0:	2100      	movs	r1, #0
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f006 fbeb 	bl	800ae7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 836b 	beq.w	8004d8c <PCD_EP_ISR_Handler+0x78a>
 80046b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 8366 	bne.w	8004d8c <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	b292      	uxth	r2, r2
 80046d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046e0:	e354      	b.n	8004d8c <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046e8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80046f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d034      	beq.n	800476a <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004708:	b29b      	uxth	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	3306      	adds	r3, #6
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004738:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800473a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800473e:	b29b      	uxth	r3, r3
 8004740:	f004 fd98 	bl	8009274 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29a      	uxth	r2, r3
 800474c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004750:	4013      	ands	r3, r2
 8004752:	823b      	strh	r3, [r7, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	8a3a      	ldrh	r2, [r7, #16]
 800475a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800475e:	b292      	uxth	r2, r2
 8004760:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f006 fb5e 	bl	800ae24 <HAL_PCD_SetupStageCallback>
 8004768:	e310      	b.n	8004d8c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800476a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800476e:	2b00      	cmp	r3, #0
 8004770:	f280 830c 	bge.w	8004d8c <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29a      	uxth	r2, r3
 800477c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004780:	4013      	ands	r3, r2
 8004782:	83fb      	strh	r3, [r7, #30]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	8bfa      	ldrh	r2, [r7, #30]
 800478a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800478e:	b292      	uxth	r2, r2
 8004790:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479a:	b29b      	uxth	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	3306      	adds	r3, #6
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047bc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80047be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d019      	beq.n	80047fa <PCD_EP_ISR_Handler+0x1f8>
 80047c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d015      	beq.n	80047fa <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d4:	6959      	ldr	r1, [r3, #20]
 80047d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80047da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047dc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f004 fd48 	bl	8009274 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80047e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	441a      	add	r2, r3
 80047ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80047f2:	2100      	movs	r1, #0
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f006 fb27 	bl	800ae48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004804:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480c:	2b00      	cmp	r3, #0
 800480e:	f040 82bd 	bne.w	8004d8c <PCD_EP_ISR_Handler+0x78a>
 8004812:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004816:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800481a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800481e:	f000 82b5 	beq.w	8004d8c <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004830:	b29b      	uxth	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800484c:	b29a      	uxth	r2, r3
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b3e      	cmp	r3, #62	; 0x3e
 8004858:	d91d      	bls.n	8004896 <PCD_EP_ISR_Handler+0x294>
 800485a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	647b      	str	r3, [r7, #68]	; 0x44
 8004862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <PCD_EP_ISR_Handler+0x272>
 800486e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004870:	3b01      	subs	r3, #1
 8004872:	647b      	str	r3, [r7, #68]	; 0x44
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29a      	uxth	r2, r3
 800487a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487c:	b29b      	uxth	r3, r3
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	b29b      	uxth	r3, r3
 8004882:	4313      	orrs	r3, r2
 8004884:	b29b      	uxth	r3, r3
 8004886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800488a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488e:	b29a      	uxth	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	e026      	b.n	80048e4 <PCD_EP_ISR_Handler+0x2e2>
 8004896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <PCD_EP_ISR_Handler+0x2b2>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	e017      	b.n	80048e4 <PCD_EP_ISR_Handler+0x2e2>
 80048b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	647b      	str	r3, [r7, #68]	; 0x44
 80048bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <PCD_EP_ISR_Handler+0x2cc>
 80048c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ca:	3301      	adds	r3, #1
 80048cc:	647b      	str	r3, [r7, #68]	; 0x44
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	b29b      	uxth	r3, r3
 80048dc:	4313      	orrs	r3, r2
 80048de:	b29a      	uxth	r2, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	827b      	strh	r3, [r7, #18]
 80048f6:	8a7b      	ldrh	r3, [r7, #18]
 80048f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048fc:	827b      	strh	r3, [r7, #18]
 80048fe:	8a7b      	ldrh	r3, [r7, #18]
 8004900:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004904:	827b      	strh	r3, [r7, #18]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	8a7b      	ldrh	r3, [r7, #18]
 800490c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491c:	b29b      	uxth	r3, r3
 800491e:	8013      	strh	r3, [r2, #0]
 8004920:	e234      	b.n	8004d8c <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004936:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800493a:	2b00      	cmp	r3, #0
 800493c:	f280 80fc 	bge.w	8004b38 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29a      	uxth	r2, r3
 8004952:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004956:	4013      	ands	r3, r2
 8004958:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800496e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004972:	b292      	uxth	r2, r2
 8004974:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004976:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	4413      	add	r3, r2
 800498a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800498c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800498e:	7b1b      	ldrb	r3, [r3, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d125      	bne.n	80049e0 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499c:	b29b      	uxth	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4413      	add	r3, r2
 80049a8:	3306      	adds	r3, #6
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80049c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8092 	beq.w	8004aee <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d0:	6959      	ldr	r1, [r3, #20]
 80049d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d4:	88da      	ldrh	r2, [r3, #6]
 80049d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80049da:	f004 fc4b 	bl	8009274 <USB_ReadPMA>
 80049de:	e086      	b.n	8004aee <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80049e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e2:	78db      	ldrb	r3, [r3, #3]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d10a      	bne.n	80049fe <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80049e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049ec:	461a      	mov	r2, r3
 80049ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f9d9 	bl	8004da8 <HAL_PCD_EP_DB_Receive>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80049fc:	e077      	b.n	8004aee <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	441a      	add	r2, r3
 8004a2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d024      	beq.n	8004aa6 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3302      	adds	r3, #2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a84:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004a88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d02e      	beq.n	8004aee <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a96:	6959      	ldr	r1, [r3, #20]
 8004a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a9a:	891a      	ldrh	r2, [r3, #8]
 8004a9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004aa0:	f004 fbe8 	bl	8009274 <USB_ReadPMA>
 8004aa4:	e023      	b.n	8004aee <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4413      	add	r3, r2
 8004aba:	3306      	adds	r3, #6
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ace:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004ad2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae0:	6959      	ldr	r1, [r3, #20]
 8004ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae4:	895a      	ldrh	r2, [r3, #10]
 8004ae6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004aea:	f004 fbc3 	bl	8009274 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af0:	69da      	ldr	r2, [r3, #28]
 8004af2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004af6:	441a      	add	r2, r3
 8004af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004afa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004b04:	441a      	add	r2, r3
 8004b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b08:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <PCD_EP_ISR_Handler+0x51c>
 8004b12:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d206      	bcs.n	8004b2c <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f006 f98f 	bl	800ae48 <HAL_PCD_DataOutStageCallback>
 8004b2a:	e005      	b.n	8004b38 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b32:	4618      	mov	r0, r3
 8004b34:	f002 fe6a 	bl	800780c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004b38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8123 	beq.w	8004d8c <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8004b46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	4413      	add	r3, r2
 8004b58:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b98:	78db      	ldrb	r3, [r3, #3]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	f040 80a2 	bne.w	8004ce4 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8004ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba8:	7b1b      	ldrb	r3, [r3, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8093 	beq.w	8004cd6 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004bb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d046      	beq.n	8004c4a <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d126      	bne.n	8004c12 <PCD_EP_ISR_Handler+0x610>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	4413      	add	r3, r2
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	011a      	lsls	r2, r3, #4
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	4413      	add	r3, r2
 8004be6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bea:	623b      	str	r3, [r7, #32]
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	801a      	strh	r2, [r3, #0]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	e061      	b.n	8004cd6 <PCD_EP_ISR_Handler+0x6d4>
 8004c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d15d      	bne.n	8004cd6 <PCD_EP_ISR_Handler+0x6d4>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	4413      	add	r3, r2
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	011a      	lsls	r2, r3, #4
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	2200      	movs	r2, #0
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	e045      	b.n	8004cd6 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d126      	bne.n	8004ca6 <PCD_EP_ISR_Handler+0x6a4>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6c:	4413      	add	r3, r2
 8004c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	011a      	lsls	r2, r3, #4
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	4413      	add	r3, r2
 8004c7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	e017      	b.n	8004cd6 <PCD_EP_ISR_Handler+0x6d4>
 8004ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d113      	bne.n	8004cd6 <PCD_EP_ISR_Handler+0x6d4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbc:	4413      	add	r3, r2
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	011a      	lsls	r2, r3, #4
 8004cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc8:	4413      	add	r3, r2
 8004cca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f006 f8ce 	bl	800ae7e <HAL_PCD_DataInStageCallback>
 8004ce2:	e053      	b.n	8004d8c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004ce4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d146      	bne.n	8004d7e <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4413      	add	r3, r2
 8004d04:	3302      	adds	r3, #2
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d907      	bls.n	8004d38 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d30:	1ad2      	subs	r2, r2, r3
 8004d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d34:	619a      	str	r2, [r3, #24]
 8004d36:	e002      	b.n	8004d3e <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f006 f896 	bl	800ae7e <HAL_PCD_DataInStageCallback>
 8004d52:	e01b      	b.n	8004d8c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d56:	695a      	ldr	r2, [r3, #20]
 8004d58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d5c:	441a      	add	r2, r3
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d60:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d6a:	441a      	add	r2, r3
 8004d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d76:	4618      	mov	r0, r3
 8004d78:	f002 fd48 	bl	800780c <USB_EPStartXfer>
 8004d7c:	e006      	b.n	8004d8c <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d82:	461a      	mov	r2, r3
 8004d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f91b 	bl	8004fc2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	b21b      	sxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f6ff ac37 	blt.w	800460c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3758      	adds	r7, #88	; 0x58
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d07e      	beq.n	8004ebe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	8b7b      	ldrh	r3, [r7, #26]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d306      	bcc.n	8004e02 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	8b7b      	ldrh	r3, [r7, #26]
 8004dfa:	1ad2      	subs	r2, r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	619a      	str	r2, [r3, #24]
 8004e00:	e002      	b.n	8004e08 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2200      	movs	r2, #0
 8004e06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d123      	bne.n	8004e58 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	833b      	strh	r3, [r7, #24]
 8004e2c:	8b3b      	ldrh	r3, [r7, #24]
 8004e2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e32:	833b      	strh	r3, [r7, #24]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	441a      	add	r2, r3
 8004e42:	8b3b      	ldrh	r3, [r7, #24]
 8004e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01f      	beq.n	8004ea2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7c:	82fb      	strh	r3, [r7, #22]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	8afb      	ldrh	r3, [r7, #22]
 8004e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ea2:	8b7b      	ldrh	r3, [r7, #26]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8087 	beq.w	8004fb8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6959      	ldr	r1, [r3, #20]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	891a      	ldrh	r2, [r3, #8]
 8004eb6:	8b7b      	ldrh	r3, [r7, #26]
 8004eb8:	f004 f9dc 	bl	8009274 <USB_ReadPMA>
 8004ebc:	e07c      	b.n	8004fb8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3306      	adds	r3, #6
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	8b7b      	ldrh	r3, [r7, #26]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d306      	bcc.n	8004f00 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	8b7b      	ldrh	r3, [r7, #26]
 8004ef8:	1ad2      	subs	r2, r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	619a      	str	r2, [r3, #24]
 8004efe:	e002      	b.n	8004f06 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2200      	movs	r2, #0
 8004f04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d123      	bne.n	8004f56 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f28:	83fb      	strh	r3, [r7, #30]
 8004f2a:	8bfb      	ldrh	r3, [r7, #30]
 8004f2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f30:	83fb      	strh	r3, [r7, #30]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	8bfb      	ldrh	r3, [r7, #30]
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d11f      	bne.n	8004fa0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	83bb      	strh	r3, [r7, #28]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	441a      	add	r2, r3
 8004f8a:	8bbb      	ldrh	r3, [r7, #28]
 8004f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004fa0:	8b7b      	ldrh	r3, [r7, #26]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6959      	ldr	r1, [r3, #20]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	895a      	ldrh	r2, [r3, #10]
 8004fb2:	8b7b      	ldrh	r3, [r7, #26]
 8004fb4:	f004 f95e 	bl	8009274 <USB_ReadPMA>
    }
  }

  return count;
 8004fb8:	8b7b      	ldrh	r3, [r7, #26]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b0a4      	sub	sp, #144	; 0x90
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 81dd 	beq.w	8005396 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005004:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	699a      	ldr	r2, [r3, #24]
 800500c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005010:	429a      	cmp	r2, r3
 8005012:	d907      	bls.n	8005024 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800501c:	1ad2      	subs	r2, r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	619a      	str	r2, [r3, #24]
 8005022:	e002      	b.n	800502a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2200      	movs	r2, #0
 8005028:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 80b9 	bne.w	80051a6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d126      	bne.n	800508a <HAL_PCD_EP_DB_Transmit+0xc8>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504a:	b29b      	uxth	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	4413      	add	r3, r2
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	011a      	lsls	r2, r3, #4
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	4413      	add	r3, r2
 800505e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800506e:	b29a      	uxth	r2, r3
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005082:	b29a      	uxth	r2, r3
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e01a      	b.n	80050c0 <HAL_PCD_EP_DB_Transmit+0xfe>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d116      	bne.n	80050c0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	4413      	add	r3, r2
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	011a      	lsls	r2, r3, #4
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	4413      	add	r3, r2
 80050b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	2200      	movs	r2, #0
 80050be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d126      	bne.n	800511c <HAL_PCD_EP_DB_Transmit+0x15a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	61fb      	str	r3, [r7, #28]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050dc:	b29b      	uxth	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	4413      	add	r3, r2
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	011a      	lsls	r2, r3, #4
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005100:	b29a      	uxth	r2, r3
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	801a      	strh	r2, [r3, #0]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005114:	b29a      	uxth	r2, r3
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	801a      	strh	r2, [r3, #0]
 800511a:	e017      	b.n	800514c <HAL_PCD_EP_DB_Transmit+0x18a>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d113      	bne.n	800514c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512c:	b29b      	uxth	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	4413      	add	r3, r2
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	011a      	lsls	r2, r3, #4
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	4413      	add	r3, r2
 8005140:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	2200      	movs	r2, #0
 800514a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	4619      	mov	r1, r3
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f005 fe93 	bl	800ae7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 82fc 	beq.w	800575c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	82fb      	strh	r3, [r7, #22]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	441a      	add	r2, r3
 800518e:	8afb      	ldrh	r3, [r7, #22]
 8005190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800519c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8013      	strh	r3, [r2, #0]
 80051a4:	e2da      	b.n	800575c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d021      	beq.n	80051f4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	f040 82ae 	bne.w	800575c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005208:	441a      	add	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005216:	441a      	add	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	429a      	cmp	r2, r3
 8005226:	d30b      	bcc.n	8005240 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6a1a      	ldr	r2, [r3, #32]
 8005234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005238:	1ad2      	subs	r2, r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	621a      	str	r2, [r3, #32]
 800523e:	e017      	b.n	8005270 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d108      	bne.n	800525a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005248:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800524c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005258:	e00a      	b.n	8005270 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2200      	movs	r2, #0
 800526e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d165      	bne.n	8005344 <HAL_PCD_EP_DB_Transmit+0x382>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005286:	b29b      	uxth	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528c:	4413      	add	r3, r2
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005298:	4413      	add	r3, r2
 800529a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800529e:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052b4:	2b3e      	cmp	r3, #62	; 0x3e
 80052b6:	d91d      	bls.n	80052f4 <HAL_PCD_EP_DB_Transmit+0x332>
 80052b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	64bb      	str	r3, [r7, #72]	; 0x48
 80052c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <HAL_PCD_EP_DB_Transmit+0x310>
 80052cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ce:	3b01      	subs	r3, #1
 80052d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052da:	b29b      	uxth	r3, r3
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4313      	orrs	r3, r2
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	e044      	b.n	800537e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <HAL_PCD_EP_DB_Transmit+0x350>
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530a:	b29a      	uxth	r2, r3
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	801a      	strh	r2, [r3, #0]
 8005310:	e035      	b.n	800537e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	64bb      	str	r3, [r7, #72]	; 0x48
 800531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_PCD_EP_DB_Transmit+0x36a>
 8005326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005328:	3301      	adds	r3, #1
 800532a:	64bb      	str	r3, [r7, #72]	; 0x48
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29a      	uxth	r2, r3
 8005332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005334:	b29b      	uxth	r3, r3
 8005336:	029b      	lsls	r3, r3, #10
 8005338:	b29b      	uxth	r3, r3
 800533a:	4313      	orrs	r3, r2
 800533c:	b29a      	uxth	r2, r3
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	e01c      	b.n	800537e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d118      	bne.n	800537e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	647b      	str	r3, [r7, #68]	; 0x44
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535a:	b29b      	uxth	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005360:	4413      	add	r3, r2
 8005362:	647b      	str	r3, [r7, #68]	; 0x44
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	011a      	lsls	r2, r3, #4
 800536a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536c:	4413      	add	r3, r2
 800536e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005372:	643b      	str	r3, [r7, #64]	; 0x40
 8005374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005378:	b29a      	uxth	r2, r3
 800537a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	6959      	ldr	r1, [r3, #20]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	891a      	ldrh	r2, [r3, #8]
 800538a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800538e:	b29b      	uxth	r3, r3
 8005390:	f003 ff2b 	bl	80091ea <USB_WritePMA>
 8005394:	e1e2      	b.n	800575c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	3306      	adds	r3, #6
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d307      	bcc.n	80053de <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	619a      	str	r2, [r3, #24]
 80053dc:	e002      	b.n	80053e4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2200      	movs	r2, #0
 80053e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f040 80c0 	bne.w	800556e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d126      	bne.n	8005444 <HAL_PCD_EP_DB_Transmit+0x482>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005404:	b29b      	uxth	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800540a:	4413      	add	r3, r2
 800540c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	011a      	lsls	r2, r3, #4
 8005414:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005416:	4413      	add	r3, r2
 8005418:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800541c:	67bb      	str	r3, [r7, #120]	; 0x78
 800541e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005428:	b29a      	uxth	r2, r3
 800542a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543c:	b29a      	uxth	r2, r3
 800543e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005440:	801a      	strh	r2, [r3, #0]
 8005442:	e01a      	b.n	800547a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d116      	bne.n	800547a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	667b      	str	r3, [r7, #100]	; 0x64
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545a:	b29b      	uxth	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005460:	4413      	add	r3, r2
 8005462:	667b      	str	r3, [r7, #100]	; 0x64
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	011a      	lsls	r2, r3, #4
 800546a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546c:	4413      	add	r3, r2
 800546e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005472:	663b      	str	r3, [r7, #96]	; 0x60
 8005474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005476:	2200      	movs	r2, #0
 8005478:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	677b      	str	r3, [r7, #116]	; 0x74
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d12b      	bne.n	80054e0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005496:	b29b      	uxth	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549c:	4413      	add	r3, r2
 800549e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	011a      	lsls	r2, r3, #4
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	4413      	add	r3, r2
 80054aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054be:	b29a      	uxth	r2, r3
 80054c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	e017      	b.n	8005510 <HAL_PCD_EP_DB_Transmit+0x54e>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d113      	bne.n	8005510 <HAL_PCD_EP_DB_Transmit+0x54e>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f6:	4413      	add	r3, r2
 80054f8:	677b      	str	r3, [r7, #116]	; 0x74
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	011a      	lsls	r2, r3, #4
 8005500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005502:	4413      	add	r3, r2
 8005504:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005508:	673b      	str	r3, [r7, #112]	; 0x70
 800550a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800550c:	2200      	movs	r2, #0
 800550e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	4619      	mov	r1, r3
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f005 fcb1 	bl	800ae7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 811a 	bne.w	800575c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	441a      	add	r2, r3
 8005554:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005568:	b29b      	uxth	r3, r3
 800556a:	8013      	strh	r3, [r2, #0]
 800556c:	e0f6      	b.n	800575c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d121      	bne.n	80055bc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	441a      	add	r2, r3
 80055a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	f040 80ca 	bne.w	800575c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	695a      	ldr	r2, [r3, #20]
 80055cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80055d0:	441a      	add	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	69da      	ldr	r2, [r3, #28]
 80055da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80055de:	441a      	add	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d30b      	bcc.n	8005608 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	6a1a      	ldr	r2, [r3, #32]
 80055fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005600:	1ad2      	subs	r2, r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	621a      	str	r2, [r3, #32]
 8005606:	e017      	b.n	8005638 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d108      	bne.n	8005622 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005610:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005620:	e00a      	b.n	8005638 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2200      	movs	r2, #0
 800562e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	657b      	str	r3, [r7, #84]	; 0x54
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d165      	bne.n	8005712 <HAL_PCD_EP_DB_Transmit+0x750>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005654:	b29b      	uxth	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800565a:	4413      	add	r3, r2
 800565c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	011a      	lsls	r2, r3, #4
 8005664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005666:	4413      	add	r3, r2
 8005668:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800566c:	65bb      	str	r3, [r7, #88]	; 0x58
 800566e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005678:	b29a      	uxth	r2, r3
 800567a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005682:	2b3e      	cmp	r3, #62	; 0x3e
 8005684:	d91d      	bls.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x700>
 8005686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	66bb      	str	r3, [r7, #104]	; 0x68
 800568e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <HAL_PCD_EP_DB_Transmit+0x6de>
 800569a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800569c:	3b01      	subs	r3, #1
 800569e:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	029b      	lsls	r3, r3, #10
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	4313      	orrs	r3, r2
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056be:	801a      	strh	r2, [r3, #0]
 80056c0:	e041      	b.n	8005746 <HAL_PCD_EP_DB_Transmit+0x784>
 80056c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <HAL_PCD_EP_DB_Transmit+0x71e>
 80056ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	e032      	b.n	8005746 <HAL_PCD_EP_DB_Transmit+0x784>
 80056e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80056e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_PCD_EP_DB_Transmit+0x738>
 80056f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056f6:	3301      	adds	r3, #1
 80056f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80056fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29a      	uxth	r2, r3
 8005700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005702:	b29b      	uxth	r3, r3
 8005704:	029b      	lsls	r3, r3, #10
 8005706:	b29b      	uxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b29a      	uxth	r2, r3
 800570c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e019      	b.n	8005746 <HAL_PCD_EP_DB_Transmit+0x784>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d115      	bne.n	8005746 <HAL_PCD_EP_DB_Transmit+0x784>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005722:	b29b      	uxth	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005728:	4413      	add	r3, r2
 800572a:	657b      	str	r3, [r7, #84]	; 0x54
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	011a      	lsls	r2, r3, #4
 8005732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005734:	4413      	add	r3, r2
 8005736:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800573a:	653b      	str	r3, [r7, #80]	; 0x50
 800573c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005740:	b29a      	uxth	r2, r3
 8005742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005744:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6959      	ldr	r1, [r3, #20]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	895a      	ldrh	r2, [r3, #10]
 8005752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005756:	b29b      	uxth	r3, r3
 8005758:	f003 fd47 	bl	80091ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005776:	82bb      	strh	r3, [r7, #20]
 8005778:	8abb      	ldrh	r3, [r7, #20]
 800577a:	f083 0310 	eor.w	r3, r3, #16
 800577e:	82bb      	strh	r3, [r7, #20]
 8005780:	8abb      	ldrh	r3, [r7, #20]
 8005782:	f083 0320 	eor.w	r3, r3, #32
 8005786:	82bb      	strh	r3, [r7, #20]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	441a      	add	r2, r3
 8005796:	8abb      	ldrh	r3, [r7, #20]
 8005798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3790      	adds	r7, #144	; 0x90
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b087      	sub	sp, #28
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	607b      	str	r3, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	817b      	strh	r3, [r7, #10]
 80057c4:	4613      	mov	r3, r2
 80057c6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80057c8:	897b      	ldrh	r3, [r7, #10]
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057d4:	897b      	ldrh	r3, [r7, #10]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e009      	b.n	8005800 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057ec:	897a      	ldrh	r2, [r7, #10]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005800:	893b      	ldrh	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d107      	bne.n	8005816 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	b29a      	uxth	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	80da      	strh	r2, [r3, #6]
 8005814:	e00b      	b.n	800582e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2201      	movs	r2, #1
 800581a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	b29a      	uxth	r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	0c1b      	lsrs	r3, r3, #16
 8005828:	b29a      	uxth	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
	...

0800583c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e272      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8087 	beq.w	800596a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800585c:	4b92      	ldr	r3, [pc, #584]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 030c 	and.w	r3, r3, #12
 8005864:	2b04      	cmp	r3, #4
 8005866:	d00c      	beq.n	8005882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005868:	4b8f      	ldr	r3, [pc, #572]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 030c 	and.w	r3, r3, #12
 8005870:	2b08      	cmp	r3, #8
 8005872:	d112      	bne.n	800589a <HAL_RCC_OscConfig+0x5e>
 8005874:	4b8c      	ldr	r3, [pc, #560]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	d10b      	bne.n	800589a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005882:	4b89      	ldr	r3, [pc, #548]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d06c      	beq.n	8005968 <HAL_RCC_OscConfig+0x12c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d168      	bne.n	8005968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e24c      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a2:	d106      	bne.n	80058b2 <HAL_RCC_OscConfig+0x76>
 80058a4:	4b80      	ldr	r3, [pc, #512]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a7f      	ldr	r2, [pc, #508]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e02e      	b.n	8005910 <HAL_RCC_OscConfig+0xd4>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x98>
 80058ba:	4b7b      	ldr	r3, [pc, #492]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a7a      	ldr	r2, [pc, #488]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	4b78      	ldr	r3, [pc, #480]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a77      	ldr	r2, [pc, #476]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e01d      	b.n	8005910 <HAL_RCC_OscConfig+0xd4>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCC_OscConfig+0xbc>
 80058de:	4b72      	ldr	r3, [pc, #456]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a71      	ldr	r2, [pc, #452]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	4b6f      	ldr	r3, [pc, #444]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6e      	ldr	r2, [pc, #440]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	e00b      	b.n	8005910 <HAL_RCC_OscConfig+0xd4>
 80058f8:	4b6b      	ldr	r3, [pc, #428]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a6a      	ldr	r2, [pc, #424]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80058fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	4b68      	ldr	r3, [pc, #416]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a67      	ldr	r2, [pc, #412]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800590a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d013      	beq.n	8005940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005918:	f7fc fd40 	bl	800239c <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005920:	f7fc fd3c 	bl	800239c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	; 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e200      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	4b5d      	ldr	r3, [pc, #372]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0xe4>
 800593e:	e014      	b.n	800596a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005940:	f7fc fd2c 	bl	800239c <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005948:	f7fc fd28 	bl	800239c <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b64      	cmp	r3, #100	; 0x64
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e1ec      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595a:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x10c>
 8005966:	e000      	b.n	800596a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d063      	beq.n	8005a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005976:	4b4c      	ldr	r3, [pc, #304]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005982:	4b49      	ldr	r3, [pc, #292]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b08      	cmp	r3, #8
 800598c:	d11c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x18c>
 800598e:	4b46      	ldr	r3, [pc, #280]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d116      	bne.n	80059c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599a:	4b43      	ldr	r3, [pc, #268]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_RCC_OscConfig+0x176>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d001      	beq.n	80059b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e1c0      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b2:	4b3d      	ldr	r3, [pc, #244]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4939      	ldr	r1, [pc, #228]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059c6:	e03a      	b.n	8005a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d020      	beq.n	8005a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059d0:	4b36      	ldr	r3, [pc, #216]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d6:	f7fc fce1 	bl	800239c <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059de:	f7fc fcdd 	bl	800239c <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e1a1      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f0:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fc:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4927      	ldr	r1, [pc, #156]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]
 8005a10:	e015      	b.n	8005a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a12:	4b26      	ldr	r3, [pc, #152]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fc fcc0 	bl	800239c <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a20:	f7fc fcbc 	bl	800239c <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e180      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a32:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d03a      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d019      	beq.n	8005a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a52:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a58:	f7fc fca0 	bl	800239c <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a60:	f7fc fc9c 	bl	800239c <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e160      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <HAL_RCC_OscConfig+0x26c>)
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a7e:	2001      	movs	r0, #1
 8005a80:	f000 face 	bl	8006020 <RCC_Delay>
 8005a84:	e01c      	b.n	8005ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a86:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a8c:	f7fc fc86 	bl	800239c <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a92:	e00f      	b.n	8005ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a94:	f7fc fc82 	bl	800239c <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d908      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e146      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
 8005aa6:	bf00      	nop
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	42420000 	.word	0x42420000
 8005ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab4:	4b92      	ldr	r3, [pc, #584]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e9      	bne.n	8005a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80a6 	beq.w	8005c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad2:	4b8b      	ldr	r3, [pc, #556]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10d      	bne.n	8005afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ade:	4b88      	ldr	r3, [pc, #544]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	4a87      	ldr	r2, [pc, #540]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	61d3      	str	r3, [r2, #28]
 8005aea:	4b85      	ldr	r3, [pc, #532]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afa:	4b82      	ldr	r3, [pc, #520]	; (8005d04 <HAL_RCC_OscConfig+0x4c8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d118      	bne.n	8005b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b06:	4b7f      	ldr	r3, [pc, #508]	; (8005d04 <HAL_RCC_OscConfig+0x4c8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a7e      	ldr	r2, [pc, #504]	; (8005d04 <HAL_RCC_OscConfig+0x4c8>)
 8005b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b12:	f7fc fc43 	bl	800239c <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b1a:	f7fc fc3f 	bl	800239c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b64      	cmp	r3, #100	; 0x64
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e103      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2c:	4b75      	ldr	r3, [pc, #468]	; (8005d04 <HAL_RCC_OscConfig+0x4c8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f0      	beq.n	8005b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCC_OscConfig+0x312>
 8005b40:	4b6f      	ldr	r3, [pc, #444]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	4a6e      	ldr	r2, [pc, #440]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	6213      	str	r3, [r2, #32]
 8005b4c:	e02d      	b.n	8005baa <HAL_RCC_OscConfig+0x36e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10c      	bne.n	8005b70 <HAL_RCC_OscConfig+0x334>
 8005b56:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	4a69      	ldr	r2, [pc, #420]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	6213      	str	r3, [r2, #32]
 8005b62:	4b67      	ldr	r3, [pc, #412]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	4a66      	ldr	r2, [pc, #408]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b68:	f023 0304 	bic.w	r3, r3, #4
 8005b6c:	6213      	str	r3, [r2, #32]
 8005b6e:	e01c      	b.n	8005baa <HAL_RCC_OscConfig+0x36e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2b05      	cmp	r3, #5
 8005b76:	d10c      	bne.n	8005b92 <HAL_RCC_OscConfig+0x356>
 8005b78:	4b61      	ldr	r3, [pc, #388]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	4a60      	ldr	r2, [pc, #384]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b7e:	f043 0304 	orr.w	r3, r3, #4
 8005b82:	6213      	str	r3, [r2, #32]
 8005b84:	4b5e      	ldr	r3, [pc, #376]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	4a5d      	ldr	r2, [pc, #372]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	6213      	str	r3, [r2, #32]
 8005b90:	e00b      	b.n	8005baa <HAL_RCC_OscConfig+0x36e>
 8005b92:	4b5b      	ldr	r3, [pc, #364]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	4a5a      	ldr	r2, [pc, #360]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	6213      	str	r3, [r2, #32]
 8005b9e:	4b58      	ldr	r3, [pc, #352]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	4a57      	ldr	r2, [pc, #348]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	f023 0304 	bic.w	r3, r3, #4
 8005ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d015      	beq.n	8005bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb2:	f7fc fbf3 	bl	800239c <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bba:	f7fc fbef 	bl	800239c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e0b1      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd0:	4b4b      	ldr	r3, [pc, #300]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0ee      	beq.n	8005bba <HAL_RCC_OscConfig+0x37e>
 8005bdc:	e014      	b.n	8005c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bde:	f7fc fbdd 	bl	800239c <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be4:	e00a      	b.n	8005bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be6:	f7fc fbd9 	bl	800239c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e09b      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bfc:	4b40      	ldr	r3, [pc, #256]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1ee      	bne.n	8005be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d105      	bne.n	8005c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0e:	4b3c      	ldr	r3, [pc, #240]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	4a3b      	ldr	r2, [pc, #236]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8087 	beq.w	8005d32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c24:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 030c 	and.w	r3, r3, #12
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d061      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d146      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c38:	4b33      	ldr	r3, [pc, #204]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3e:	f7fc fbad 	bl	800239c <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c46:	f7fc fba9 	bl	800239c <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e06d      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c58:	4b29      	ldr	r3, [pc, #164]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f0      	bne.n	8005c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d108      	bne.n	8005c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	4921      	ldr	r1, [pc, #132]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c80:	4b1f      	ldr	r3, [pc, #124]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a19      	ldr	r1, [r3, #32]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	430b      	orrs	r3, r1
 8005c92:	491b      	ldr	r1, [pc, #108]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c98:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9e:	f7fc fb7d 	bl	800239c <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca6:	f7fc fb79 	bl	800239c <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e03d      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cb8:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x46a>
 8005cc4:	e035      	b.n	8005d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <HAL_RCC_OscConfig+0x4cc>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ccc:	f7fc fb66 	bl	800239c <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fc fb62 	bl	800239c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e026      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_RCC_OscConfig+0x4c4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x498>
 8005cf2:	e01e      	b.n	8005d32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d107      	bne.n	8005d0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e019      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40007000 	.word	0x40007000
 8005d08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_OscConfig+0x500>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d106      	bne.n	8005d2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d001      	beq.n	8005d32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40021000 	.word	0x40021000

08005d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0d0      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d54:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d910      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d62:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 0207 	bic.w	r2, r3, #7
 8005d6a:	4965      	ldr	r1, [pc, #404]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b63      	ldr	r3, [pc, #396]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0b8      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d9c:	4b59      	ldr	r3, [pc, #356]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4a58      	ldr	r2, [pc, #352]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005db4:	4b53      	ldr	r3, [pc, #332]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	4a52      	ldr	r2, [pc, #328]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc0:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	494d      	ldr	r1, [pc, #308]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d040      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	4b47      	ldr	r3, [pc, #284]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d115      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e07f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d107      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfe:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e073      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e06b      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e1e:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f023 0203 	bic.w	r2, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4936      	ldr	r1, [pc, #216]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e30:	f7fc fab4 	bl	800239c <HAL_GetTick>
 8005e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	e00a      	b.n	8005e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e38:	f7fc fab0 	bl	800239c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e053      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4e:	4b2d      	ldr	r3, [pc, #180]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 020c 	and.w	r2, r3, #12
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d1eb      	bne.n	8005e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e60:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d210      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 0207 	bic.w	r2, r3, #7
 8005e76:	4922      	ldr	r1, [pc, #136]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7e:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <HAL_RCC_ClockConfig+0x1c0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e032      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e9c:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4916      	ldr	r1, [pc, #88]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	490e      	ldr	r1, [pc, #56]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ece:	f000 f821 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	490a      	ldr	r1, [pc, #40]	; (8005f08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee0:	5ccb      	ldrb	r3, [r1, r3]
 8005ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <HAL_RCC_ClockConfig+0x1cc>)
 8005ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCC_ClockConfig+0x1d0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fc fa12 	bl	8002318 <HAL_InitTick>

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40022000 	.word	0x40022000
 8005f04:	40021000 	.word	0x40021000
 8005f08:	0800ca9c 	.word	0x0800ca9c
 8005f0c:	20000030 	.word	0x20000030
 8005f10:	20000034 	.word	0x20000034

08005f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d002      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0x30>
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d003      	beq.n	8005f4a <HAL_RCC_GetSysClockFreq+0x36>
 8005f42:	e027      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f44:	4b19      	ldr	r3, [pc, #100]	; (8005fac <HAL_RCC_GetSysClockFreq+0x98>)
 8005f46:	613b      	str	r3, [r7, #16]
      break;
 8005f48:	e027      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	0c9b      	lsrs	r3, r3, #18
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005f54:	5cd3      	ldrb	r3, [r2, r3]
 8005f56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d010      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f62:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	0c5b      	lsrs	r3, r3, #17
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f6e:	5cd3      	ldrb	r3, [r2, r3]
 8005f70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a0d      	ldr	r2, [pc, #52]	; (8005fac <HAL_RCC_GetSysClockFreq+0x98>)
 8005f76:	fb03 f202 	mul.w	r2, r3, r2
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e004      	b.n	8005f8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a0c      	ldr	r2, [pc, #48]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	613b      	str	r3, [r7, #16]
      break;
 8005f92:	e002      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_RCC_GetSysClockFreq+0x98>)
 8005f96:	613b      	str	r3, [r7, #16]
      break;
 8005f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f9a:	693b      	ldr	r3, [r7, #16]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	007a1200 	.word	0x007a1200
 8005fb0:	0800cab4 	.word	0x0800cab4
 8005fb4:	0800cac4 	.word	0x0800cac4
 8005fb8:	003d0900 	.word	0x003d0900

08005fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc0:	4b02      	ldr	r3, [pc, #8]	; (8005fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	20000030 	.word	0x20000030

08005fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fd4:	f7ff fff2 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4903      	ldr	r1, [pc, #12]	; (8005ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	0800caac 	.word	0x0800caac

08005ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ffc:	f7ff ffde 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8006000:	4602      	mov	r2, r0
 8006002:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	0adb      	lsrs	r3, r3, #11
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	4903      	ldr	r1, [pc, #12]	; (800601c <HAL_RCC_GetPCLK2Freq+0x24>)
 800600e:	5ccb      	ldrb	r3, [r1, r3]
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40021000 	.word	0x40021000
 800601c:	0800caac 	.word	0x0800caac

08006020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <RCC_Delay+0x34>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a0a      	ldr	r2, [pc, #40]	; (8006058 <RCC_Delay+0x38>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	0a5b      	lsrs	r3, r3, #9
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800603c:	bf00      	nop
  }
  while (Delay --);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1e5a      	subs	r2, r3, #1
 8006042:	60fa      	str	r2, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f9      	bne.n	800603c <RCC_Delay+0x1c>
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr
 8006054:	20000030 	.word	0x20000030
 8006058:	10624dd3 	.word	0x10624dd3

0800605c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d07d      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006078:	2300      	movs	r3, #0
 800607a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800607c:	4b4f      	ldr	r3, [pc, #316]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10d      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006088:	4b4c      	ldr	r3, [pc, #304]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	4a4b      	ldr	r2, [pc, #300]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006092:	61d3      	str	r3, [r2, #28]
 8006094:	4b49      	ldr	r3, [pc, #292]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060a0:	2301      	movs	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d118      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060b0:	4b43      	ldr	r3, [pc, #268]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a42      	ldr	r2, [pc, #264]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060bc:	f7fc f96e 	bl	800239c <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c2:	e008      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c4:	f7fc f96a 	bl	800239c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b64      	cmp	r3, #100	; 0x64
 80060d0:	d901      	bls.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e06d      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d6:	4b3a      	ldr	r3, [pc, #232]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02e      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d027      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006100:	4b2e      	ldr	r3, [pc, #184]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006108:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800610a:	4b2e      	ldr	r3, [pc, #184]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006110:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006116:	4a29      	ldr	r2, [pc, #164]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d014      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006126:	f7fc f939 	bl	800239c <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612c:	e00a      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fc f935 	bl	800239c <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f241 3288 	movw	r2, #5000	; 0x1388
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e036      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006144:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ee      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006150:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4917      	ldr	r1, [pc, #92]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615e:	4313      	orrs	r3, r2
 8006160:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d105      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	4a13      	ldr	r2, [pc, #76]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006172:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	490b      	ldr	r1, [pc, #44]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800619e:	4b07      	ldr	r3, [pc, #28]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	4904      	ldr	r1, [pc, #16]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
 80061c0:	40007000 	.word	0x40007000
 80061c4:	42420440 	.word	0x42420440

080061c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e041      	b.n	800625e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fb ff6c 	bl	80020cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f000 faa2 	bl	8006750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d001      	beq.n	8006280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e03a      	b.n	80062f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a18      	ldr	r2, [pc, #96]	; (8006300 <HAL_TIM_Base_Start_IT+0x98>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00e      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d009      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <HAL_TIM_Base_Start_IT+0x9c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a13      	ldr	r2, [pc, #76]	; (8006308 <HAL_TIM_Base_Start_IT+0xa0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d111      	bne.n	80062e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b06      	cmp	r3, #6
 80062d0:	d010      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e2:	e007      	b.n	80062f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800

0800630c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6a1a      	ldr	r2, [r3, #32]
 800632a:	f241 1311 	movw	r3, #4369	; 0x1111
 800632e:	4013      	ands	r3, r2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10f      	bne.n	8006354 <HAL_TIM_Base_Stop_IT+0x48>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6a1a      	ldr	r2, [r3, #32]
 800633a:	f240 4344 	movw	r3, #1092	; 0x444
 800633e:	4013      	ands	r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d107      	bne.n	8006354 <HAL_TIM_Base_Stop_IT+0x48>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	d122      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b02      	cmp	r3, #2
 800638a:	d11b      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0202 	mvn.w	r2, #2
 8006394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f9b4 	bl	8006718 <HAL_TIM_IC_CaptureCallback>
 80063b0:	e005      	b.n	80063be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f9a7 	bl	8006706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f9b6 	bl	800672a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d122      	bne.n	8006418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d11b      	bne.n	8006418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0204 	mvn.w	r2, #4
 80063e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f98a 	bl	8006718 <HAL_TIM_IC_CaptureCallback>
 8006404:	e005      	b.n	8006412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f97d 	bl	8006706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f98c 	bl	800672a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b08      	cmp	r3, #8
 8006424:	d122      	bne.n	800646c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b08      	cmp	r3, #8
 8006432:	d11b      	bne.n	800646c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0208 	mvn.w	r2, #8
 800643c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2204      	movs	r2, #4
 8006442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f960 	bl	8006718 <HAL_TIM_IC_CaptureCallback>
 8006458:	e005      	b.n	8006466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f953 	bl	8006706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f962 	bl	800672a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b10      	cmp	r3, #16
 8006478:	d122      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b10      	cmp	r3, #16
 8006486:	d11b      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0210 	mvn.w	r2, #16
 8006490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2208      	movs	r2, #8
 8006496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f936 	bl	8006718 <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f929 	bl	8006706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f938 	bl	800672a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10e      	bne.n	80064ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d107      	bne.n	80064ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0201 	mvn.w	r2, #1
 80064e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb f9f4 	bl	80018d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b80      	cmp	r3, #128	; 0x80
 80064f8:	d10e      	bne.n	8006518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006504:	2b80      	cmp	r3, #128	; 0x80
 8006506:	d107      	bne.n	8006518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa7b 	bl	8006a0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d10e      	bne.n	8006544 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d107      	bne.n	8006544 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800653c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f8fc 	bl	800673c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b20      	cmp	r3, #32
 8006550:	d10e      	bne.n	8006570 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b20      	cmp	r3, #32
 800655e:	d107      	bne.n	8006570 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0220 	mvn.w	r2, #32
 8006568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa46 	bl	80069fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_TIM_ConfigClockSource+0x1c>
 8006590:	2302      	movs	r3, #2
 8006592:	e0b4      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x186>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065cc:	d03e      	beq.n	800664c <HAL_TIM_ConfigClockSource+0xd4>
 80065ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d2:	f200 8087 	bhi.w	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
 80065d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065da:	f000 8086 	beq.w	80066ea <HAL_TIM_ConfigClockSource+0x172>
 80065de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e2:	d87f      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
 80065e4:	2b70      	cmp	r3, #112	; 0x70
 80065e6:	d01a      	beq.n	800661e <HAL_TIM_ConfigClockSource+0xa6>
 80065e8:	2b70      	cmp	r3, #112	; 0x70
 80065ea:	d87b      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
 80065ec:	2b60      	cmp	r3, #96	; 0x60
 80065ee:	d050      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x11a>
 80065f0:	2b60      	cmp	r3, #96	; 0x60
 80065f2:	d877      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
 80065f4:	2b50      	cmp	r3, #80	; 0x50
 80065f6:	d03c      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0xfa>
 80065f8:	2b50      	cmp	r3, #80	; 0x50
 80065fa:	d873      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	d058      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x13a>
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d86f      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006604:	2b30      	cmp	r3, #48	; 0x30
 8006606:	d064      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006608:	2b30      	cmp	r3, #48	; 0x30
 800660a:	d86b      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
 800660c:	2b20      	cmp	r3, #32
 800660e:	d060      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006610:	2b20      	cmp	r3, #32
 8006612:	d867      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d05c      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006618:	2b10      	cmp	r3, #16
 800661a:	d05a      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x15a>
 800661c:	e062      	b.n	80066e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	6899      	ldr	r1, [r3, #8]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f000 f968 	bl	8006902 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	609a      	str	r2, [r3, #8]
      break;
 800664a:	e04f      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	6899      	ldr	r1, [r3, #8]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f000 f951 	bl	8006902 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800666e:	609a      	str	r2, [r3, #8]
      break;
 8006670:	e03c      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	461a      	mov	r2, r3
 8006680:	f000 f8c8 	bl	8006814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2150      	movs	r1, #80	; 0x50
 800668a:	4618      	mov	r0, r3
 800668c:	f000 f91f 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006690:	e02c      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6859      	ldr	r1, [r3, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	461a      	mov	r2, r3
 80066a0:	f000 f8e6 	bl	8006870 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2160      	movs	r1, #96	; 0x60
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f90f 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 80066b0:	e01c      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6859      	ldr	r1, [r3, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	461a      	mov	r2, r3
 80066c0:	f000 f8a8 	bl	8006814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2140      	movs	r1, #64	; 0x40
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f8ff 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 80066d0:	e00c      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4619      	mov	r1, r3
 80066dc:	4610      	mov	r0, r2
 80066de:	f000 f8f6 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 80066e2:	e003      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
      break;
 80066e8:	e000      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr

0800672a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr
	...

08006750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a29      	ldr	r2, [pc, #164]	; (8006808 <TIM_Base_SetConfig+0xb8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00b      	beq.n	8006780 <TIM_Base_SetConfig+0x30>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676e:	d007      	beq.n	8006780 <TIM_Base_SetConfig+0x30>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a26      	ldr	r2, [pc, #152]	; (800680c <TIM_Base_SetConfig+0xbc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_Base_SetConfig+0x30>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a25      	ldr	r2, [pc, #148]	; (8006810 <TIM_Base_SetConfig+0xc0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d108      	bne.n	8006792 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1c      	ldr	r2, [pc, #112]	; (8006808 <TIM_Base_SetConfig+0xb8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_Base_SetConfig+0x62>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a0:	d007      	beq.n	80067b2 <TIM_Base_SetConfig+0x62>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a19      	ldr	r2, [pc, #100]	; (800680c <TIM_Base_SetConfig+0xbc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_Base_SetConfig+0x62>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a18      	ldr	r2, [pc, #96]	; (8006810 <TIM_Base_SetConfig+0xc0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d108      	bne.n	80067c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a07      	ldr	r2, [pc, #28]	; (8006808 <TIM_Base_SetConfig+0xb8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d103      	bne.n	80067f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	615a      	str	r2, [r3, #20]
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800

08006814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f023 0201 	bic.w	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800683e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f023 030a 	bic.w	r3, r3, #10
 8006850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0210 	bic.w	r2, r3, #16
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800689a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	031b      	lsls	r3, r3, #12
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	621a      	str	r2, [r3, #32]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr

080068ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f043 0307 	orr.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	609a      	str	r2, [r3, #8]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr

08006902 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006902:	b480      	push	{r7}
 8006904:	b087      	sub	sp, #28
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
 800690e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800691c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	021a      	lsls	r2, r3, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	431a      	orrs	r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	4313      	orrs	r3, r2
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	609a      	str	r2, [r3, #8]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr

08006940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006954:	2302      	movs	r3, #2
 8006956:	e046      	b.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00e      	beq.n	80069ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d009      	beq.n	80069ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a12      	ldr	r2, [pc, #72]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d004      	beq.n	80069ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a10      	ldr	r2, [pc, #64]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d10c      	bne.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr
 80069f0:	40012c00 	.word	0x40012c00
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800

080069fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr

08006a0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bc80      	pop	{r7}
 8006a1e:	4770      	bx	lr

08006a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e042      	b.n	8006ab8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fb fb80 	bl	800214c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2224      	movs	r2, #36	; 0x24
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f82b 	bl	8006ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695a      	ldr	r2, [r3, #20]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006afa:	f023 030c 	bic.w	r3, r3, #12
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	430b      	orrs	r3, r1
 8006b06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <UART_SetConfig+0x114>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d103      	bne.n	8006b30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b28:	f7ff fa66 	bl	8005ff8 <HAL_RCC_GetPCLK2Freq>
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	e002      	b.n	8006b36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b30:	f7ff fa4e 	bl	8005fd0 <HAL_RCC_GetPCLK1Freq>
 8006b34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009a      	lsls	r2, r3, #2
 8006b40:	441a      	add	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	4a22      	ldr	r2, [pc, #136]	; (8006bd8 <UART_SetConfig+0x118>)
 8006b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	0119      	lsls	r1, r3, #4
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009a      	lsls	r2, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b6c:	4b1a      	ldr	r3, [pc, #104]	; (8006bd8 <UART_SetConfig+0x118>)
 8006b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	2064      	movs	r0, #100	; 0x64
 8006b76:	fb00 f303 	mul.w	r3, r0, r3
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	3332      	adds	r3, #50	; 0x32
 8006b80:	4a15      	ldr	r2, [pc, #84]	; (8006bd8 <UART_SetConfig+0x118>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b8c:	4419      	add	r1, r3
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009a      	lsls	r2, r3, #2
 8006b98:	441a      	add	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <UART_SetConfig+0x118>)
 8006ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	2064      	movs	r0, #100	; 0x64
 8006bae:	fb00 f303 	mul.w	r3, r0, r3
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	3332      	adds	r3, #50	; 0x32
 8006bb8:	4a07      	ldr	r2, [pc, #28]	; (8006bd8 <UART_SetConfig+0x118>)
 8006bba:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	f003 020f 	and.w	r2, r3, #15
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	440a      	add	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006bcc:	bf00      	nop
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40013800 	.word	0x40013800
 8006bd8:	51eb851f 	.word	0x51eb851f

08006bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bdc:	b084      	sub	sp, #16
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	f107 0014 	add.w	r0, r7, #20
 8006bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	b004      	add	sp, #16
 8006bfa:	4770      	bx	lr

08006bfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006c10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006c34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	43db      	mvns	r3, r3
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4013      	ands	r3, r2
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr

08006c74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c74:	b084      	sub	sp, #16
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	f107 0014 	add.w	r0, r7, #20
 8006c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	b004      	add	sp, #16
 8006cb2:	4770      	bx	lr

08006cb4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b09d      	sub	sp, #116	; 0x74
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	78db      	ldrb	r3, [r3, #3]
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d81f      	bhi.n	8006d26 <USB_ActivateEndpoint+0x72>
 8006ce6:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <USB_ActivateEndpoint+0x38>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d2f 	.word	0x08006d2f
 8006cf8:	08006d0b 	.word	0x08006d0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006cfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d08:	e012      	b.n	8006d30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006d12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d16:	e00b      	b.n	8006d30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d24:	e004      	b.n	8006d30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006d2c:	e000      	b.n	8006d30 <USB_ActivateEndpoint+0x7c>
      break;
 8006d2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	441a      	add	r2, r3
 8006d3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	7b1b      	ldrb	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f040 8178 	bne.w	8007092 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8084 	beq.w	8006eb4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	011a      	lsls	r2, r3, #4
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	827b      	strh	r3, [r7, #18]
 8006dee:	8a7b      	ldrh	r3, [r7, #18]
 8006df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01b      	beq.n	8006e30 <USB_ActivateEndpoint+0x17c>
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	823b      	strh	r3, [r7, #16]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	441a      	add	r2, r3
 8006e1a:	8a3b      	ldrh	r3, [r7, #16]
 8006e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	78db      	ldrb	r3, [r3, #3]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d020      	beq.n	8006e7a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4e:	81bb      	strh	r3, [r7, #12]
 8006e50:	89bb      	ldrh	r3, [r7, #12]
 8006e52:	f083 0320 	eor.w	r3, r3, #32
 8006e56:	81bb      	strh	r3, [r7, #12]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	441a      	add	r2, r3
 8006e62:	89bb      	ldrh	r3, [r7, #12]
 8006e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	8013      	strh	r3, [r2, #0]
 8006e78:	e2d5      	b.n	8007426 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e90:	81fb      	strh	r3, [r7, #14]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	89fb      	ldrh	r3, [r7, #14]
 8006e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	8013      	strh	r3, [r2, #0]
 8006eb2:	e2b8      	b.n	8007426 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	4413      	add	r3, r2
 8006ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	011a      	lsls	r2, r3, #4
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	88db      	ldrh	r3, [r3, #6]
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	4413      	add	r3, r2
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	011a      	lsls	r2, r3, #4
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	4413      	add	r3, r2
 8006f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b3e      	cmp	r3, #62	; 0x3e
 8006f22:	d91d      	bls.n	8006f60 <USB_ActivateEndpoint+0x2ac>
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <USB_ActivateEndpoint+0x28a>
 8006f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	029b      	lsls	r3, r3, #10
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	e026      	b.n	8006fae <USB_ActivateEndpoint+0x2fa>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <USB_ActivateEndpoint+0x2ca>
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	801a      	strh	r2, [r3, #0]
 8006f7c:	e017      	b.n	8006fae <USB_ActivateEndpoint+0x2fa>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	085b      	lsrs	r3, r3, #1
 8006f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <USB_ActivateEndpoint+0x2e4>
 8006f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f94:	3301      	adds	r3, #1
 8006f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	029b      	lsls	r3, r3, #10
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	847b      	strh	r3, [r7, #34]	; 0x22
 8006fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01b      	beq.n	8006ffe <USB_ActivateEndpoint+0x34a>
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fdc:	843b      	strh	r3, [r7, #32]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	441a      	add	r2, r3
 8006fe8:	8c3b      	ldrh	r3, [r7, #32]
 8006fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d124      	bne.n	8007050 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701c:	83bb      	strh	r3, [r7, #28]
 800701e:	8bbb      	ldrh	r3, [r7, #28]
 8007020:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007024:	83bb      	strh	r3, [r7, #28]
 8007026:	8bbb      	ldrh	r3, [r7, #28]
 8007028:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800702c:	83bb      	strh	r3, [r7, #28]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	441a      	add	r2, r3
 8007038:	8bbb      	ldrh	r3, [r7, #28]
 800703a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800703e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704a:	b29b      	uxth	r3, r3
 800704c:	8013      	strh	r3, [r2, #0]
 800704e:	e1ea      	b.n	8007426 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	b29b      	uxth	r3, r3
 800705e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	83fb      	strh	r3, [r7, #30]
 8007068:	8bfb      	ldrh	r3, [r7, #30]
 800706a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800706e:	83fb      	strh	r3, [r7, #30]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	441a      	add	r2, r3
 800707a:	8bfb      	ldrh	r3, [r7, #30]
 800707c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708c:	b29b      	uxth	r3, r3
 800708e:	8013      	strh	r3, [r2, #0]
 8007090:	e1c9      	b.n	8007426 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	78db      	ldrb	r3, [r3, #3]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d11e      	bne.n	80070d8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	441a      	add	r2, r3
 80070be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80070c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	8013      	strh	r3, [r2, #0]
 80070d6:	e01d      	b.n	8007114 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	441a      	add	r2, r3
 80070fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007110:	b29b      	uxth	r3, r3
 8007112:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800711e:	b29b      	uxth	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007124:	4413      	add	r3, r2
 8007126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	011a      	lsls	r2, r3, #4
 800712e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007130:	4413      	add	r3, r2
 8007132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007136:	65bb      	str	r3, [r7, #88]	; 0x58
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	891b      	ldrh	r3, [r3, #8]
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	b29b      	uxth	r3, r3
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007146:	801a      	strh	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	657b      	str	r3, [r7, #84]	; 0x54
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007152:	b29b      	uxth	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007158:	4413      	add	r3, r2
 800715a:	657b      	str	r3, [r7, #84]	; 0x54
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	011a      	lsls	r2, r3, #4
 8007162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007164:	4413      	add	r3, r2
 8007166:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800716a:	653b      	str	r3, [r7, #80]	; 0x50
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	895b      	ldrh	r3, [r3, #10]
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	b29b      	uxth	r3, r3
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	785b      	ldrb	r3, [r3, #1]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f040 8093 	bne.w	80072ac <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007196:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800719a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01b      	beq.n	80071da <USB_ActivateEndpoint+0x526>
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	441a      	add	r2, r3
 80071c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80071c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80071e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d01b      	beq.n	800722a <USB_ActivateEndpoint+0x576>
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007208:	877b      	strh	r3, [r7, #58]	; 0x3a
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	441a      	add	r2, r3
 8007214:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800721a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007222:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007226:	b29b      	uxth	r3, r3
 8007228:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800723c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007240:	873b      	strh	r3, [r7, #56]	; 0x38
 8007242:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007244:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007248:	873b      	strh	r3, [r7, #56]	; 0x38
 800724a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800724c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007250:	873b      	strh	r3, [r7, #56]	; 0x38
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	441a      	add	r2, r3
 800725c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800725e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726e:	b29b      	uxth	r3, r3
 8007270:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007288:	86fb      	strh	r3, [r7, #54]	; 0x36
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	441a      	add	r2, r3
 8007294:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	8013      	strh	r3, [r2, #0]
 80072aa:	e0bc      	b.n	8007426 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01d      	beq.n	8007304 <USB_ActivateEndpoint+0x650>
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	441a      	add	r2, r3
 80072ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007300:	b29b      	uxth	r3, r3
 8007302:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01d      	beq.n	800735c <USB_ActivateEndpoint+0x6a8>
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	441a      	add	r2, r3
 8007344:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800734c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007354:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007358:	b29b      	uxth	r3, r3
 800735a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	78db      	ldrb	r3, [r3, #3]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d024      	beq.n	80073ae <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	b29b      	uxth	r3, r3
 8007372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800737a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800737e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007382:	f083 0320 	eor.w	r3, r3, #32
 8007386:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	441a      	add	r2, r3
 8007394:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800739c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	8013      	strh	r3, [r2, #0]
 80073ac:	e01d      	b.n	80073ea <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	441a      	add	r2, r3
 80073d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80073d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007400:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	441a      	add	r2, r3
 800740e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800741e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007422:	b29b      	uxth	r3, r3
 8007424:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007426:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800742a:	4618      	mov	r0, r3
 800742c:	3774      	adds	r7, #116	; 0x74
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr

08007434 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007434:	b480      	push	{r7}
 8007436:	b08d      	sub	sp, #52	; 0x34
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	7b1b      	ldrb	r3, [r3, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f040 808e 	bne.w	8007564 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d044      	beq.n	80074da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	81bb      	strh	r3, [r7, #12]
 800745e:	89bb      	ldrh	r3, [r7, #12]
 8007460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01b      	beq.n	80074a0 <USB_DeactivateEndpoint+0x6c>
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b29b      	uxth	r3, r3
 8007476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	817b      	strh	r3, [r7, #10]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	441a      	add	r2, r3
 800748a:	897b      	ldrh	r3, [r7, #10]
 800748c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007498:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800749c:	b29b      	uxth	r3, r3
 800749e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b6:	813b      	strh	r3, [r7, #8]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	441a      	add	r2, r3
 80074c2:	893b      	ldrh	r3, [r7, #8]
 80074c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	8013      	strh	r3, [r2, #0]
 80074d8:	e192      	b.n	8007800 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	827b      	strh	r3, [r7, #18]
 80074e8:	8a7b      	ldrh	r3, [r7, #18]
 80074ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d01b      	beq.n	800752a <USB_DeactivateEndpoint+0xf6>
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007508:	823b      	strh	r3, [r7, #16]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	441a      	add	r2, r3
 8007514:	8a3b      	ldrh	r3, [r7, #16]
 8007516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007526:	b29b      	uxth	r3, r3
 8007528:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800753c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007540:	81fb      	strh	r3, [r7, #14]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	89fb      	ldrh	r3, [r7, #14]
 800754e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800755a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755e:	b29b      	uxth	r3, r3
 8007560:	8013      	strh	r3, [r2, #0]
 8007562:	e14d      	b.n	8007800 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	2b00      	cmp	r3, #0
 800756a:	f040 80a5 	bne.w	80076b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	843b      	strh	r3, [r7, #32]
 800757c:	8c3b      	ldrh	r3, [r7, #32]
 800757e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d01b      	beq.n	80075be <USB_DeactivateEndpoint+0x18a>
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759c:	83fb      	strh	r3, [r7, #30]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	441a      	add	r2, r3
 80075a8:	8bfb      	ldrh	r3, [r7, #30]
 80075aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	83bb      	strh	r3, [r7, #28]
 80075cc:	8bbb      	ldrh	r3, [r7, #28]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01b      	beq.n	800760e <USB_DeactivateEndpoint+0x1da>
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ec:	837b      	strh	r3, [r7, #26]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	441a      	add	r2, r3
 80075f8:	8b7b      	ldrh	r3, [r7, #26]
 80075fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800760a:	b29b      	uxth	r3, r3
 800760c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007624:	833b      	strh	r3, [r7, #24]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	8b3b      	ldrh	r3, [r7, #24]
 8007632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007642:	b29b      	uxth	r3, r3
 8007644:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765c:	82fb      	strh	r3, [r7, #22]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	441a      	add	r2, r3
 8007668:	8afb      	ldrh	r3, [r7, #22]
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007694:	82bb      	strh	r3, [r7, #20]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	441a      	add	r2, r3
 80076a0:	8abb      	ldrh	r3, [r7, #20]
 80076a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8013      	strh	r3, [r2, #0]
 80076b6:	e0a3      	b.n	8007800 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80076c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01b      	beq.n	8007708 <USB_DeactivateEndpoint+0x2d4>
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	441a      	add	r2, r3
 80076f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80076f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007704:	b29b      	uxth	r3, r3
 8007706:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007716:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771c:	2b00      	cmp	r3, #0
 800771e:	d01b      	beq.n	8007758 <USB_DeactivateEndpoint+0x324>
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007736:	853b      	strh	r3, [r7, #40]	; 0x28
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	441a      	add	r2, r3
 8007742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800774c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007750:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007754:	b29b      	uxth	r3, r3
 8007756:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	441a      	add	r2, r3
 800777a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800777c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778c:	b29b      	uxth	r3, r3
 800778e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	441a      	add	r2, r3
 80077b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077de:	847b      	strh	r3, [r7, #34]	; 0x22
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	441a      	add	r2, r3
 80077ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3734      	adds	r7, #52	; 0x34
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr

0800780c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b0c2      	sub	sp, #264	; 0x108
 8007810:	af00      	add	r7, sp, #0
 8007812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800781a:	6018      	str	r0, [r3, #0]
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b01      	cmp	r3, #1
 8007834:	f040 86b7 	bne.w	80085a6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699a      	ldr	r2, [r3, #24]
 8007844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	429a      	cmp	r2, r3
 8007852:	d908      	bls.n	8007866 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007864:	e007      	b.n	8007876 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	7b1b      	ldrb	r3, [r3, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d13a      	bne.n	80078fc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6959      	ldr	r1, [r3, #20]
 8007892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	88da      	ldrh	r2, [r3, #6]
 800789e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078ac:	6800      	ldr	r0, [r0, #0]
 80078ae:	f001 fc9c 	bl	80091ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	461a      	mov	r2, r3
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	011a      	lsls	r2, r3, #4
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	4413      	add	r3, r2
 80078e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	f000 be1f 	b.w	800853a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80078fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	78db      	ldrb	r3, [r3, #3]
 8007908:	2b02      	cmp	r3, #2
 800790a:	f040 8462 	bne.w	80081d2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800790e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a1a      	ldr	r2, [r3, #32]
 800791a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	429a      	cmp	r2, r3
 8007928:	f240 83df 	bls.w	80080ea <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800792c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007952:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	441a      	add	r2, r3
 8007970:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007984:	b29b      	uxth	r3, r3
 8007986:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6a1a      	ldr	r2, [r3, #32]
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007998:	1ad2      	subs	r2, r2, r3
 800799a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 81c7 	beq.w	8007d5c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	633b      	str	r3, [r7, #48]	; 0x30
 80079da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d177      	bne.n	8007ada <USB_EPStartXfer+0x2ce>
 80079ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80079f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	4413      	add	r3, r2
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	011a      	lsls	r2, r3, #4
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	4413      	add	r3, r2
 8007a20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8007a3c:	d921      	bls.n	8007a82 <USB_EPStartXfer+0x276>
 8007a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <USB_EPStartXfer+0x252>
 8007a54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	029b      	lsls	r3, r3, #10
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	e050      	b.n	8007b24 <USB_EPStartXfer+0x318>
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <USB_EPStartXfer+0x294>
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	801a      	strh	r2, [r3, #0]
 8007a9e:	e041      	b.n	8007b24 <USB_EPStartXfer+0x318>
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d004      	beq.n	8007ac0 <USB_EPStartXfer+0x2b4>
 8007ab6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007aba:	3301      	adds	r3, #1
 8007abc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	029b      	lsls	r3, r3, #10
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	e024      	b.n	8007b24 <USB_EPStartXfer+0x318>
 8007ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d11c      	bne.n	8007b24 <USB_EPStartXfer+0x318>
 8007aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	4413      	add	r3, r2
 8007b00:	633b      	str	r3, [r7, #48]	; 0x30
 8007b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	011a      	lsls	r2, r3, #4
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	4413      	add	r3, r2
 8007b14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	895b      	ldrh	r3, [r3, #10]
 8007b30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6959      	ldr	r1, [r3, #20]
 8007b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b52:	6800      	ldr	r0, [r0, #0]
 8007b54:	f001 fb49 	bl	80091ea <USB_WritePMA>
            ep->xfer_buff += len;
 8007b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695a      	ldr	r2, [r3, #20]
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b68:	441a      	add	r2, r3
 8007b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6a1a      	ldr	r2, [r3, #32]
 8007b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d90f      	bls.n	8007bb2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6a1a      	ldr	r2, [r3, #32]
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba2:	1ad2      	subs	r2, r2, r3
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	621a      	str	r2, [r3, #32]
 8007bb0:	e00e      	b.n	8007bd0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d177      	bne.n	8007cd0 <USB_EPStartXfer+0x4c4>
 8007be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	4413      	add	r3, r2
 8007c02:	61bb      	str	r3, [r7, #24]
 8007c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	011a      	lsls	r2, r3, #4
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	4413      	add	r3, r2
 8007c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c30:	2b3e      	cmp	r3, #62	; 0x3e
 8007c32:	d921      	bls.n	8007c78 <USB_EPStartXfer+0x46c>
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c42:	f003 031f 	and.w	r3, r3, #31
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d104      	bne.n	8007c54 <USB_EPStartXfer+0x448>
 8007c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	029b      	lsls	r3, r3, #10
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	4313      	orrs	r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	e056      	b.n	8007d26 <USB_EPStartXfer+0x51a>
 8007c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <USB_EPStartXfer+0x48a>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	e047      	b.n	8007d26 <USB_EPStartXfer+0x51a>
 8007c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <USB_EPStartXfer+0x4aa>
 8007cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	029b      	lsls	r3, r3, #10
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	801a      	strh	r2, [r3, #0]
 8007cce:	e02a      	b.n	8007d26 <USB_EPStartXfer+0x51a>
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d122      	bne.n	8007d26 <USB_EPStartXfer+0x51a>
 8007ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	623b      	str	r3, [r7, #32]
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	4413      	add	r3, r2
 8007d02:	623b      	str	r3, [r7, #32]
 8007d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	011a      	lsls	r2, r3, #4
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	4413      	add	r3, r2
 8007d16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d1a:	61fb      	str	r3, [r7, #28]
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	891b      	ldrh	r3, [r3, #8]
 8007d32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6959      	ldr	r1, [r3, #20]
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d54:	6800      	ldr	r0, [r0, #0]
 8007d56:	f001 fa48 	bl	80091ea <USB_WritePMA>
 8007d5a:	e3ee      	b.n	800853a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d177      	bne.n	8007e5c <USB_EPStartXfer+0x650>
 8007d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8c:	4413      	add	r3, r2
 8007d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	011a      	lsls	r2, r3, #4
 8007d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da0:	4413      	add	r3, r2
 8007da2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007da6:	647b      	str	r3, [r7, #68]	; 0x44
 8007da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007db6:	801a      	strh	r2, [r3, #0]
 8007db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8007dbe:	d921      	bls.n	8007e04 <USB_EPStartXfer+0x5f8>
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dce:	f003 031f 	and.w	r3, r3, #31
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <USB_EPStartXfer+0x5d4>
 8007dd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	029b      	lsls	r3, r3, #10
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e00:	801a      	strh	r2, [r3, #0]
 8007e02:	e056      	b.n	8007eb2 <USB_EPStartXfer+0x6a6>
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <USB_EPStartXfer+0x616>
 8007e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e1e:	801a      	strh	r2, [r3, #0]
 8007e20:	e047      	b.n	8007eb2 <USB_EPStartXfer+0x6a6>
 8007e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <USB_EPStartXfer+0x636>
 8007e38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	029b      	lsls	r3, r3, #10
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	4313      	orrs	r3, r2
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	e02a      	b.n	8007eb2 <USB_EPStartXfer+0x6a6>
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d122      	bne.n	8007eb2 <USB_EPStartXfer+0x6a6>
 8007e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	653b      	str	r3, [r7, #80]	; 0x50
 8007e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8c:	4413      	add	r3, r2
 8007e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8007e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	011a      	lsls	r2, r3, #4
 8007e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	891b      	ldrh	r3, [r3, #8]
 8007ebe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6959      	ldr	r1, [r3, #20]
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ed8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007edc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ee0:	6800      	ldr	r0, [r0, #0]
 8007ee2:	f001 f982 	bl	80091ea <USB_WritePMA>
            ep->xfer_buff += len;
 8007ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695a      	ldr	r2, [r3, #20]
 8007ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef6:	441a      	add	r2, r3
 8007ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6a1a      	ldr	r2, [r3, #32]
 8007f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d90f      	bls.n	8007f40 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6a1a      	ldr	r2, [r3, #32]
 8007f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f30:	1ad2      	subs	r2, r2, r3
 8007f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	621a      	str	r2, [r3, #32]
 8007f3e:	e00e      	b.n	8007f5e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	643b      	str	r3, [r7, #64]	; 0x40
 8007f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d177      	bne.n	800806a <USB_EPStartXfer+0x85e>
 8007f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	461a      	mov	r2, r3
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	4413      	add	r3, r2
 8007f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	011a      	lsls	r2, r3, #4
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	4413      	add	r3, r2
 8007fb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fca:	2b3e      	cmp	r3, #62	; 0x3e
 8007fcc:	d921      	bls.n	8008012 <USB_EPStartXfer+0x806>
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <USB_EPStartXfer+0x7e2>
 8007fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	029b      	lsls	r3, r3, #10
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	b29b      	uxth	r3, r3
 8008002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800a:	b29a      	uxth	r2, r3
 800800c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800e:	801a      	strh	r2, [r3, #0]
 8008010:	e050      	b.n	80080b4 <USB_EPStartXfer+0x8a8>
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <USB_EPStartXfer+0x824>
 800801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008028:	b29a      	uxth	r2, r3
 800802a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802c:	801a      	strh	r2, [r3, #0]
 800802e:	e041      	b.n	80080b4 <USB_EPStartXfer+0x8a8>
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <USB_EPStartXfer+0x844>
 8008046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804a:	3301      	adds	r3, #1
 800804c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29a      	uxth	r2, r3
 8008056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805a:	b29b      	uxth	r3, r3
 800805c:	029b      	lsls	r3, r3, #10
 800805e:	b29b      	uxth	r3, r3
 8008060:	4313      	orrs	r3, r2
 8008062:	b29a      	uxth	r2, r3
 8008064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	e024      	b.n	80080b4 <USB_EPStartXfer+0x8a8>
 800806a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d11c      	bne.n	80080b4 <USB_EPStartXfer+0x8a8>
 800807a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800807e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008088:	b29b      	uxth	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800808e:	4413      	add	r3, r2
 8008090:	643b      	str	r3, [r7, #64]	; 0x40
 8008092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	011a      	lsls	r2, r3, #4
 80080a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a2:	4413      	add	r3, r2
 80080a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	895b      	ldrh	r3, [r3, #10]
 80080c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6959      	ldr	r1, [r3, #20]
 80080d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80080de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80080e2:	6800      	ldr	r0, [r0, #0]
 80080e4:	f001 f881 	bl	80091ea <USB_WritePMA>
 80080e8:	e227      	b.n	800853a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80080ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800811c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008120:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008128:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008152:	b29b      	uxth	r3, r3
 8008154:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008170:	b29b      	uxth	r3, r3
 8008172:	461a      	mov	r2, r3
 8008174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008176:	4413      	add	r3, r2
 8008178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800817a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	011a      	lsls	r2, r3, #4
 8008188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800818a:	4413      	add	r3, r2
 800818c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008190:	65bb      	str	r3, [r7, #88]	; 0x58
 8008192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008196:	b29a      	uxth	r2, r3
 8008198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800819a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800819c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	891b      	ldrh	r3, [r3, #8]
 80081a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6959      	ldr	r1, [r3, #20]
 80081b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80081c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80081c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80081ca:	6800      	ldr	r0, [r0, #0]
 80081cc:	f001 f80d 	bl	80091ea <USB_WritePMA>
 80081d0:	e1b3      	b.n	800853a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80081d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6a1a      	ldr	r2, [r3, #32]
 80081de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80c6 	beq.w	80083a4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	673b      	str	r3, [r7, #112]	; 0x70
 8008224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d177      	bne.n	8008324 <USB_EPStartXfer+0xb18>
 8008234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800824e:	b29b      	uxth	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008254:	4413      	add	r3, r2
 8008256:	66bb      	str	r3, [r7, #104]	; 0x68
 8008258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	011a      	lsls	r2, r3, #4
 8008266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008268:	4413      	add	r3, r2
 800826a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800826e:	667b      	str	r3, [r7, #100]	; 0x64
 8008270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800827a:	b29a      	uxth	r2, r3
 800827c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008284:	2b3e      	cmp	r3, #62	; 0x3e
 8008286:	d921      	bls.n	80082cc <USB_EPStartXfer+0xac0>
 8008288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008296:	f003 031f 	and.w	r3, r3, #31
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <USB_EPStartXfer+0xa9c>
 800829e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80082a2:	3b01      	subs	r3, #1
 80082a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80082a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	029b      	lsls	r3, r3, #10
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	4313      	orrs	r3, r2
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082c8:	801a      	strh	r2, [r3, #0]
 80082ca:	e050      	b.n	800836e <USB_EPStartXfer+0xb62>
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <USB_EPStartXfer+0xade>
 80082d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082e6:	801a      	strh	r2, [r3, #0]
 80082e8:	e041      	b.n	800836e <USB_EPStartXfer+0xb62>
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ee:	085b      	lsrs	r3, r3, #1
 80082f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80082f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d004      	beq.n	800830a <USB_EPStartXfer+0xafe>
 8008300:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008304:	3301      	adds	r3, #1
 8008306:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800830a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29a      	uxth	r2, r3
 8008310:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008314:	b29b      	uxth	r3, r3
 8008316:	029b      	lsls	r3, r3, #10
 8008318:	b29b      	uxth	r3, r3
 800831a:	4313      	orrs	r3, r2
 800831c:	b29a      	uxth	r2, r3
 800831e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008320:	801a      	strh	r2, [r3, #0]
 8008322:	e024      	b.n	800836e <USB_EPStartXfer+0xb62>
 8008324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d11c      	bne.n	800836e <USB_EPStartXfer+0xb62>
 8008334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008342:	b29b      	uxth	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008348:	4413      	add	r3, r2
 800834a:	673b      	str	r3, [r7, #112]	; 0x70
 800834c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	011a      	lsls	r2, r3, #4
 800835a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800835c:	4413      	add	r3, r2
 800835e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008368:	b29a      	uxth	r2, r3
 800836a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800836c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800836e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	895b      	ldrh	r3, [r3, #10]
 800837a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800837e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6959      	ldr	r1, [r3, #20]
 800838a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838e:	b29b      	uxth	r3, r3
 8008390:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008394:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008398:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800839c:	6800      	ldr	r0, [r0, #0]
 800839e:	f000 ff24 	bl	80091ea <USB_WritePMA>
 80083a2:	e0ca      	b.n	800853a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	785b      	ldrb	r3, [r3, #1]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d177      	bne.n	80084a4 <USB_EPStartXfer+0xc98>
 80083b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083d4:	4413      	add	r3, r2
 80083d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	011a      	lsls	r2, r3, #4
 80083e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083e8:	4413      	add	r3, r2
 80083ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80083f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083fe:	801a      	strh	r2, [r3, #0]
 8008400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008404:	2b3e      	cmp	r3, #62	; 0x3e
 8008406:	d921      	bls.n	800844c <USB_EPStartXfer+0xc40>
 8008408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840c:	095b      	lsrs	r3, r3, #5
 800840e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008416:	f003 031f 	and.w	r3, r3, #31
 800841a:	2b00      	cmp	r3, #0
 800841c:	d104      	bne.n	8008428 <USB_EPStartXfer+0xc1c>
 800841e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008422:	3b01      	subs	r3, #1
 8008424:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29a      	uxth	r2, r3
 800842e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008432:	b29b      	uxth	r3, r3
 8008434:	029b      	lsls	r3, r3, #10
 8008436:	b29b      	uxth	r3, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	b29b      	uxth	r3, r3
 800843c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008444:	b29a      	uxth	r2, r3
 8008446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008448:	801a      	strh	r2, [r3, #0]
 800844a:	e05c      	b.n	8008506 <USB_EPStartXfer+0xcfa>
 800844c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10a      	bne.n	800846a <USB_EPStartXfer+0xc5e>
 8008454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008462:	b29a      	uxth	r2, r3
 8008464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008466:	801a      	strh	r2, [r3, #0]
 8008468:	e04d      	b.n	8008506 <USB_EPStartXfer+0xcfa>
 800846a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846e:	085b      	lsrs	r3, r3, #1
 8008470:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d004      	beq.n	800848a <USB_EPStartXfer+0xc7e>
 8008480:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008484:	3301      	adds	r3, #1
 8008486:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800848a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29a      	uxth	r2, r3
 8008490:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008494:	b29b      	uxth	r3, r3
 8008496:	029b      	lsls	r3, r3, #10
 8008498:	b29b      	uxth	r3, r3
 800849a:	4313      	orrs	r3, r2
 800849c:	b29a      	uxth	r2, r3
 800849e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084a0:	801a      	strh	r2, [r3, #0]
 80084a2:	e030      	b.n	8008506 <USB_EPStartXfer+0xcfa>
 80084a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d128      	bne.n	8008506 <USB_EPStartXfer+0xcfa>
 80084b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	461a      	mov	r2, r3
 80084d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084d8:	4413      	add	r3, r2
 80084da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	011a      	lsls	r2, r3, #4
 80084ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084f0:	4413      	add	r3, r2
 80084f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fe:	b29a      	uxth	r2, r3
 8008500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008504:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	891b      	ldrh	r3, [r3, #8]
 8008512:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6959      	ldr	r1, [r3, #20]
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008526:	b29b      	uxth	r3, r3
 8008528:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800852c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008530:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008534:	6800      	ldr	r0, [r0, #0]
 8008536:	f000 fe58 	bl	80091ea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800853a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008560:	817b      	strh	r3, [r7, #10]
 8008562:	897b      	ldrh	r3, [r7, #10]
 8008564:	f083 0310 	eor.w	r3, r3, #16
 8008568:	817b      	strh	r3, [r7, #10]
 800856a:	897b      	ldrh	r3, [r7, #10]
 800856c:	f083 0320 	eor.w	r3, r3, #32
 8008570:	817b      	strh	r3, [r7, #10]
 8008572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	441a      	add	r2, r3
 800858c:	897b      	ldrh	r3, [r7, #10]
 800858e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800859a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800859e:	b29b      	uxth	r3, r3
 80085a0:	8013      	strh	r3, [r2, #0]
 80085a2:	f000 bcde 	b.w	8008f62 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80085a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	7b1b      	ldrb	r3, [r3, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f040 80bb 	bne.w	800872e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80085b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	699a      	ldr	r2, [r3, #24]
 80085c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d917      	bls.n	8008604 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80085d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80085e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f4:	1ad2      	subs	r2, r2, r3
 80085f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	619a      	str	r2, [r3, #24]
 8008602:	e00e      	b.n	8008622 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2200      	movs	r2, #0
 8008620:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008646:	4413      	add	r3, r2
 8008648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800864c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	011a      	lsls	r2, r3, #4
 800865a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800865e:	4413      	add	r3, r2
 8008660:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	b29b      	uxth	r3, r3
 8008670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008674:	b29a      	uxth	r2, r3
 8008676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008680:	2b3e      	cmp	r3, #62	; 0x3e
 8008682:	d924      	bls.n	80086ce <USB_EPStartXfer+0xec2>
 8008684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	2b00      	cmp	r3, #0
 8008698:	d104      	bne.n	80086a4 <USB_EPStartXfer+0xe98>
 800869a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800869e:	3b01      	subs	r3, #1
 80086a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	029b      	lsls	r3, r3, #10
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	4313      	orrs	r3, r2
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086c8:	801a      	strh	r2, [r3, #0]
 80086ca:	f000 bc10 	b.w	8008eee <USB_EPStartXfer+0x16e2>
 80086ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10c      	bne.n	80086f0 <USB_EPStartXfer+0xee4>
 80086d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ec:	801a      	strh	r2, [r3, #0]
 80086ee:	e3fe      	b.n	8008eee <USB_EPStartXfer+0x16e2>
 80086f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <USB_EPStartXfer+0xf04>
 8008706:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800870a:	3301      	adds	r3, #1
 800870c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b29a      	uxth	r2, r3
 8008718:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800871c:	b29b      	uxth	r3, r3
 800871e:	029b      	lsls	r3, r3, #10
 8008720:	b29b      	uxth	r3, r3
 8008722:	4313      	orrs	r3, r2
 8008724:	b29a      	uxth	r2, r3
 8008726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	e3df      	b.n	8008eee <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800872e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	78db      	ldrb	r3, [r3, #3]
 800873a:	2b02      	cmp	r3, #2
 800873c:	f040 8218 	bne.w	8008b70 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f040 809d 	bne.w	800888c <USB_EPStartXfer+0x1080>
 8008752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876e:	b29b      	uxth	r3, r3
 8008770:	461a      	mov	r2, r3
 8008772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008776:	4413      	add	r3, r2
 8008778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800877c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	011a      	lsls	r2, r3, #4
 800878a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800878e:	4413      	add	r3, r2
 8008790:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087aa:	801a      	strh	r2, [r3, #0]
 80087ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b3e      	cmp	r3, #62	; 0x3e
 80087ba:	d92b      	bls.n	8008814 <USB_EPStartXfer+0x1008>
 80087bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 031f 	and.w	r3, r3, #31
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d104      	bne.n	80087ec <USB_EPStartXfer+0xfe0>
 80087e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e6:	3b01      	subs	r3, #1
 80087e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	029b      	lsls	r3, r3, #10
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	4313      	orrs	r3, r2
 8008800:	b29b      	uxth	r3, r3
 8008802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800880a:	b29a      	uxth	r2, r3
 800880c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008810:	801a      	strh	r2, [r3, #0]
 8008812:	e070      	b.n	80088f6 <USB_EPStartXfer+0x10ea>
 8008814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10c      	bne.n	800883e <USB_EPStartXfer+0x1032>
 8008824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008834:	b29a      	uxth	r2, r3
 8008836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	e05b      	b.n	80088f6 <USB_EPStartXfer+0x10ea>
 800883e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	085b      	lsrs	r3, r3, #1
 800884c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <USB_EPStartXfer+0x1062>
 8008864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008868:	3301      	adds	r3, #1
 800886a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800886e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29a      	uxth	r2, r3
 8008876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887a:	b29b      	uxth	r3, r3
 800887c:	029b      	lsls	r3, r3, #10
 800887e:	b29b      	uxth	r3, r3
 8008880:	4313      	orrs	r3, r2
 8008882:	b29a      	uxth	r2, r3
 8008884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008888:	801a      	strh	r2, [r3, #0]
 800888a:	e034      	b.n	80088f6 <USB_EPStartXfer+0x10ea>
 800888c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d12c      	bne.n	80088f6 <USB_EPStartXfer+0x10ea>
 800889c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	461a      	mov	r2, r3
 80088bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088c0:	4413      	add	r3, r2
 80088c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	011a      	lsls	r2, r3, #4
 80088d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088d8:	4413      	add	r3, r2
 80088da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088f4:	801a      	strh	r2, [r3, #0]
 80088f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	785b      	ldrb	r3, [r3, #1]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f040 809d 	bne.w	8008a50 <USB_EPStartXfer+0x1244>
 8008916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008932:	b29b      	uxth	r3, r3
 8008934:	461a      	mov	r2, r3
 8008936:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800893a:	4413      	add	r3, r2
 800893c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	011a      	lsls	r2, r3, #4
 800894e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008952:	4413      	add	r3, r2
 8008954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800895c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008968:	b29a      	uxth	r2, r3
 800896a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800896e:	801a      	strh	r2, [r3, #0]
 8008970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b3e      	cmp	r3, #62	; 0x3e
 800897e:	d92b      	bls.n	80089d8 <USB_EPStartXfer+0x11cc>
 8008980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f003 031f 	and.w	r3, r3, #31
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <USB_EPStartXfer+0x11a4>
 80089a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089aa:	3b01      	subs	r3, #1
 80089ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089bc:	b29b      	uxth	r3, r3
 80089be:	029b      	lsls	r3, r3, #10
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	4313      	orrs	r3, r2
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	e069      	b.n	8008aac <USB_EPStartXfer+0x12a0>
 80089d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10c      	bne.n	8008a02 <USB_EPStartXfer+0x11f6>
 80089e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089fe:	801a      	strh	r2, [r3, #0]
 8008a00:	e054      	b.n	8008aac <USB_EPStartXfer+0x12a0>
 8008a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	085b      	lsrs	r3, r3, #1
 8008a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <USB_EPStartXfer+0x1226>
 8008a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	029b      	lsls	r3, r3, #10
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	e02d      	b.n	8008aac <USB_EPStartXfer+0x12a0>
 8008a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	785b      	ldrb	r3, [r3, #1]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d125      	bne.n	8008aac <USB_EPStartXfer+0x12a0>
 8008a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a76:	4413      	add	r3, r2
 8008a78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	011a      	lsls	r2, r3, #4
 8008a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a8e:	4413      	add	r3, r2
 8008a90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008aaa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8218 	beq.w	8008eee <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ade:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d005      	beq.n	8008af6 <USB_EPStartXfer+0x12ea>
 8008aea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10d      	bne.n	8008b12 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008af6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f040 81f5 	bne.w	8008eee <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f040 81ee 	bne.w	8008eee <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b38:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	441a      	add	r2, r3
 8008b56:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	8013      	strh	r3, [r2, #0]
 8008b6e:	e1be      	b.n	8008eee <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	78db      	ldrb	r3, [r3, #3]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	f040 81b4 	bne.w	8008eea <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d917      	bls.n	8008bce <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	699a      	ldr	r2, [r3, #24]
 8008bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bbe:	1ad2      	subs	r2, r2, r3
 8008bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	619a      	str	r2, [r3, #24]
 8008bcc:	e00e      	b.n	8008bec <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2200      	movs	r2, #0
 8008bea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f040 8085 	bne.w	8008d08 <USB_EPStartXfer+0x14fc>
 8008bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c22:	4413      	add	r3, r2
 8008c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	011a      	lsls	r2, r3, #4
 8008c36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c5c:	2b3e      	cmp	r3, #62	; 0x3e
 8008c5e:	d923      	bls.n	8008ca8 <USB_EPStartXfer+0x149c>
 8008c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c6e:	f003 031f 	and.w	r3, r3, #31
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <USB_EPStartXfer+0x1474>
 8008c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	029b      	lsls	r3, r3, #10
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	4313      	orrs	r3, r2
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	e060      	b.n	8008d6a <USB_EPStartXfer+0x155e>
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10c      	bne.n	8008cca <USB_EPStartXfer+0x14be>
 8008cb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	e04f      	b.n	8008d6a <USB_EPStartXfer+0x155e>
 8008cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <USB_EPStartXfer+0x14de>
 8008ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	029b      	lsls	r3, r3, #10
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	e030      	b.n	8008d6a <USB_EPStartXfer+0x155e>
 8008d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	785b      	ldrb	r3, [r3, #1]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d128      	bne.n	8008d6a <USB_EPStartXfer+0x155e>
 8008d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	011a      	lsls	r2, r3, #4
 8008d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d54:	4413      	add	r3, r2
 8008d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008d68:	801a      	strh	r2, [r3, #0]
 8008d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 8085 	bne.w	8008e94 <USB_EPStartXfer+0x1688>
 8008d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008dae:	4413      	add	r3, r2
 8008db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	011a      	lsls	r2, r3, #4
 8008dc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008de2:	801a      	strh	r2, [r3, #0]
 8008de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de8:	2b3e      	cmp	r3, #62	; 0x3e
 8008dea:	d923      	bls.n	8008e34 <USB_EPStartXfer+0x1628>
 8008dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df0:	095b      	lsrs	r3, r3, #5
 8008df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dfa:	f003 031f 	and.w	r3, r3, #31
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d104      	bne.n	8008e0c <USB_EPStartXfer+0x1600>
 8008e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e06:	3b01      	subs	r3, #1
 8008e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	029b      	lsls	r3, r3, #10
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e30:	801a      	strh	r2, [r3, #0]
 8008e32:	e05c      	b.n	8008eee <USB_EPStartXfer+0x16e2>
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10c      	bne.n	8008e56 <USB_EPStartXfer+0x164a>
 8008e3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e52:	801a      	strh	r2, [r3, #0]
 8008e54:	e04b      	b.n	8008eee <USB_EPStartXfer+0x16e2>
 8008e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5a:	085b      	lsrs	r3, r3, #1
 8008e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d004      	beq.n	8008e76 <USB_EPStartXfer+0x166a>
 8008e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e70:	3301      	adds	r3, #1
 8008e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	029b      	lsls	r3, r3, #10
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	e02c      	b.n	8008eee <USB_EPStartXfer+0x16e2>
 8008e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d124      	bne.n	8008eee <USB_EPStartXfer+0x16e2>
 8008ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008eba:	4413      	add	r3, r2
 8008ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	011a      	lsls	r2, r3, #4
 8008ece:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ee6:	801a      	strh	r2, [r3, #0]
 8008ee8:	e001      	b.n	8008eee <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e03a      	b.n	8008f64 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f2c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	441a      	add	r2, r3
 8008f4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	785b      	ldrb	r3, [r3, #1]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d020      	beq.n	8008fc2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f96:	81bb      	strh	r3, [r7, #12]
 8008f98:	89bb      	ldrh	r3, [r7, #12]
 8008f9a:	f083 0310 	eor.w	r3, r3, #16
 8008f9e:	81bb      	strh	r3, [r7, #12]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	89bb      	ldrh	r3, [r7, #12]
 8008fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	8013      	strh	r3, [r2, #0]
 8008fc0:	e01f      	b.n	8009002 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd8:	81fb      	strh	r3, [r7, #14]
 8008fda:	89fb      	ldrh	r3, [r7, #14]
 8008fdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008fe0:	81fb      	strh	r3, [r7, #14]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	441a      	add	r2, r3
 8008fec:	89fb      	ldrh	r3, [r7, #14]
 8008fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr

0800900e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800900e:	b480      	push	{r7}
 8009010:	b087      	sub	sp, #28
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	7b1b      	ldrb	r3, [r3, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f040 809d 	bne.w	800915c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d04c      	beq.n	80090c4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	823b      	strh	r3, [r7, #16]
 8009038:	8a3b      	ldrh	r3, [r7, #16]
 800903a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	d01b      	beq.n	800907a <USB_EPClearStall+0x6c>
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	b29b      	uxth	r3, r3
 8009050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009058:	81fb      	strh	r3, [r7, #14]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	441a      	add	r2, r3
 8009064:	89fb      	ldrh	r3, [r7, #14]
 8009066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800906a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800906e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009072:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009076:	b29b      	uxth	r3, r3
 8009078:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	78db      	ldrb	r3, [r3, #3]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d06c      	beq.n	800915c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009098:	81bb      	strh	r3, [r7, #12]
 800909a:	89bb      	ldrh	r3, [r7, #12]
 800909c:	f083 0320 	eor.w	r3, r3, #32
 80090a0:	81bb      	strh	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	441a      	add	r2, r3
 80090ac:	89bb      	ldrh	r3, [r7, #12]
 80090ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090be:	b29b      	uxth	r3, r3
 80090c0:	8013      	strh	r3, [r2, #0]
 80090c2:	e04b      	b.n	800915c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	82fb      	strh	r3, [r7, #22]
 80090d2:	8afb      	ldrh	r3, [r7, #22]
 80090d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01b      	beq.n	8009114 <USB_EPClearStall+0x106>
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f2:	82bb      	strh	r3, [r7, #20]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	441a      	add	r2, r3
 80090fe:	8abb      	ldrh	r3, [r7, #20]
 8009100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800910c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009110:	b29b      	uxth	r3, r3
 8009112:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	b29b      	uxth	r3, r3
 8009122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912a:	827b      	strh	r3, [r7, #18]
 800912c:	8a7b      	ldrh	r3, [r7, #18]
 800912e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009132:	827b      	strh	r3, [r7, #18]
 8009134:	8a7b      	ldrh	r3, [r7, #18]
 8009136:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800913a:	827b      	strh	r3, [r7, #18]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	441a      	add	r2, r3
 8009146:	8a7b      	ldrh	r3, [r7, #18]
 8009148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800914c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009158:	b29b      	uxth	r3, r3
 800915a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr

08009168 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d103      	bne.n	8009182 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2280      	movs	r2, #128	; 0x80
 800917e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	bc80      	pop	{r7}
 800918c:	4770      	bx	lr

0800918e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	bc80      	pop	{r7}
 80091a0:	4770      	bx	lr

080091a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bc80      	pop	{r7}
 80091b4:	4770      	bx	lr

080091b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80091c8:	68fb      	ldr	r3, [r7, #12]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bc80      	pop	{r7}
 80091d2:	4770      	bx	lr

080091d4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bc80      	pop	{r7}
 80091e8:	4770      	bx	lr

080091ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b08b      	sub	sp, #44	; 0x2c
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	4611      	mov	r1, r2
 80091f6:	461a      	mov	r2, r3
 80091f8:	460b      	mov	r3, r1
 80091fa:	80fb      	strh	r3, [r7, #6]
 80091fc:	4613      	mov	r3, r2
 80091fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009200:	88bb      	ldrh	r3, [r7, #4]
 8009202:	3301      	adds	r3, #1
 8009204:	085b      	lsrs	r3, r3, #1
 8009206:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009210:	88fb      	ldrh	r3, [r7, #6]
 8009212:	005a      	lsls	r2, r3, #1
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800921c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
 8009222:	e01e      	b.n	8009262 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	3301      	adds	r3, #1
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	021b      	lsls	r3, r3, #8
 8009232:	b21a      	sxth	r2, r3
 8009234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009238:	4313      	orrs	r3, r2
 800923a:	b21b      	sxth	r3, r3
 800923c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	8a7a      	ldrh	r2, [r7, #18]
 8009242:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	3302      	adds	r3, #2
 8009248:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	3302      	adds	r3, #2
 800924e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	3301      	adds	r3, #1
 8009254:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	3301      	adds	r3, #1
 800925a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	3b01      	subs	r3, #1
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1dd      	bne.n	8009224 <USB_WritePMA+0x3a>
  }
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	372c      	adds	r7, #44	; 0x2c
 800926e:	46bd      	mov	sp, r7
 8009270:	bc80      	pop	{r7}
 8009272:	4770      	bx	lr

08009274 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009274:	b480      	push	{r7}
 8009276:	b08b      	sub	sp, #44	; 0x2c
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4611      	mov	r1, r2
 8009280:	461a      	mov	r2, r3
 8009282:	460b      	mov	r3, r1
 8009284:	80fb      	strh	r3, [r7, #6]
 8009286:	4613      	mov	r3, r2
 8009288:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800928a:	88bb      	ldrh	r3, [r7, #4]
 800928c:	085b      	lsrs	r3, r3, #1
 800928e:	b29b      	uxth	r3, r3
 8009290:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	005a      	lsls	r2, r3, #1
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	627b      	str	r3, [r7, #36]	; 0x24
 80092ac:	e01b      	b.n	80092e6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	3302      	adds	r3, #2
 80092ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	3301      	adds	r3, #1
 80092c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	0a1b      	lsrs	r3, r3, #8
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	3301      	adds	r3, #1
 80092d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	3302      	adds	r3, #2
 80092de:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	3b01      	subs	r3, #1
 80092e4:	627b      	str	r3, [r7, #36]	; 0x24
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e0      	bne.n	80092ae <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80092ec:	88bb      	ldrh	r3, [r7, #4]
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d007      	beq.n	8009308 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	b2da      	uxtb	r2, r3
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	701a      	strb	r2, [r3, #0]
  }
}
 8009308:	bf00      	nop
 800930a:	372c      	adds	r7, #44	; 0x2c
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr

08009312 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	7c1b      	ldrb	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d115      	bne.n	8009356 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800932a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800932e:	2202      	movs	r2, #2
 8009330:	2181      	movs	r1, #129	; 0x81
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 fe87 	bl	800b046 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800933e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009342:	2202      	movs	r2, #2
 8009344:	2101      	movs	r1, #1
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 fe7d 	bl	800b046 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009354:	e012      	b.n	800937c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009356:	2340      	movs	r3, #64	; 0x40
 8009358:	2202      	movs	r2, #2
 800935a:	2181      	movs	r1, #129	; 0x81
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 fe72 	bl	800b046 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009368:	2340      	movs	r3, #64	; 0x40
 800936a:	2202      	movs	r2, #2
 800936c:	2101      	movs	r1, #1
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f001 fe69 	bl	800b046 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800937c:	2308      	movs	r3, #8
 800937e:	2203      	movs	r2, #3
 8009380:	2182      	movs	r1, #130	; 0x82
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 fe5f 	bl	800b046 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800938e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009392:	f001 ff7f 	bl	800b294 <USBD_static_malloc>
 8009396:	4602      	mov	r2, r0
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d102      	bne.n	80093ae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80093a8:	2301      	movs	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]
 80093ac:	e026      	b.n	80093fc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	7c1b      	ldrb	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d109      	bne.n	80093ec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093e2:	2101      	movs	r1, #1
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 ff1f 	bl	800b228 <USBD_LL_PrepareReceive>
 80093ea:	e007      	b.n	80093fc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093f2:	2340      	movs	r3, #64	; 0x40
 80093f4:	2101      	movs	r1, #1
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 ff16 	bl	800b228 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009416:	2181      	movs	r1, #129	; 0x81
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 fe3a 	bl	800b092 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009424:	2101      	movs	r1, #1
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fe33 	bl	800b092 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009434:	2182      	movs	r1, #130	; 0x82
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f001 fe2b 	bl	800b092 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00e      	beq.n	800946a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945c:	4618      	mov	r0, r3
 800945e:	f001 ff25 	bl	800b2ac <USBD_static_free>
    pdev->pClassData = NULL;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009484:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800949a:	2b00      	cmp	r3, #0
 800949c:	d039      	beq.n	8009512 <USBD_CDC_Setup+0x9e>
 800949e:	2b20      	cmp	r3, #32
 80094a0:	d17f      	bne.n	80095a2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	88db      	ldrh	r3, [r3, #6]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d029      	beq.n	80094fe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	b25b      	sxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	da11      	bge.n	80094d8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80094c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	88d2      	ldrh	r2, [r2, #6]
 80094c6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094c8:	6939      	ldr	r1, [r7, #16]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	88db      	ldrh	r3, [r3, #6]
 80094ce:	461a      	mov	r2, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 fa0a 	bl	800a8ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80094d6:	e06b      	b.n	80095b0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	785a      	ldrb	r2, [r3, #1]
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	88db      	ldrh	r3, [r3, #6]
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094ee:	6939      	ldr	r1, [r7, #16]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	88db      	ldrh	r3, [r3, #6]
 80094f4:	461a      	mov	r2, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f001 fa25 	bl	800a946 <USBD_CtlPrepareRx>
      break;
 80094fc:	e058      	b.n	80095b0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	7850      	ldrb	r0, [r2, #1]
 800950a:	2200      	movs	r2, #0
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	4798      	blx	r3
      break;
 8009510:	e04e      	b.n	80095b0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	785b      	ldrb	r3, [r3, #1]
 8009516:	2b0b      	cmp	r3, #11
 8009518:	d02e      	beq.n	8009578 <USBD_CDC_Setup+0x104>
 800951a:	2b0b      	cmp	r3, #11
 800951c:	dc38      	bgt.n	8009590 <USBD_CDC_Setup+0x11c>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <USBD_CDC_Setup+0xb4>
 8009522:	2b0a      	cmp	r3, #10
 8009524:	d014      	beq.n	8009550 <USBD_CDC_Setup+0xdc>
 8009526:	e033      	b.n	8009590 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952e:	2b03      	cmp	r3, #3
 8009530:	d107      	bne.n	8009542 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009532:	f107 030c 	add.w	r3, r7, #12
 8009536:	2202      	movs	r2, #2
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 f9d5 	bl	800a8ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009540:	e02e      	b.n	80095a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 f966 	bl	800a816 <USBD_CtlError>
            ret = USBD_FAIL;
 800954a:	2302      	movs	r3, #2
 800954c:	75fb      	strb	r3, [r7, #23]
          break;
 800954e:	e027      	b.n	80095a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009556:	2b03      	cmp	r3, #3
 8009558:	d107      	bne.n	800956a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800955a:	f107 030f 	add.w	r3, r7, #15
 800955e:	2201      	movs	r2, #1
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 f9c1 	bl	800a8ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009568:	e01a      	b.n	80095a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 f952 	bl	800a816 <USBD_CtlError>
            ret = USBD_FAIL;
 8009572:	2302      	movs	r3, #2
 8009574:	75fb      	strb	r3, [r7, #23]
          break;
 8009576:	e013      	b.n	80095a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800957e:	2b03      	cmp	r3, #3
 8009580:	d00d      	beq.n	800959e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 f946 	bl	800a816 <USBD_CtlError>
            ret = USBD_FAIL;
 800958a:	2302      	movs	r3, #2
 800958c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800958e:	e006      	b.n	800959e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 f93f 	bl	800a816 <USBD_CtlError>
          ret = USBD_FAIL;
 8009598:	2302      	movs	r3, #2
 800959a:	75fb      	strb	r3, [r7, #23]
          break;
 800959c:	e000      	b.n	80095a0 <USBD_CDC_Setup+0x12c>
          break;
 800959e:	bf00      	nop
      }
      break;
 80095a0:	e006      	b.n	80095b0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 f936 	bl	800a816 <USBD_CtlError>
      ret = USBD_FAIL;
 80095aa:	2302      	movs	r3, #2
 80095ac:	75fb      	strb	r3, [r7, #23]
      break;
 80095ae:	bf00      	nop
  }

  return ret;
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d03a      	beq.n	8009656 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	4613      	mov	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	440b      	add	r3, r1
 80095ee:	331c      	adds	r3, #28
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d029      	beq.n	800964a <USBD_CDC_DataIn+0x90>
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	331c      	adds	r3, #28
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	78f9      	ldrb	r1, [r7, #3]
 800960a:	68b8      	ldr	r0, [r7, #8]
 800960c:	460b      	mov	r3, r1
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	4403      	add	r3, r0
 8009616:	3338      	adds	r3, #56	; 0x38
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	fbb2 f1f3 	udiv	r1, r2, r3
 800961e:	fb01 f303 	mul.w	r3, r1, r3
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d110      	bne.n	800964a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009628:	78fa      	ldrb	r2, [r7, #3]
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	331c      	adds	r3, #28
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800963c:	78f9      	ldrb	r1, [r7, #3]
 800963e:	2300      	movs	r3, #0
 8009640:	2200      	movs	r2, #0
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 fdcd 	bl	800b1e2 <USBD_LL_Transmit>
 8009648:	e003      	b.n	8009652 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	e000      	b.n	8009658 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009656:	2302      	movs	r3, #2
  }
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009672:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009674:	78fb      	ldrb	r3, [r7, #3]
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 fdf8 	bl	800b26e <USBD_LL_GetRxDataSize>
 800967e:	4602      	mov	r2, r0
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00d      	beq.n	80096ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80096a4:	4611      	mov	r1, r2
 80096a6:	4798      	blx	r3

    return USBD_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	e000      	b.n	80096ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80096ac:	2302      	movs	r3, #2
  }
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d015      	beq.n	80096fc <USBD_CDC_EP0_RxReady+0x46>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80096d6:	2bff      	cmp	r3, #255	; 0xff
 80096d8:	d010      	beq.n	80096fc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80096e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096f0:	b292      	uxth	r2, r2
 80096f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	22ff      	movs	r2, #255	; 0xff
 80096f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
	...

08009708 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2243      	movs	r2, #67	; 0x43
 8009714:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009716:	4b03      	ldr	r3, [pc, #12]	; (8009724 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	bc80      	pop	{r7}
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	200000c4 	.word	0x200000c4

08009728 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2243      	movs	r2, #67	; 0x43
 8009734:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009736:	4b03      	ldr	r3, [pc, #12]	; (8009744 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	bc80      	pop	{r7}
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20000080 	.word	0x20000080

08009748 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2243      	movs	r2, #67	; 0x43
 8009754:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009756:	4b03      	ldr	r3, [pc, #12]	; (8009764 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	bc80      	pop	{r7}
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	20000108 	.word	0x20000108

08009768 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	220a      	movs	r2, #10
 8009774:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009776:	4b03      	ldr	r3, [pc, #12]	; (8009784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	bc80      	pop	{r7}
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	2000003c 	.word	0x2000003c

08009788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009792:	2302      	movs	r3, #2
 8009794:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bc80      	pop	{r7}
 80097b2:	4770      	bx	lr

080097b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80097d2:	88fa      	ldrh	r2, [r7, #6]
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	371c      	adds	r7, #28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bc80      	pop	{r7}
 80097e4:	4770      	bx	lr

080097e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b085      	sub	sp, #20
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr

0800980c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800981a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009822:	2b00      	cmp	r3, #0
 8009824:	d01c      	beq.n	8009860 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800982c:	2b00      	cmp	r3, #0
 800982e:	d115      	bne.n	800985c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2201      	movs	r2, #1
 8009834:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800984e:	b29b      	uxth	r3, r3
 8009850:	2181      	movs	r1, #129	; 0x81
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 fcc5 	bl	800b1e2 <USBD_LL_Transmit>

      return USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	e002      	b.n	8009862 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800985c:	2301      	movs	r3, #1
 800985e:	e000      	b.n	8009862 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009860:	2302      	movs	r3, #2
  }
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009878:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009880:	2b00      	cmp	r3, #0
 8009882:	d017      	beq.n	80098b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	7c1b      	ldrb	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009896:	2101      	movs	r1, #1
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f001 fcc5 	bl	800b228 <USBD_LL_PrepareReceive>
 800989e:	e007      	b.n	80098b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098a6:	2340      	movs	r3, #64	; 0x40
 80098a8:	2101      	movs	r1, #1
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 fcbc 	bl	800b228 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e000      	b.n	80098b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80098b4:	2302      	movs	r3, #2
  }
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	4613      	mov	r3, r2
 80098ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80098d2:	2302      	movs	r3, #2
 80098d4:	e01a      	b.n	800990c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	79fa      	ldrb	r2, [r7, #7]
 8009902:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f001 fb29 	bl	800af5c <USBD_LL_Init>

  return USBD_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d006      	beq.n	8009936 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
 8009934:	e001      	b.n	800993a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009936:	2302      	movs	r3, #2
 8009938:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	bc80      	pop	{r7}
 8009944:	4770      	bx	lr

08009946 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f001 fb5e 	bl	800b010 <USBD_LL_Start>

  return USBD_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800995e:	b480      	push	{r7}
 8009960:	b083      	sub	sp, #12
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	bc80      	pop	{r7}
 8009970:	4770      	bx	lr

08009972 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800997e:	2302      	movs	r3, #2
 8009980:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00c      	beq.n	80099a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	78fa      	ldrb	r2, [r7, #3]
 8009996:	4611      	mov	r1, r2
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	4798      	blx	r3
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	78fa      	ldrb	r2, [r7, #3]
 80099c6:	4611      	mov	r1, r2
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	4798      	blx	r3

  return USBD_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fed8 	bl	800a79e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80099fc:	461a      	mov	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a0a:	f003 031f 	and.w	r3, r3, #31
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d016      	beq.n	8009a40 <USBD_LL_SetupStage+0x6a>
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d81c      	bhi.n	8009a50 <USBD_LL_SetupStage+0x7a>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <USBD_LL_SetupStage+0x4a>
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d008      	beq.n	8009a30 <USBD_LL_SetupStage+0x5a>
 8009a1e:	e017      	b.n	8009a50 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f9cb 	bl	8009dc4 <USBD_StdDevReq>
      break;
 8009a2e:	e01a      	b.n	8009a66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fa2d 	bl	8009e98 <USBD_StdItfReq>
      break;
 8009a3e:	e012      	b.n	8009a66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa6d 	bl	8009f28 <USBD_StdEPReq>
      break;
 8009a4e:	e00a      	b.n	8009a66 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fb36 	bl	800b0d0 <USBD_LL_StallEP>
      break;
 8009a64:	bf00      	nop
  }

  return USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a7e:	7afb      	ldrb	r3, [r7, #11]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d14b      	bne.n	8009b1c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d134      	bne.n	8009b00 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d919      	bls.n	8009ad6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	1ad2      	subs	r2, r2, r3
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	68da      	ldr	r2, [r3, #12]
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d203      	bcs.n	8009ac4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	e002      	b.n	8009aca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	461a      	mov	r2, r3
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 ff57 	bl	800a982 <USBD_CtlContinueRx>
 8009ad4:	e038      	b.n	8009b48 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00a      	beq.n	8009af8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d105      	bne.n	8009af8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f000 ff54 	bl	800a9a6 <USBD_CtlSendStatus>
 8009afe:	e023      	b.n	8009b48 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	d11e      	bne.n	8009b48 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009b12:	2100      	movs	r1, #0
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f001 fadb 	bl	800b0d0 <USBD_LL_StallEP>
 8009b1a:	e015      	b.n	8009b48 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00d      	beq.n	8009b44 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d108      	bne.n	8009b44 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	7afa      	ldrb	r2, [r7, #11]
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	4798      	blx	r3
 8009b42:	e001      	b.n	8009b48 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b44:	2302      	movs	r3, #2
 8009b46:	e000      	b.n	8009b4a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	607a      	str	r2, [r7, #4]
 8009b5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d17f      	bne.n	8009c66 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3314      	adds	r3, #20
 8009b6a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d15c      	bne.n	8009c30 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d915      	bls.n	8009bae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	68da      	ldr	r2, [r3, #12]
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	1ad2      	subs	r2, r2, r3
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	461a      	mov	r2, r3
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 fec1 	bl	800a922 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f001 fb3e 	bl	800b228 <USBD_LL_PrepareReceive>
 8009bac:	e04e      	b.n	8009c4c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	6912      	ldr	r2, [r2, #16]
 8009bb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bba:	fb01 f202 	mul.w	r2, r1, r2
 8009bbe:	1a9b      	subs	r3, r3, r2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d11c      	bne.n	8009bfe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d316      	bcc.n	8009bfe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d20f      	bcs.n	8009bfe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009bde:	2200      	movs	r2, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 fe9d 	bl	800a922 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f001 fb16 	bl	800b228 <USBD_LL_PrepareReceive>
 8009bfc:	e026      	b.n	8009c4c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d105      	bne.n	8009c20 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009c20:	2180      	movs	r1, #128	; 0x80
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f001 fa54 	bl	800b0d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 fecf 	bl	800a9cc <USBD_CtlReceiveStatus>
 8009c2e:	e00d      	b.n	8009c4c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c36:	2b04      	cmp	r3, #4
 8009c38:	d004      	beq.n	8009c44 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d103      	bne.n	8009c4c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009c44:	2180      	movs	r1, #128	; 0x80
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f001 fa42 	bl	800b0d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d11d      	bne.n	8009c92 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7ff fe81 	bl	800995e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c64:	e015      	b.n	8009c92 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00d      	beq.n	8009c8e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c78:	2b03      	cmp	r3, #3
 8009c7a:	d108      	bne.n	8009c8e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	7afa      	ldrb	r2, [r7, #11]
 8009c86:	4611      	mov	r1, r2
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	4798      	blx	r3
 8009c8c:	e001      	b.n	8009c92 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e000      	b.n	8009c94 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ca4:	2340      	movs	r3, #64	; 0x40
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2100      	movs	r1, #0
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f001 f9cb 	bl	800b046 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2240      	movs	r2, #64	; 0x40
 8009cbc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cc0:	2340      	movs	r3, #64	; 0x40
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2180      	movs	r1, #128	; 0x80
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 f9bd 	bl	800b046 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2240      	movs	r2, #64	; 0x40
 8009cd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d009      	beq.n	8009d14 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	6852      	ldr	r2, [r2, #4]
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	4611      	mov	r1, r2
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	4798      	blx	r3
  }

  return USBD_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bc80      	pop	{r7}
 8009d3a:	4770      	bx	lr

08009d3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2204      	movs	r2, #4
 8009d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bc80      	pop	{r7}
 8009d62:	4770      	bx	lr

08009d64 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	d105      	bne.n	8009d82 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr

08009d8e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d10b      	bne.n	8009db8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da6:	69db      	ldr	r3, [r3, #28]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dda:	2b40      	cmp	r3, #64	; 0x40
 8009ddc:	d005      	beq.n	8009dea <USBD_StdDevReq+0x26>
 8009dde:	2b40      	cmp	r3, #64	; 0x40
 8009de0:	d84f      	bhi.n	8009e82 <USBD_StdDevReq+0xbe>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d009      	beq.n	8009dfa <USBD_StdDevReq+0x36>
 8009de6:	2b20      	cmp	r3, #32
 8009de8:	d14b      	bne.n	8009e82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	4798      	blx	r3
      break;
 8009df8:	e048      	b.n	8009e8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	785b      	ldrb	r3, [r3, #1]
 8009dfe:	2b09      	cmp	r3, #9
 8009e00:	d839      	bhi.n	8009e76 <USBD_StdDevReq+0xb2>
 8009e02:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <USBD_StdDevReq+0x44>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e59 	.word	0x08009e59
 8009e0c:	08009e6d 	.word	0x08009e6d
 8009e10:	08009e77 	.word	0x08009e77
 8009e14:	08009e63 	.word	0x08009e63
 8009e18:	08009e77 	.word	0x08009e77
 8009e1c:	08009e3b 	.word	0x08009e3b
 8009e20:	08009e31 	.word	0x08009e31
 8009e24:	08009e77 	.word	0x08009e77
 8009e28:	08009e4f 	.word	0x08009e4f
 8009e2c:	08009e45 	.word	0x08009e45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f9dc 	bl	800a1f0 <USBD_GetDescriptor>
          break;
 8009e38:	e022      	b.n	8009e80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fb3f 	bl	800a4c0 <USBD_SetAddress>
          break;
 8009e42:	e01d      	b.n	8009e80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fb7e 	bl	800a548 <USBD_SetConfig>
          break;
 8009e4c:	e018      	b.n	8009e80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fc07 	bl	800a664 <USBD_GetConfig>
          break;
 8009e56:	e013      	b.n	8009e80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fc37 	bl	800a6ce <USBD_GetStatus>
          break;
 8009e60:	e00e      	b.n	8009e80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fc65 	bl	800a734 <USBD_SetFeature>
          break;
 8009e6a:	e009      	b.n	8009e80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fc74 	bl	800a75c <USBD_ClrFeature>
          break;
 8009e74:	e004      	b.n	8009e80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fccc 	bl	800a816 <USBD_CtlError>
          break;
 8009e7e:	bf00      	nop
      }
      break;
 8009e80:	e004      	b.n	8009e8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fcc6 	bl	800a816 <USBD_CtlError>
      break;
 8009e8a:	bf00      	nop
  }

  return ret;
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop

08009e98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009eae:	2b40      	cmp	r3, #64	; 0x40
 8009eb0:	d005      	beq.n	8009ebe <USBD_StdItfReq+0x26>
 8009eb2:	2b40      	cmp	r3, #64	; 0x40
 8009eb4:	d82e      	bhi.n	8009f14 <USBD_StdItfReq+0x7c>
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <USBD_StdItfReq+0x26>
 8009eba:	2b20      	cmp	r3, #32
 8009ebc:	d12a      	bne.n	8009f14 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d81d      	bhi.n	8009f06 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	889b      	ldrh	r3, [r3, #4]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d813      	bhi.n	8009efc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	4798      	blx	r3
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	88db      	ldrh	r3, [r3, #6]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d110      	bne.n	8009f10 <USBD_StdItfReq+0x78>
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10d      	bne.n	8009f10 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fd56 	bl	800a9a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009efa:	e009      	b.n	8009f10 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fc89 	bl	800a816 <USBD_CtlError>
          break;
 8009f04:	e004      	b.n	8009f10 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fc84 	bl	800a816 <USBD_CtlError>
          break;
 8009f0e:	e000      	b.n	8009f12 <USBD_StdItfReq+0x7a>
          break;
 8009f10:	bf00      	nop
      }
      break;
 8009f12:	e004      	b.n	8009f1e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fc7d 	bl	800a816 <USBD_CtlError>
      break;
 8009f1c:	bf00      	nop
  }

  return USBD_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	889b      	ldrh	r3, [r3, #4]
 8009f3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f44:	2b40      	cmp	r3, #64	; 0x40
 8009f46:	d007      	beq.n	8009f58 <USBD_StdEPReq+0x30>
 8009f48:	2b40      	cmp	r3, #64	; 0x40
 8009f4a:	f200 8146 	bhi.w	800a1da <USBD_StdEPReq+0x2b2>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <USBD_StdEPReq+0x40>
 8009f52:	2b20      	cmp	r3, #32
 8009f54:	f040 8141 	bne.w	800a1da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	4798      	blx	r3
      break;
 8009f66:	e13d      	b.n	800a1e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d10a      	bne.n	8009f8a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	4798      	blx	r3
 8009f82:	4603      	mov	r3, r0
 8009f84:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f86:	7bfb      	ldrb	r3, [r7, #15]
 8009f88:	e12d      	b.n	800a1e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	785b      	ldrb	r3, [r3, #1]
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d007      	beq.n	8009fa2 <USBD_StdEPReq+0x7a>
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	f300 811b 	bgt.w	800a1ce <USBD_StdEPReq+0x2a6>
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d072      	beq.n	800a082 <USBD_StdEPReq+0x15a>
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d03a      	beq.n	800a016 <USBD_StdEPReq+0xee>
 8009fa0:	e115      	b.n	800a1ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d002      	beq.n	8009fb2 <USBD_StdEPReq+0x8a>
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d015      	beq.n	8009fdc <USBD_StdEPReq+0xb4>
 8009fb0:	e02b      	b.n	800a00a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fb2:	7bbb      	ldrb	r3, [r7, #14]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00c      	beq.n	8009fd2 <USBD_StdEPReq+0xaa>
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b80      	cmp	r3, #128	; 0x80
 8009fbc:	d009      	beq.n	8009fd2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 f884 	bl	800b0d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009fc8:	2180      	movs	r1, #128	; 0x80
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 f880 	bl	800b0d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fd0:	e020      	b.n	800a014 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fc1e 	bl	800a816 <USBD_CtlError>
              break;
 8009fda:	e01b      	b.n	800a014 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	885b      	ldrh	r3, [r3, #2]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10e      	bne.n	800a002 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00b      	beq.n	800a002 <USBD_StdEPReq+0xda>
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
 8009fec:	2b80      	cmp	r3, #128	; 0x80
 8009fee:	d008      	beq.n	800a002 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	88db      	ldrh	r3, [r3, #6]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d104      	bne.n	800a002 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 f867 	bl	800b0d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fccf 	bl	800a9a6 <USBD_CtlSendStatus>

              break;
 800a008:	e004      	b.n	800a014 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fc02 	bl	800a816 <USBD_CtlError>
              break;
 800a012:	bf00      	nop
          }
          break;
 800a014:	e0e0      	b.n	800a1d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d002      	beq.n	800a026 <USBD_StdEPReq+0xfe>
 800a020:	2b03      	cmp	r3, #3
 800a022:	d015      	beq.n	800a050 <USBD_StdEPReq+0x128>
 800a024:	e026      	b.n	800a074 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00c      	beq.n	800a046 <USBD_StdEPReq+0x11e>
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	2b80      	cmp	r3, #128	; 0x80
 800a030:	d009      	beq.n	800a046 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f001 f84a 	bl	800b0d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a03c:	2180      	movs	r1, #128	; 0x80
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 f846 	bl	800b0d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a044:	e01c      	b.n	800a080 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fbe4 	bl	800a816 <USBD_CtlError>
              break;
 800a04e:	e017      	b.n	800a080 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	885b      	ldrh	r3, [r3, #2]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d112      	bne.n	800a07e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d004      	beq.n	800a06c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a062:	7bbb      	ldrb	r3, [r7, #14]
 800a064:	4619      	mov	r1, r3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f001 f851 	bl	800b10e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fc9a 	bl	800a9a6 <USBD_CtlSendStatus>
              }
              break;
 800a072:	e004      	b.n	800a07e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fbcd 	bl	800a816 <USBD_CtlError>
              break;
 800a07c:	e000      	b.n	800a080 <USBD_StdEPReq+0x158>
              break;
 800a07e:	bf00      	nop
          }
          break;
 800a080:	e0aa      	b.n	800a1d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d002      	beq.n	800a092 <USBD_StdEPReq+0x16a>
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d032      	beq.n	800a0f6 <USBD_StdEPReq+0x1ce>
 800a090:	e097      	b.n	800a1c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a092:	7bbb      	ldrb	r3, [r7, #14]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d007      	beq.n	800a0a8 <USBD_StdEPReq+0x180>
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	2b80      	cmp	r3, #128	; 0x80
 800a09c:	d004      	beq.n	800a0a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fbb8 	bl	800a816 <USBD_CtlError>
                break;
 800a0a6:	e091      	b.n	800a1cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	da0b      	bge.n	800a0c8 <USBD_StdEPReq+0x1a0>
 800a0b0:	7bbb      	ldrb	r3, [r7, #14]
 800a0b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	3310      	adds	r3, #16
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	e00b      	b.n	800a0e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	4413      	add	r3, r2
 800a0de:	3304      	adds	r3, #4
 800a0e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fbfb 	bl	800a8ea <USBD_CtlSendData>
              break;
 800a0f4:	e06a      	b.n	800a1cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	da11      	bge.n	800a122 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
 800a100:	f003 020f 	and.w	r2, r3, #15
 800a104:	6879      	ldr	r1, [r7, #4]
 800a106:	4613      	mov	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	440b      	add	r3, r1
 800a110:	3318      	adds	r3, #24
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d117      	bne.n	800a148 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fb7b 	bl	800a816 <USBD_CtlError>
                  break;
 800a120:	e054      	b.n	800a1cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a122:	7bbb      	ldrb	r3, [r7, #14]
 800a124:	f003 020f 	and.w	r2, r3, #15
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	4613      	mov	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	440b      	add	r3, r1
 800a134:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d104      	bne.n	800a148 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fb68 	bl	800a816 <USBD_CtlError>
                  break;
 800a146:	e041      	b.n	800a1cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	da0b      	bge.n	800a168 <USBD_StdEPReq+0x240>
 800a150:	7bbb      	ldrb	r3, [r7, #14]
 800a152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a156:	4613      	mov	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	3310      	adds	r3, #16
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	4413      	add	r3, r2
 800a164:	3304      	adds	r3, #4
 800a166:	e00b      	b.n	800a180 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a168:	7bbb      	ldrb	r3, [r7, #14]
 800a16a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	4413      	add	r3, r2
 800a17e:	3304      	adds	r3, #4
 800a180:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <USBD_StdEPReq+0x266>
 800a188:	7bbb      	ldrb	r3, [r7, #14]
 800a18a:	2b80      	cmp	r3, #128	; 0x80
 800a18c:	d103      	bne.n	800a196 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2200      	movs	r2, #0
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	e00e      	b.n	800a1b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a196:	7bbb      	ldrb	r3, [r7, #14]
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 ffd6 	bl	800b14c <USBD_LL_IsStallEP>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	e002      	b.n	800a1b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fb95 	bl	800a8ea <USBD_CtlSendData>
              break;
 800a1c0:	e004      	b.n	800a1cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fb26 	bl	800a816 <USBD_CtlError>
              break;
 800a1ca:	bf00      	nop
          }
          break;
 800a1cc:	e004      	b.n	800a1d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fb20 	bl	800a816 <USBD_CtlError>
          break;
 800a1d6:	bf00      	nop
      }
      break;
 800a1d8:	e004      	b.n	800a1e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fb1a 	bl	800a816 <USBD_CtlError>
      break;
 800a1e2:	bf00      	nop
  }

  return ret;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
	...

0800a1f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	885b      	ldrh	r3, [r3, #2]
 800a20a:	0a1b      	lsrs	r3, r3, #8
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	3b01      	subs	r3, #1
 800a210:	2b06      	cmp	r3, #6
 800a212:	f200 8128 	bhi.w	800a466 <USBD_GetDescriptor+0x276>
 800a216:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <USBD_GetDescriptor+0x2c>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a239 	.word	0x0800a239
 800a220:	0800a251 	.word	0x0800a251
 800a224:	0800a291 	.word	0x0800a291
 800a228:	0800a467 	.word	0x0800a467
 800a22c:	0800a467 	.word	0x0800a467
 800a230:	0800a407 	.word	0x0800a407
 800a234:	0800a433 	.word	0x0800a433
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	7c12      	ldrb	r2, [r2, #16]
 800a244:	f107 0108 	add.w	r1, r7, #8
 800a248:	4610      	mov	r0, r2
 800a24a:	4798      	blx	r3
 800a24c:	60f8      	str	r0, [r7, #12]
      break;
 800a24e:	e112      	b.n	800a476 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	7c1b      	ldrb	r3, [r3, #16]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10d      	bne.n	800a274 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	f107 0208 	add.w	r2, r7, #8
 800a264:	4610      	mov	r0, r2
 800a266:	4798      	blx	r3
 800a268:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3301      	adds	r3, #1
 800a26e:	2202      	movs	r2, #2
 800a270:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a272:	e100      	b.n	800a476 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	f107 0208 	add.w	r2, r7, #8
 800a280:	4610      	mov	r0, r2
 800a282:	4798      	blx	r3
 800a284:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3301      	adds	r3, #1
 800a28a:	2202      	movs	r2, #2
 800a28c:	701a      	strb	r2, [r3, #0]
      break;
 800a28e:	e0f2      	b.n	800a476 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	885b      	ldrh	r3, [r3, #2]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b05      	cmp	r3, #5
 800a298:	f200 80ac 	bhi.w	800a3f4 <USBD_GetDescriptor+0x204>
 800a29c:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <USBD_GetDescriptor+0xb4>)
 800a29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a2:	bf00      	nop
 800a2a4:	0800a2bd 	.word	0x0800a2bd
 800a2a8:	0800a2f1 	.word	0x0800a2f1
 800a2ac:	0800a325 	.word	0x0800a325
 800a2b0:	0800a359 	.word	0x0800a359
 800a2b4:	0800a38d 	.word	0x0800a38d
 800a2b8:	0800a3c1 	.word	0x0800a3c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00b      	beq.n	800a2e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	7c12      	ldrb	r2, [r2, #16]
 800a2d4:	f107 0108 	add.w	r1, r7, #8
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4798      	blx	r3
 800a2dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2de:	e091      	b.n	800a404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fa97 	bl	800a816 <USBD_CtlError>
            err++;
 800a2e8:	7afb      	ldrb	r3, [r7, #11]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ee:	e089      	b.n	800a404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00b      	beq.n	800a314 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	7c12      	ldrb	r2, [r2, #16]
 800a308:	f107 0108 	add.w	r1, r7, #8
 800a30c:	4610      	mov	r0, r2
 800a30e:	4798      	blx	r3
 800a310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a312:	e077      	b.n	800a404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fa7d 	bl	800a816 <USBD_CtlError>
            err++;
 800a31c:	7afb      	ldrb	r3, [r7, #11]
 800a31e:	3301      	adds	r3, #1
 800a320:	72fb      	strb	r3, [r7, #11]
          break;
 800a322:	e06f      	b.n	800a404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00b      	beq.n	800a348 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	7c12      	ldrb	r2, [r2, #16]
 800a33c:	f107 0108 	add.w	r1, r7, #8
 800a340:	4610      	mov	r0, r2
 800a342:	4798      	blx	r3
 800a344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a346:	e05d      	b.n	800a404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fa63 	bl	800a816 <USBD_CtlError>
            err++;
 800a350:	7afb      	ldrb	r3, [r7, #11]
 800a352:	3301      	adds	r3, #1
 800a354:	72fb      	strb	r3, [r7, #11]
          break;
 800a356:	e055      	b.n	800a404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00b      	beq.n	800a37c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	7c12      	ldrb	r2, [r2, #16]
 800a370:	f107 0108 	add.w	r1, r7, #8
 800a374:	4610      	mov	r0, r2
 800a376:	4798      	blx	r3
 800a378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a37a:	e043      	b.n	800a404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fa49 	bl	800a816 <USBD_CtlError>
            err++;
 800a384:	7afb      	ldrb	r3, [r7, #11]
 800a386:	3301      	adds	r3, #1
 800a388:	72fb      	strb	r3, [r7, #11]
          break;
 800a38a:	e03b      	b.n	800a404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00b      	beq.n	800a3b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	7c12      	ldrb	r2, [r2, #16]
 800a3a4:	f107 0108 	add.w	r1, r7, #8
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	4798      	blx	r3
 800a3ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ae:	e029      	b.n	800a404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fa2f 	bl	800a816 <USBD_CtlError>
            err++;
 800a3b8:	7afb      	ldrb	r3, [r7, #11]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a3be:	e021      	b.n	800a404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00b      	beq.n	800a3e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	7c12      	ldrb	r2, [r2, #16]
 800a3d8:	f107 0108 	add.w	r1, r7, #8
 800a3dc:	4610      	mov	r0, r2
 800a3de:	4798      	blx	r3
 800a3e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3e2:	e00f      	b.n	800a404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3e4:	6839      	ldr	r1, [r7, #0]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fa15 	bl	800a816 <USBD_CtlError>
            err++;
 800a3ec:	7afb      	ldrb	r3, [r7, #11]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3f2:	e007      	b.n	800a404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fa0d 	bl	800a816 <USBD_CtlError>
          err++;
 800a3fc:	7afb      	ldrb	r3, [r7, #11]
 800a3fe:	3301      	adds	r3, #1
 800a400:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a402:	e038      	b.n	800a476 <USBD_GetDescriptor+0x286>
 800a404:	e037      	b.n	800a476 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	7c1b      	ldrb	r3, [r3, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d109      	bne.n	800a422 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a416:	f107 0208 	add.w	r2, r7, #8
 800a41a:	4610      	mov	r0, r2
 800a41c:	4798      	blx	r3
 800a41e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a420:	e029      	b.n	800a476 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f9f6 	bl	800a816 <USBD_CtlError>
        err++;
 800a42a:	7afb      	ldrb	r3, [r7, #11]
 800a42c:	3301      	adds	r3, #1
 800a42e:	72fb      	strb	r3, [r7, #11]
      break;
 800a430:	e021      	b.n	800a476 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	7c1b      	ldrb	r3, [r3, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10d      	bne.n	800a456 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a442:	f107 0208 	add.w	r2, r7, #8
 800a446:	4610      	mov	r0, r2
 800a448:	4798      	blx	r3
 800a44a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3301      	adds	r3, #1
 800a450:	2207      	movs	r2, #7
 800a452:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a454:	e00f      	b.n	800a476 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f9dc 	bl	800a816 <USBD_CtlError>
        err++;
 800a45e:	7afb      	ldrb	r3, [r7, #11]
 800a460:	3301      	adds	r3, #1
 800a462:	72fb      	strb	r3, [r7, #11]
      break;
 800a464:	e007      	b.n	800a476 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f9d4 	bl	800a816 <USBD_CtlError>
      err++;
 800a46e:	7afb      	ldrb	r3, [r7, #11]
 800a470:	3301      	adds	r3, #1
 800a472:	72fb      	strb	r3, [r7, #11]
      break;
 800a474:	bf00      	nop
  }

  if (err != 0U)
 800a476:	7afb      	ldrb	r3, [r7, #11]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d11c      	bne.n	800a4b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a47c:	893b      	ldrh	r3, [r7, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d011      	beq.n	800a4a6 <USBD_GetDescriptor+0x2b6>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	88db      	ldrh	r3, [r3, #6]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00d      	beq.n	800a4a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	88da      	ldrh	r2, [r3, #6]
 800a48e:	893b      	ldrh	r3, [r7, #8]
 800a490:	4293      	cmp	r3, r2
 800a492:	bf28      	it	cs
 800a494:	4613      	movcs	r3, r2
 800a496:	b29b      	uxth	r3, r3
 800a498:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a49a:	893b      	ldrh	r3, [r7, #8]
 800a49c:	461a      	mov	r2, r3
 800a49e:	68f9      	ldr	r1, [r7, #12]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fa22 	bl	800a8ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	88db      	ldrh	r3, [r3, #6]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d104      	bne.n	800a4b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa79 	bl	800a9a6 <USBD_CtlSendStatus>
 800a4b4:	e000      	b.n	800a4b8 <USBD_GetDescriptor+0x2c8>
    return;
 800a4b6:	bf00      	nop
    }
  }
}
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop

0800a4c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	889b      	ldrh	r3, [r3, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d130      	bne.n	800a534 <USBD_SetAddress+0x74>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	88db      	ldrh	r3, [r3, #6]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d12c      	bne.n	800a534 <USBD_SetAddress+0x74>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	885b      	ldrh	r3, [r3, #2]
 800a4de:	2b7f      	cmp	r3, #127	; 0x7f
 800a4e0:	d828      	bhi.n	800a534 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	885b      	ldrh	r3, [r3, #2]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d104      	bne.n	800a502 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f98b 	bl	800a816 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a500:	e01d      	b.n	800a53e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	7bfa      	ldrb	r2, [r7, #15]
 800a506:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fe48 	bl	800b1a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fa46 	bl	800a9a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d004      	beq.n	800a52a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a528:	e009      	b.n	800a53e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a532:	e004      	b.n	800a53e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f96d 	bl	800a816 <USBD_CtlError>
  }
}
 800a53c:	bf00      	nop
 800a53e:	bf00      	nop
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	885b      	ldrh	r3, [r3, #2]
 800a556:	b2da      	uxtb	r2, r3
 800a558:	4b41      	ldr	r3, [pc, #260]	; (800a660 <USBD_SetConfig+0x118>)
 800a55a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a55c:	4b40      	ldr	r3, [pc, #256]	; (800a660 <USBD_SetConfig+0x118>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d904      	bls.n	800a56e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f955 	bl	800a816 <USBD_CtlError>
 800a56c:	e075      	b.n	800a65a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a574:	2b02      	cmp	r3, #2
 800a576:	d002      	beq.n	800a57e <USBD_SetConfig+0x36>
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d023      	beq.n	800a5c4 <USBD_SetConfig+0x7c>
 800a57c:	e062      	b.n	800a644 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a57e:	4b38      	ldr	r3, [pc, #224]	; (800a660 <USBD_SetConfig+0x118>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d01a      	beq.n	800a5bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a586:	4b36      	ldr	r3, [pc, #216]	; (800a660 <USBD_SetConfig+0x118>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2203      	movs	r2, #3
 800a594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a598:	4b31      	ldr	r3, [pc, #196]	; (800a660 <USBD_SetConfig+0x118>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff f9e7 	bl	8009972 <USBD_SetClassConfig>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d104      	bne.n	800a5b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f932 	bl	800a816 <USBD_CtlError>
            return;
 800a5b2:	e052      	b.n	800a65a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f9f6 	bl	800a9a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5ba:	e04e      	b.n	800a65a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f9f2 	bl	800a9a6 <USBD_CtlSendStatus>
        break;
 800a5c2:	e04a      	b.n	800a65a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a5c4:	4b26      	ldr	r3, [pc, #152]	; (800a660 <USBD_SetConfig+0x118>)
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d112      	bne.n	800a5f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a5d4:	4b22      	ldr	r3, [pc, #136]	; (800a660 <USBD_SetConfig+0x118>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a5de:	4b20      	ldr	r3, [pc, #128]	; (800a660 <USBD_SetConfig+0x118>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff f9e3 	bl	80099b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f9db 	bl	800a9a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5f0:	e033      	b.n	800a65a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a5f2:	4b1b      	ldr	r3, [pc, #108]	; (800a660 <USBD_SetConfig+0x118>)
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d01d      	beq.n	800a63c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	b2db      	uxtb	r3, r3
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff f9d1 	bl	80099b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a60e:	4b14      	ldr	r3, [pc, #80]	; (800a660 <USBD_SetConfig+0x118>)
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a618:	4b11      	ldr	r3, [pc, #68]	; (800a660 <USBD_SetConfig+0x118>)
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff f9a7 	bl	8009972 <USBD_SetClassConfig>
 800a624:	4603      	mov	r3, r0
 800a626:	2b02      	cmp	r3, #2
 800a628:	d104      	bne.n	800a634 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a62a:	6839      	ldr	r1, [r7, #0]
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f8f2 	bl	800a816 <USBD_CtlError>
            return;
 800a632:	e012      	b.n	800a65a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f9b6 	bl	800a9a6 <USBD_CtlSendStatus>
        break;
 800a63a:	e00e      	b.n	800a65a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f9b2 	bl	800a9a6 <USBD_CtlSendStatus>
        break;
 800a642:	e00a      	b.n	800a65a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f8e5 	bl	800a816 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a64c:	4b04      	ldr	r3, [pc, #16]	; (800a660 <USBD_SetConfig+0x118>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff f9ac 	bl	80099b0 <USBD_ClrClassConfig>
        break;
 800a658:	bf00      	nop
    }
  }
}
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20000ba4 	.word	0x20000ba4

0800a664 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	88db      	ldrh	r3, [r3, #6]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d004      	beq.n	800a680 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f8cc 	bl	800a816 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a67e:	e022      	b.n	800a6c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a686:	2b02      	cmp	r3, #2
 800a688:	dc02      	bgt.n	800a690 <USBD_GetConfig+0x2c>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	dc03      	bgt.n	800a696 <USBD_GetConfig+0x32>
 800a68e:	e015      	b.n	800a6bc <USBD_GetConfig+0x58>
 800a690:	2b03      	cmp	r3, #3
 800a692:	d00b      	beq.n	800a6ac <USBD_GetConfig+0x48>
 800a694:	e012      	b.n	800a6bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	3308      	adds	r3, #8
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f920 	bl	800a8ea <USBD_CtlSendData>
        break;
 800a6aa:	e00c      	b.n	800a6c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3304      	adds	r3, #4
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f918 	bl	800a8ea <USBD_CtlSendData>
        break;
 800a6ba:	e004      	b.n	800a6c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f8a9 	bl	800a816 <USBD_CtlError>
        break;
 800a6c4:	bf00      	nop
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d81e      	bhi.n	800a722 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	88db      	ldrh	r3, [r3, #6]
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d004      	beq.n	800a6f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f891 	bl	800a816 <USBD_CtlError>
        break;
 800a6f4:	e01a      	b.n	800a72c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a702:	2b00      	cmp	r3, #0
 800a704:	d005      	beq.n	800a712 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	f043 0202 	orr.w	r2, r3, #2
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	330c      	adds	r3, #12
 800a716:	2202      	movs	r2, #2
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f8e5 	bl	800a8ea <USBD_CtlSendData>
      break;
 800a720:	e004      	b.n	800a72c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f876 	bl	800a816 <USBD_CtlError>
      break;
 800a72a:	bf00      	nop
  }
}
 800a72c:	bf00      	nop
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	885b      	ldrh	r3, [r3, #2]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d106      	bne.n	800a754 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f929 	bl	800a9a6 <USBD_CtlSendStatus>
  }
}
 800a754:	bf00      	nop
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a76c:	3b01      	subs	r3, #1
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d80b      	bhi.n	800a78a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	885b      	ldrh	r3, [r3, #2]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d10c      	bne.n	800a794 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f90f 	bl	800a9a6 <USBD_CtlSendStatus>
      }
      break;
 800a788:	e004      	b.n	800a794 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f842 	bl	800a816 <USBD_CtlError>
      break;
 800a792:	e000      	b.n	800a796 <USBD_ClrFeature+0x3a>
      break;
 800a794:	bf00      	nop
  }
}
 800a796:	bf00      	nop
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781a      	ldrb	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	785a      	ldrb	r2, [r3, #1]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	3302      	adds	r3, #2
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	3303      	adds	r3, #3
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	021b      	lsls	r3, r3, #8
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	4413      	add	r3, r2
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	3305      	adds	r3, #5
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	021b      	lsls	r3, r3, #8
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4413      	add	r3, r2
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	3306      	adds	r3, #6
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	3307      	adds	r3, #7
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	021b      	lsls	r3, r3, #8
 800a802:	b29b      	uxth	r3, r3
 800a804:	4413      	add	r3, r2
 800a806:	b29a      	uxth	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	80da      	strh	r2, [r3, #6]

}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	bc80      	pop	{r7}
 800a814:	4770      	bx	lr

0800a816 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b082      	sub	sp, #8
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a820:	2180      	movs	r1, #128	; 0x80
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fc54 	bl	800b0d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a828:	2100      	movs	r1, #0
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fc50 	bl	800b0d0 <USBD_LL_StallEP>
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d032      	beq.n	800a8b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f834 	bl	800a8bc <USBD_GetLen>
 800a854:	4603      	mov	r3, r0
 800a856:	3301      	adds	r3, #1
 800a858:	b29b      	uxth	r3, r3
 800a85a:	005b      	lsls	r3, r3, #1
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a862:	7dfb      	ldrb	r3, [r7, #23]
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	75fa      	strb	r2, [r7, #23]
 800a868:	461a      	mov	r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4413      	add	r3, r2
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	7812      	ldrb	r2, [r2, #0]
 800a872:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	75fa      	strb	r2, [r7, #23]
 800a87a:	461a      	mov	r2, r3
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	4413      	add	r3, r2
 800a880:	2203      	movs	r2, #3
 800a882:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a884:	e012      	b.n	800a8ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	1c5a      	adds	r2, r3, #1
 800a88a:	60fa      	str	r2, [r7, #12]
 800a88c:	7dfa      	ldrb	r2, [r7, #23]
 800a88e:	1c51      	adds	r1, r2, #1
 800a890:	75f9      	strb	r1, [r7, #23]
 800a892:	4611      	mov	r1, r2
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	440a      	add	r2, r1
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	75fa      	strb	r2, [r7, #23]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1e8      	bne.n	800a886 <USBD_GetString+0x4e>
    }
  }
}
 800a8b4:	bf00      	nop
 800a8b6:	3718      	adds	r7, #24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a8c8:	e005      	b.n	800a8d6 <USBD_GetLen+0x1a>
  {
    len++;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1f5      	bne.n	800a8ca <USBD_GetLen+0xe>
  }

  return len;
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bc80      	pop	{r7}
 800a8e8:	4770      	bx	lr

0800a8ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	60b9      	str	r1, [r7, #8]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a900:	88fa      	ldrh	r2, [r7, #6]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a906:	88fa      	ldrh	r2, [r7, #6]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a90c:	88fb      	ldrh	r3, [r7, #6]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	2100      	movs	r1, #0
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f000 fc65 	bl	800b1e2 <USBD_LL_Transmit>

  return USBD_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	60f8      	str	r0, [r7, #12]
 800a92a:	60b9      	str	r1, [r7, #8]
 800a92c:	4613      	mov	r3, r2
 800a92e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a930:	88fb      	ldrh	r3, [r7, #6]
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	2100      	movs	r1, #0
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 fc53 	bl	800b1e2 <USBD_LL_Transmit>

  return USBD_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	4613      	mov	r3, r2
 800a952:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2203      	movs	r2, #3
 800a958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a95c:	88fa      	ldrh	r2, [r7, #6]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a964:	88fa      	ldrh	r2, [r7, #6]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a96c:	88fb      	ldrh	r3, [r7, #6]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	2100      	movs	r1, #0
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 fc58 	bl	800b228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	4613      	mov	r3, r2
 800a98e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a990:	88fb      	ldrh	r3, [r7, #6]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	2100      	movs	r1, #0
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 fc46 	bl	800b228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2204      	movs	r2, #4
 800a9b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fc10 	bl	800b1e2 <USBD_LL_Transmit>

  return USBD_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2205      	movs	r2, #5
 800a9d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9dc:	2300      	movs	r3, #0
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fc20 	bl	800b228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4912      	ldr	r1, [pc, #72]	; (800aa44 <MX_USB_DEVICE_Init+0x50>)
 800a9fc:	4812      	ldr	r0, [pc, #72]	; (800aa48 <MX_USB_DEVICE_Init+0x54>)
 800a9fe:	f7fe ff5e 	bl	80098be <USBD_Init>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa08:	f7f6 ffdc 	bl	80019c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aa0c:	490f      	ldr	r1, [pc, #60]	; (800aa4c <MX_USB_DEVICE_Init+0x58>)
 800aa0e:	480e      	ldr	r0, [pc, #56]	; (800aa48 <MX_USB_DEVICE_Init+0x54>)
 800aa10:	f7fe ff80 	bl	8009914 <USBD_RegisterClass>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa1a:	f7f6 ffd3 	bl	80019c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aa1e:	490c      	ldr	r1, [pc, #48]	; (800aa50 <MX_USB_DEVICE_Init+0x5c>)
 800aa20:	4809      	ldr	r0, [pc, #36]	; (800aa48 <MX_USB_DEVICE_Init+0x54>)
 800aa22:	f7fe feb1 	bl	8009788 <USBD_CDC_RegisterInterface>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa2c:	f7f6 ffca 	bl	80019c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aa30:	4805      	ldr	r0, [pc, #20]	; (800aa48 <MX_USB_DEVICE_Init+0x54>)
 800aa32:	f7fe ff88 	bl	8009946 <USBD_Start>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa3c:	f7f6 ffc2 	bl	80019c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa40:	bf00      	nop
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	2000015c 	.word	0x2000015c
 800aa48:	20000ba8 	.word	0x20000ba8
 800aa4c:	20000048 	.word	0x20000048
 800aa50:	2000014c 	.word	0x2000014c

0800aa54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa58:	2200      	movs	r2, #0
 800aa5a:	4905      	ldr	r1, [pc, #20]	; (800aa70 <CDC_Init_FS+0x1c>)
 800aa5c:	4805      	ldr	r0, [pc, #20]	; (800aa74 <CDC_Init_FS+0x20>)
 800aa5e:	f7fe fea9 	bl	80097b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa62:	4905      	ldr	r1, [pc, #20]	; (800aa78 <CDC_Init_FS+0x24>)
 800aa64:	4803      	ldr	r0, [pc, #12]	; (800aa74 <CDC_Init_FS+0x20>)
 800aa66:	f7fe febe 	bl	80097e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	2000126c 	.word	0x2000126c
 800aa74:	20000ba8 	.word	0x20000ba8
 800aa78:	20000e6c 	.word	0x20000e6c

0800aa7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bc80      	pop	{r7}
 800aa88:	4770      	bx	lr
	...

0800aa8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	6039      	str	r1, [r7, #0]
 800aa96:	71fb      	strb	r3, [r7, #7]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa9c:	79fb      	ldrb	r3, [r7, #7]
 800aa9e:	2b23      	cmp	r3, #35	; 0x23
 800aaa0:	d84a      	bhi.n	800ab38 <CDC_Control_FS+0xac>
 800aaa2:	a201      	add	r2, pc, #4	; (adr r2, 800aaa8 <CDC_Control_FS+0x1c>)
 800aaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa8:	0800ab39 	.word	0x0800ab39
 800aaac:	0800ab39 	.word	0x0800ab39
 800aab0:	0800ab39 	.word	0x0800ab39
 800aab4:	0800ab39 	.word	0x0800ab39
 800aab8:	0800ab39 	.word	0x0800ab39
 800aabc:	0800ab39 	.word	0x0800ab39
 800aac0:	0800ab39 	.word	0x0800ab39
 800aac4:	0800ab39 	.word	0x0800ab39
 800aac8:	0800ab39 	.word	0x0800ab39
 800aacc:	0800ab39 	.word	0x0800ab39
 800aad0:	0800ab39 	.word	0x0800ab39
 800aad4:	0800ab39 	.word	0x0800ab39
 800aad8:	0800ab39 	.word	0x0800ab39
 800aadc:	0800ab39 	.word	0x0800ab39
 800aae0:	0800ab39 	.word	0x0800ab39
 800aae4:	0800ab39 	.word	0x0800ab39
 800aae8:	0800ab39 	.word	0x0800ab39
 800aaec:	0800ab39 	.word	0x0800ab39
 800aaf0:	0800ab39 	.word	0x0800ab39
 800aaf4:	0800ab39 	.word	0x0800ab39
 800aaf8:	0800ab39 	.word	0x0800ab39
 800aafc:	0800ab39 	.word	0x0800ab39
 800ab00:	0800ab39 	.word	0x0800ab39
 800ab04:	0800ab39 	.word	0x0800ab39
 800ab08:	0800ab39 	.word	0x0800ab39
 800ab0c:	0800ab39 	.word	0x0800ab39
 800ab10:	0800ab39 	.word	0x0800ab39
 800ab14:	0800ab39 	.word	0x0800ab39
 800ab18:	0800ab39 	.word	0x0800ab39
 800ab1c:	0800ab39 	.word	0x0800ab39
 800ab20:	0800ab39 	.word	0x0800ab39
 800ab24:	0800ab39 	.word	0x0800ab39
 800ab28:	0800ab39 	.word	0x0800ab39
 800ab2c:	0800ab39 	.word	0x0800ab39
 800ab30:	0800ab39 	.word	0x0800ab39
 800ab34:	0800ab39 	.word	0x0800ab39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab38:	bf00      	nop
  }

  return (USBD_OK);
 800ab3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bc80      	pop	{r7}
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop

0800ab48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	4805      	ldr	r0, [pc, #20]	; (800ab6c <CDC_Receive_FS+0x24>)
 800ab56:	f7fe fe46 	bl	80097e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab5a:	4804      	ldr	r0, [pc, #16]	; (800ab6c <CDC_Receive_FS+0x24>)
 800ab5c:	f7fe fe85 	bl	800986a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20000ba8 	.word	0x20000ba8

0800ab70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab80:	4b0d      	ldr	r3, [pc, #52]	; (800abb8 <CDC_Transmit_FS+0x48>)
 800ab82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e00b      	b.n	800abae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab96:	887b      	ldrh	r3, [r7, #2]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	6879      	ldr	r1, [r7, #4]
 800ab9c:	4806      	ldr	r0, [pc, #24]	; (800abb8 <CDC_Transmit_FS+0x48>)
 800ab9e:	f7fe fe09 	bl	80097b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aba2:	4805      	ldr	r0, [pc, #20]	; (800abb8 <CDC_Transmit_FS+0x48>)
 800aba4:	f7fe fe32 	bl	800980c <USBD_CDC_TransmitPacket>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800abac:	7bfb      	ldrb	r3, [r7, #15]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	20000ba8 	.word	0x20000ba8

0800abbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	4603      	mov	r3, r0
 800abc4:	6039      	str	r1, [r7, #0]
 800abc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	2212      	movs	r2, #18
 800abcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800abce:	4b03      	ldr	r3, [pc, #12]	; (800abdc <USBD_FS_DeviceDescriptor+0x20>)
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bc80      	pop	{r7}
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	20000178 	.word	0x20000178

0800abe0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4603      	mov	r3, r0
 800abe8:	6039      	str	r1, [r7, #0]
 800abea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	2204      	movs	r2, #4
 800abf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abf2:	4b03      	ldr	r3, [pc, #12]	; (800ac00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bc80      	pop	{r7}
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	2000018c 	.word	0x2000018c

0800ac04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	6039      	str	r1, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d105      	bne.n	800ac22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	4907      	ldr	r1, [pc, #28]	; (800ac38 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac1a:	4808      	ldr	r0, [pc, #32]	; (800ac3c <USBD_FS_ProductStrDescriptor+0x38>)
 800ac1c:	f7ff fe0c 	bl	800a838 <USBD_GetString>
 800ac20:	e004      	b.n	800ac2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4904      	ldr	r1, [pc, #16]	; (800ac38 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac26:	4805      	ldr	r0, [pc, #20]	; (800ac3c <USBD_FS_ProductStrDescriptor+0x38>)
 800ac28:	f7ff fe06 	bl	800a838 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac2c:	4b02      	ldr	r3, [pc, #8]	; (800ac38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	2000166c 	.word	0x2000166c
 800ac3c:	0800b58c 	.word	0x0800b58c

0800ac40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	6039      	str	r1, [r7, #0]
 800ac4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	4904      	ldr	r1, [pc, #16]	; (800ac60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac50:	4804      	ldr	r0, [pc, #16]	; (800ac64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac52:	f7ff fdf1 	bl	800a838 <USBD_GetString>
  return USBD_StrDesc;
 800ac56:	4b02      	ldr	r3, [pc, #8]	; (800ac60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	2000166c 	.word	0x2000166c
 800ac64:	0800b5a4 	.word	0x0800b5a4

0800ac68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	6039      	str	r1, [r7, #0]
 800ac72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	221a      	movs	r2, #26
 800ac78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac7a:	f000 f843 	bl	800ad04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ac7e:	4b02      	ldr	r3, [pc, #8]	; (800ac88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20000190 	.word	0x20000190

0800ac8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac98:	79fb      	ldrb	r3, [r7, #7]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d105      	bne.n	800acaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	4907      	ldr	r1, [pc, #28]	; (800acc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aca2:	4808      	ldr	r0, [pc, #32]	; (800acc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aca4:	f7ff fdc8 	bl	800a838 <USBD_GetString>
 800aca8:	e004      	b.n	800acb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	4904      	ldr	r1, [pc, #16]	; (800acc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800acae:	4805      	ldr	r0, [pc, #20]	; (800acc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800acb0:	f7ff fdc2 	bl	800a838 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acb4:	4b02      	ldr	r3, [pc, #8]	; (800acc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	2000166c 	.word	0x2000166c
 800acc4:	0800b5b8 	.word	0x0800b5b8

0800acc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	4603      	mov	r3, r0
 800acd0:	6039      	str	r1, [r7, #0]
 800acd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acd4:	79fb      	ldrb	r3, [r7, #7]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d105      	bne.n	800ace6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	4907      	ldr	r1, [pc, #28]	; (800acfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800acde:	4808      	ldr	r0, [pc, #32]	; (800ad00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ace0:	f7ff fdaa 	bl	800a838 <USBD_GetString>
 800ace4:	e004      	b.n	800acf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4904      	ldr	r1, [pc, #16]	; (800acfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800acea:	4805      	ldr	r0, [pc, #20]	; (800ad00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800acec:	f7ff fda4 	bl	800a838 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acf0:	4b02      	ldr	r3, [pc, #8]	; (800acfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	2000166c 	.word	0x2000166c
 800ad00:	0800b5c4 	.word	0x0800b5c4

0800ad04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <Get_SerialNum+0x44>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad10:	4b0e      	ldr	r3, [pc, #56]	; (800ad4c <Get_SerialNum+0x48>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad16:	4b0e      	ldr	r3, [pc, #56]	; (800ad50 <Get_SerialNum+0x4c>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4413      	add	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d009      	beq.n	800ad3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad2a:	2208      	movs	r2, #8
 800ad2c:	4909      	ldr	r1, [pc, #36]	; (800ad54 <Get_SerialNum+0x50>)
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 f814 	bl	800ad5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad34:	2204      	movs	r2, #4
 800ad36:	4908      	ldr	r1, [pc, #32]	; (800ad58 <Get_SerialNum+0x54>)
 800ad38:	68b8      	ldr	r0, [r7, #8]
 800ad3a:	f000 f80f 	bl	800ad5c <IntToUnicode>
  }
}
 800ad3e:	bf00      	nop
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	1ffff7e8 	.word	0x1ffff7e8
 800ad4c:	1ffff7ec 	.word	0x1ffff7ec
 800ad50:	1ffff7f0 	.word	0x1ffff7f0
 800ad54:	20000192 	.word	0x20000192
 800ad58:	200001a2 	.word	0x200001a2

0800ad5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	4613      	mov	r3, r2
 800ad68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad6e:	2300      	movs	r3, #0
 800ad70:	75fb      	strb	r3, [r7, #23]
 800ad72:	e027      	b.n	800adc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	0f1b      	lsrs	r3, r3, #28
 800ad78:	2b09      	cmp	r3, #9
 800ad7a:	d80b      	bhi.n	800ad94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	0f1b      	lsrs	r3, r3, #28
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	4619      	mov	r1, r3
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	440b      	add	r3, r1
 800ad8c:	3230      	adds	r2, #48	; 0x30
 800ad8e:	b2d2      	uxtb	r2, r2
 800ad90:	701a      	strb	r2, [r3, #0]
 800ad92:	e00a      	b.n	800adaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	0f1b      	lsrs	r3, r3, #28
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	4619      	mov	r1, r3
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	440b      	add	r3, r1
 800ada4:	3237      	adds	r2, #55	; 0x37
 800ada6:	b2d2      	uxtb	r2, r2
 800ada8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	011b      	lsls	r3, r3, #4
 800adae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	3301      	adds	r3, #1
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	4413      	add	r3, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	3301      	adds	r3, #1
 800adc2:	75fb      	strb	r3, [r7, #23]
 800adc4:	7dfa      	ldrb	r2, [r7, #23]
 800adc6:	79fb      	ldrb	r3, [r7, #7]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d3d3      	bcc.n	800ad74 <IntToUnicode+0x18>
  }
}
 800adcc:	bf00      	nop
 800adce:	bf00      	nop
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	bc80      	pop	{r7}
 800add6:	4770      	bx	lr

0800add8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a0d      	ldr	r2, [pc, #52]	; (800ae1c <HAL_PCD_MspInit+0x44>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d113      	bne.n	800ae12 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800adea:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <HAL_PCD_MspInit+0x48>)
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	4a0c      	ldr	r2, [pc, #48]	; (800ae20 <HAL_PCD_MspInit+0x48>)
 800adf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800adf4:	61d3      	str	r3, [r2, #28]
 800adf6:	4b0a      	ldr	r3, [pc, #40]	; (800ae20 <HAL_PCD_MspInit+0x48>)
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ae02:	2200      	movs	r2, #0
 800ae04:	2100      	movs	r1, #0
 800ae06:	2014      	movs	r0, #20
 800ae08:	f7f7 fbcd 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ae0c:	2014      	movs	r0, #20
 800ae0e:	f7f7 fbe6 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	40005c00 	.word	0x40005c00
 800ae20:	40021000 	.word	0x40021000

0800ae24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f7fe fdcb 	bl	80099d6 <USBD_LL_SetupStage>
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ae5a:	78fa      	ldrb	r2, [r7, #3]
 800ae5c:	6879      	ldr	r1, [r7, #4]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	440b      	add	r3, r1
 800ae68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f7fe fdfd 	bl	8009a70 <USBD_LL_DataOutStage>
}
 800ae76:	bf00      	nop
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	4613      	mov	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	440b      	add	r3, r1
 800ae9e:	333c      	adds	r3, #60	; 0x3c
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	78fb      	ldrb	r3, [r7, #3]
 800aea4:	4619      	mov	r1, r3
 800aea6:	f7fe fe54 	bl	8009b52 <USBD_LL_DataInStage>
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe ff64 	bl	8009d8e <USBD_LL_SOF>
}
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aed6:	2301      	movs	r3, #1
 800aed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d001      	beq.n	800aee6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aee2:	f7f6 fd6f 	bl	80019c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aeec:	7bfa      	ldrb	r2, [r7, #15]
 800aeee:	4611      	mov	r1, r2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fe ff14 	bl	8009d1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fecd 	bl	8009c9c <USBD_LL_Reset>
}
 800af02:	bf00      	nop
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
	...

0800af0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe ff0e 	bl	8009d3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d005      	beq.n	800af34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af28:	4b04      	ldr	r3, [pc, #16]	; (800af3c <HAL_PCD_SuspendCallback+0x30>)
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	4a03      	ldr	r2, [pc, #12]	; (800af3c <HAL_PCD_SuspendCallback+0x30>)
 800af2e:	f043 0306 	orr.w	r3, r3, #6
 800af32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	e000ed00 	.word	0xe000ed00

0800af40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fe ff08 	bl	8009d64 <USBD_LL_Resume>
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800af64:	4a28      	ldr	r2, [pc, #160]	; (800b008 <USBD_LL_Init+0xac>)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a26      	ldr	r2, [pc, #152]	; (800b008 <USBD_LL_Init+0xac>)
 800af70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800af74:	4b24      	ldr	r3, [pc, #144]	; (800b008 <USBD_LL_Init+0xac>)
 800af76:	4a25      	ldr	r2, [pc, #148]	; (800b00c <USBD_LL_Init+0xb0>)
 800af78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af7a:	4b23      	ldr	r3, [pc, #140]	; (800b008 <USBD_LL_Init+0xac>)
 800af7c:	2208      	movs	r2, #8
 800af7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af80:	4b21      	ldr	r3, [pc, #132]	; (800b008 <USBD_LL_Init+0xac>)
 800af82:	2202      	movs	r2, #2
 800af84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af86:	4b20      	ldr	r3, [pc, #128]	; (800b008 <USBD_LL_Init+0xac>)
 800af88:	2200      	movs	r2, #0
 800af8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af8c:	4b1e      	ldr	r3, [pc, #120]	; (800b008 <USBD_LL_Init+0xac>)
 800af8e:	2200      	movs	r2, #0
 800af90:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af92:	4b1d      	ldr	r3, [pc, #116]	; (800b008 <USBD_LL_Init+0xac>)
 800af94:	2200      	movs	r2, #0
 800af96:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af98:	481b      	ldr	r0, [pc, #108]	; (800b008 <USBD_LL_Init+0xac>)
 800af9a:	f7f8 fee0 	bl	8003d5e <HAL_PCD_Init>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800afa4:	f7f6 fd0e 	bl	80019c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afae:	2318      	movs	r3, #24
 800afb0:	2200      	movs	r2, #0
 800afb2:	2100      	movs	r1, #0
 800afb4:	f7fa fbff 	bl	80057b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afbe:	2358      	movs	r3, #88	; 0x58
 800afc0:	2200      	movs	r2, #0
 800afc2:	2180      	movs	r1, #128	; 0x80
 800afc4:	f7fa fbf7 	bl	80057b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afce:	23c0      	movs	r3, #192	; 0xc0
 800afd0:	2200      	movs	r2, #0
 800afd2:	2181      	movs	r1, #129	; 0x81
 800afd4:	f7fa fbef 	bl	80057b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afde:	f44f 7388 	mov.w	r3, #272	; 0x110
 800afe2:	2200      	movs	r2, #0
 800afe4:	2101      	movs	r1, #1
 800afe6:	f7fa fbe6 	bl	80057b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aff4:	2200      	movs	r2, #0
 800aff6:	2182      	movs	r1, #130	; 0x82
 800aff8:	f7fa fbdd 	bl	80057b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	2000186c 	.word	0x2000186c
 800b00c:	40005c00 	.word	0x40005c00

0800b010 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b026:	4618      	mov	r0, r3
 800b028:	f7f8 ff98 	bl	8003f5c <HAL_PCD_Start>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f94e 	bl	800b2d4 <USBD_Get_USB_Status>
 800b038:	4603      	mov	r3, r0
 800b03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b084      	sub	sp, #16
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	461a      	mov	r2, r3
 800b054:	4603      	mov	r3, r0
 800b056:	70fb      	strb	r3, [r7, #3]
 800b058:	460b      	mov	r3, r1
 800b05a:	70bb      	strb	r3, [r7, #2]
 800b05c:	4613      	mov	r3, r2
 800b05e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b06e:	78bb      	ldrb	r3, [r7, #2]
 800b070:	883a      	ldrh	r2, [r7, #0]
 800b072:	78f9      	ldrb	r1, [r7, #3]
 800b074:	f7f9 f8ed 	bl	8004252 <HAL_PCD_EP_Open>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f928 	bl	800b2d4 <USBD_Get_USB_Status>
 800b084:	4603      	mov	r3, r0
 800b086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b088:	7bbb      	ldrb	r3, [r7, #14]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	460b      	mov	r3, r1
 800b09c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0ac:	78fa      	ldrb	r2, [r7, #3]
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f9 f92b 	bl	800430c <HAL_PCD_EP_Close>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f909 	bl	800b2d4 <USBD_Get_USB_Status>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0ea:	78fa      	ldrb	r2, [r7, #3]
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7f9 f9d3 	bl	800449a <HAL_PCD_EP_SetStall>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 f8ea 	bl	800b2d4 <USBD_Get_USB_Status>
 800b100:	4603      	mov	r3, r0
 800b102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b104:	7bbb      	ldrb	r3, [r7, #14]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	460b      	mov	r3, r1
 800b118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b128:	78fa      	ldrb	r2, [r7, #3]
 800b12a:	4611      	mov	r1, r2
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7f9 fa14 	bl	800455a <HAL_PCD_EP_ClrStall>
 800b132:	4603      	mov	r3, r0
 800b134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 f8cb 	bl	800b2d4 <USBD_Get_USB_Status>
 800b13e:	4603      	mov	r3, r0
 800b140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b142:	7bbb      	ldrb	r3, [r7, #14]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b15e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b164:	2b00      	cmp	r3, #0
 800b166:	da0c      	bge.n	800b182 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b16e:	68f9      	ldr	r1, [r7, #12]
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	4613      	mov	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	00db      	lsls	r3, r3, #3
 800b17a:	440b      	add	r3, r1
 800b17c:	3302      	adds	r3, #2
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	e00b      	b.n	800b19a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b182:	78fb      	ldrb	r3, [r7, #3]
 800b184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b188:	68f9      	ldr	r1, [r7, #12]
 800b18a:	4613      	mov	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	00db      	lsls	r3, r3, #3
 800b192:	440b      	add	r3, r1
 800b194:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b198:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bc80      	pop	{r7}
 800b1a2:	4770      	bx	lr

0800b1a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1be:	78fa      	ldrb	r2, [r7, #3]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7f9 f820 	bl	8004208 <HAL_PCD_SetAddress>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f880 	bl	800b2d4 <USBD_Get_USB_Status>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b086      	sub	sp, #24
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	72fb      	strb	r3, [r7, #11]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b204:	893b      	ldrh	r3, [r7, #8]
 800b206:	7af9      	ldrb	r1, [r7, #11]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	f7f9 f90f 	bl	800442c <HAL_PCD_EP_Transmit>
 800b20e:	4603      	mov	r3, r0
 800b210:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	4618      	mov	r0, r3
 800b216:	f000 f85d 	bl	800b2d4 <USBD_Get_USB_Status>
 800b21a:	4603      	mov	r3, r0
 800b21c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b21e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	461a      	mov	r2, r3
 800b234:	460b      	mov	r3, r1
 800b236:	72fb      	strb	r3, [r7, #11]
 800b238:	4613      	mov	r3, r2
 800b23a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b23c:	2300      	movs	r3, #0
 800b23e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b24a:	893b      	ldrh	r3, [r7, #8]
 800b24c:	7af9      	ldrb	r1, [r7, #11]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	f7f9 f8a4 	bl	800439c <HAL_PCD_EP_Receive>
 800b254:	4603      	mov	r3, r0
 800b256:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b258:	7dfb      	ldrb	r3, [r7, #23]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 f83a 	bl	800b2d4 <USBD_Get_USB_Status>
 800b260:	4603      	mov	r3, r0
 800b262:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b264:	7dbb      	ldrb	r3, [r7, #22]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b082      	sub	sp, #8
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	460b      	mov	r3, r1
 800b278:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b280:	78fa      	ldrb	r2, [r7, #3]
 800b282:	4611      	mov	r1, r2
 800b284:	4618      	mov	r0, r3
 800b286:	f7f9 f8ba 	bl	80043fe <HAL_PCD_EP_GetRxCount>
 800b28a:	4603      	mov	r3, r0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b29c:	4b02      	ldr	r3, [pc, #8]	; (800b2a8 <USBD_static_malloc+0x14>)
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bc80      	pop	{r7}
 800b2a6:	4770      	bx	lr
 800b2a8:	20001b5c 	.word	0x20001b5c

0800b2ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]

}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bc80      	pop	{r7}
 800b2bc:	4770      	bx	lr

0800b2be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b083      	sub	sp, #12
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b2ca:	bf00      	nop
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bc80      	pop	{r7}
 800b2d2:	4770      	bx	lr

0800b2d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2e2:	79fb      	ldrb	r3, [r7, #7]
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d817      	bhi.n	800b318 <USBD_Get_USB_Status+0x44>
 800b2e8:	a201      	add	r2, pc, #4	; (adr r2, 800b2f0 <USBD_Get_USB_Status+0x1c>)
 800b2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ee:	bf00      	nop
 800b2f0:	0800b301 	.word	0x0800b301
 800b2f4:	0800b307 	.word	0x0800b307
 800b2f8:	0800b30d 	.word	0x0800b30d
 800b2fc:	0800b313 	.word	0x0800b313
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	73fb      	strb	r3, [r7, #15]
    break;
 800b304:	e00b      	b.n	800b31e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b306:	2302      	movs	r3, #2
 800b308:	73fb      	strb	r3, [r7, #15]
    break;
 800b30a:	e008      	b.n	800b31e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b30c:	2301      	movs	r3, #1
 800b30e:	73fb      	strb	r3, [r7, #15]
    break;
 800b310:	e005      	b.n	800b31e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b312:	2302      	movs	r3, #2
 800b314:	73fb      	strb	r3, [r7, #15]
    break;
 800b316:	e002      	b.n	800b31e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b318:	2302      	movs	r3, #2
 800b31a:	73fb      	strb	r3, [r7, #15]
    break;
 800b31c:	bf00      	nop
  }
  return usb_status;
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	bc80      	pop	{r7}
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop

0800b32c <__libc_init_array>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	2600      	movs	r6, #0
 800b330:	4d0c      	ldr	r5, [pc, #48]	; (800b364 <__libc_init_array+0x38>)
 800b332:	4c0d      	ldr	r4, [pc, #52]	; (800b368 <__libc_init_array+0x3c>)
 800b334:	1b64      	subs	r4, r4, r5
 800b336:	10a4      	asrs	r4, r4, #2
 800b338:	42a6      	cmp	r6, r4
 800b33a:	d109      	bne.n	800b350 <__libc_init_array+0x24>
 800b33c:	f000 f8f4 	bl	800b528 <_init>
 800b340:	2600      	movs	r6, #0
 800b342:	4d0a      	ldr	r5, [pc, #40]	; (800b36c <__libc_init_array+0x40>)
 800b344:	4c0a      	ldr	r4, [pc, #40]	; (800b370 <__libc_init_array+0x44>)
 800b346:	1b64      	subs	r4, r4, r5
 800b348:	10a4      	asrs	r4, r4, #2
 800b34a:	42a6      	cmp	r6, r4
 800b34c:	d105      	bne.n	800b35a <__libc_init_array+0x2e>
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	f855 3b04 	ldr.w	r3, [r5], #4
 800b354:	4798      	blx	r3
 800b356:	3601      	adds	r6, #1
 800b358:	e7ee      	b.n	800b338 <__libc_init_array+0xc>
 800b35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b35e:	4798      	blx	r3
 800b360:	3601      	adds	r6, #1
 800b362:	e7f2      	b.n	800b34a <__libc_init_array+0x1e>
 800b364:	0800caf4 	.word	0x0800caf4
 800b368:	0800caf4 	.word	0x0800caf4
 800b36c:	0800caf4 	.word	0x0800caf4
 800b370:	0800cafc 	.word	0x0800cafc

0800b374 <__itoa>:
 800b374:	1e93      	subs	r3, r2, #2
 800b376:	2b22      	cmp	r3, #34	; 0x22
 800b378:	b510      	push	{r4, lr}
 800b37a:	460c      	mov	r4, r1
 800b37c:	d904      	bls.n	800b388 <__itoa+0x14>
 800b37e:	2300      	movs	r3, #0
 800b380:	461c      	mov	r4, r3
 800b382:	700b      	strb	r3, [r1, #0]
 800b384:	4620      	mov	r0, r4
 800b386:	bd10      	pop	{r4, pc}
 800b388:	2a0a      	cmp	r2, #10
 800b38a:	d109      	bne.n	800b3a0 <__itoa+0x2c>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	da07      	bge.n	800b3a0 <__itoa+0x2c>
 800b390:	232d      	movs	r3, #45	; 0x2d
 800b392:	700b      	strb	r3, [r1, #0]
 800b394:	2101      	movs	r1, #1
 800b396:	4240      	negs	r0, r0
 800b398:	4421      	add	r1, r4
 800b39a:	f000 f81b 	bl	800b3d4 <__utoa>
 800b39e:	e7f1      	b.n	800b384 <__itoa+0x10>
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	e7f9      	b.n	800b398 <__itoa+0x24>

0800b3a4 <itoa>:
 800b3a4:	f7ff bfe6 	b.w	800b374 <__itoa>

0800b3a8 <memcpy>:
 800b3a8:	440a      	add	r2, r1
 800b3aa:	4291      	cmp	r1, r2
 800b3ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3b0:	d100      	bne.n	800b3b4 <memcpy+0xc>
 800b3b2:	4770      	bx	lr
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ba:	4291      	cmp	r1, r2
 800b3bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3c0:	d1f9      	bne.n	800b3b6 <memcpy+0xe>
 800b3c2:	bd10      	pop	{r4, pc}

0800b3c4 <memset>:
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	4402      	add	r2, r0
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d100      	bne.n	800b3ce <memset+0xa>
 800b3cc:	4770      	bx	lr
 800b3ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d2:	e7f9      	b.n	800b3c8 <memset+0x4>

0800b3d4 <__utoa>:
 800b3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3d6:	b08b      	sub	sp, #44	; 0x2c
 800b3d8:	4605      	mov	r5, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	466e      	mov	r6, sp
 800b3de:	4c1d      	ldr	r4, [pc, #116]	; (800b454 <__utoa+0x80>)
 800b3e0:	f104 0c20 	add.w	ip, r4, #32
 800b3e4:	4637      	mov	r7, r6
 800b3e6:	6820      	ldr	r0, [r4, #0]
 800b3e8:	6861      	ldr	r1, [r4, #4]
 800b3ea:	3408      	adds	r4, #8
 800b3ec:	c703      	stmia	r7!, {r0, r1}
 800b3ee:	4564      	cmp	r4, ip
 800b3f0:	463e      	mov	r6, r7
 800b3f2:	d1f7      	bne.n	800b3e4 <__utoa+0x10>
 800b3f4:	7921      	ldrb	r1, [r4, #4]
 800b3f6:	6820      	ldr	r0, [r4, #0]
 800b3f8:	7139      	strb	r1, [r7, #4]
 800b3fa:	1e91      	subs	r1, r2, #2
 800b3fc:	2922      	cmp	r1, #34	; 0x22
 800b3fe:	6038      	str	r0, [r7, #0]
 800b400:	f04f 0100 	mov.w	r1, #0
 800b404:	d904      	bls.n	800b410 <__utoa+0x3c>
 800b406:	7019      	strb	r1, [r3, #0]
 800b408:	460b      	mov	r3, r1
 800b40a:	4618      	mov	r0, r3
 800b40c:	b00b      	add	sp, #44	; 0x2c
 800b40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b410:	1e58      	subs	r0, r3, #1
 800b412:	4684      	mov	ip, r0
 800b414:	fbb5 f7f2 	udiv	r7, r5, r2
 800b418:	fb02 5617 	mls	r6, r2, r7, r5
 800b41c:	3628      	adds	r6, #40	; 0x28
 800b41e:	446e      	add	r6, sp
 800b420:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b424:	460c      	mov	r4, r1
 800b426:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b42a:	462e      	mov	r6, r5
 800b42c:	42b2      	cmp	r2, r6
 800b42e:	463d      	mov	r5, r7
 800b430:	f101 0101 	add.w	r1, r1, #1
 800b434:	d9ee      	bls.n	800b414 <__utoa+0x40>
 800b436:	2200      	movs	r2, #0
 800b438:	545a      	strb	r2, [r3, r1]
 800b43a:	1919      	adds	r1, r3, r4
 800b43c:	1aa5      	subs	r5, r4, r2
 800b43e:	42aa      	cmp	r2, r5
 800b440:	dae3      	bge.n	800b40a <__utoa+0x36>
 800b442:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b446:	780e      	ldrb	r6, [r1, #0]
 800b448:	3201      	adds	r2, #1
 800b44a:	7006      	strb	r6, [r0, #0]
 800b44c:	f801 5901 	strb.w	r5, [r1], #-1
 800b450:	e7f4      	b.n	800b43c <__utoa+0x68>
 800b452:	bf00      	nop
 800b454:	0800cacc 	.word	0x0800cacc

0800b458 <register_fini>:
 800b458:	4b02      	ldr	r3, [pc, #8]	; (800b464 <register_fini+0xc>)
 800b45a:	b113      	cbz	r3, 800b462 <register_fini+0xa>
 800b45c:	4802      	ldr	r0, [pc, #8]	; (800b468 <register_fini+0x10>)
 800b45e:	f000 b805 	b.w	800b46c <atexit>
 800b462:	4770      	bx	lr
 800b464:	00000000 	.word	0x00000000
 800b468:	0800b479 	.word	0x0800b479

0800b46c <atexit>:
 800b46c:	2300      	movs	r3, #0
 800b46e:	4601      	mov	r1, r0
 800b470:	461a      	mov	r2, r3
 800b472:	4618      	mov	r0, r3
 800b474:	f000 b816 	b.w	800b4a4 <__register_exitproc>

0800b478 <__libc_fini_array>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4d07      	ldr	r5, [pc, #28]	; (800b498 <__libc_fini_array+0x20>)
 800b47c:	4c07      	ldr	r4, [pc, #28]	; (800b49c <__libc_fini_array+0x24>)
 800b47e:	1b64      	subs	r4, r4, r5
 800b480:	10a4      	asrs	r4, r4, #2
 800b482:	b91c      	cbnz	r4, 800b48c <__libc_fini_array+0x14>
 800b484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b488:	f000 b854 	b.w	800b534 <_fini>
 800b48c:	3c01      	subs	r4, #1
 800b48e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b492:	4798      	blx	r3
 800b494:	e7f5      	b.n	800b482 <__libc_fini_array+0xa>
 800b496:	bf00      	nop
 800b498:	0800cafc 	.word	0x0800cafc
 800b49c:	0800cb00 	.word	0x0800cb00

0800b4a0 <__retarget_lock_acquire_recursive>:
 800b4a0:	4770      	bx	lr

0800b4a2 <__retarget_lock_release_recursive>:
 800b4a2:	4770      	bx	lr

0800b4a4 <__register_exitproc>:
 800b4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b520 <__register_exitproc+0x7c>
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	f8da 0000 	ldr.w	r0, [sl]
 800b4b2:	4698      	mov	r8, r3
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	4691      	mov	r9, r2
 800b4b8:	f7ff fff2 	bl	800b4a0 <__retarget_lock_acquire_recursive>
 800b4bc:	4b19      	ldr	r3, [pc, #100]	; (800b524 <__register_exitproc+0x80>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800b4c4:	b91c      	cbnz	r4, 800b4ce <__register_exitproc+0x2a>
 800b4c6:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800b4ca:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800b4ce:	6865      	ldr	r5, [r4, #4]
 800b4d0:	f8da 0000 	ldr.w	r0, [sl]
 800b4d4:	2d1f      	cmp	r5, #31
 800b4d6:	dd05      	ble.n	800b4e4 <__register_exitproc+0x40>
 800b4d8:	f7ff ffe3 	bl	800b4a2 <__retarget_lock_release_recursive>
 800b4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e4:	b19e      	cbz	r6, 800b50e <__register_exitproc+0x6a>
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800b4ec:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800b4f0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800b4f4:	40aa      	lsls	r2, r5
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800b4fc:	2e02      	cmp	r6, #2
 800b4fe:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800b502:	bf02      	ittt	eq
 800b504:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800b508:	4313      	orreq	r3, r2
 800b50a:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800b50e:	1c6b      	adds	r3, r5, #1
 800b510:	3502      	adds	r5, #2
 800b512:	6063      	str	r3, [r4, #4]
 800b514:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800b518:	f7ff ffc3 	bl	800b4a2 <__retarget_lock_release_recursive>
 800b51c:	2000      	movs	r0, #0
 800b51e:	e7df      	b.n	800b4e0 <__register_exitproc+0x3c>
 800b520:	200005d8 	.word	0x200005d8
 800b524:	0800cac8 	.word	0x0800cac8

0800b528 <_init>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	bf00      	nop
 800b52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b52e:	bc08      	pop	{r3}
 800b530:	469e      	mov	lr, r3
 800b532:	4770      	bx	lr

0800b534 <_fini>:
 800b534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b536:	bf00      	nop
 800b538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b53a:	bc08      	pop	{r3}
 800b53c:	469e      	mov	lr, r3
 800b53e:	4770      	bx	lr
